module @jit__train_step attributes {mhlo.num_partitions = 4 : i32, mhlo.num_replicas = 1 : i32} {
  sdy.mesh @mesh = <["replica"=1, "data"=4, "model"=1]>
  func.func public @main(%arg0: tensor<i32> {tf.aliasing_output = 1 : i32}, %arg1: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 2 : i32}, %arg2: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 3 : i32}, %arg3: tensor<12x768x3x12x64xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {}, {"model"}, {}]>, tf.aliasing_output = 4 : i32}, %arg4: tensor<12x3x12x64xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {}, {"model"}, {}]>, tf.aliasing_output = 5 : i32}, %arg5: tensor<12x12x64x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {}, {"data"}]>, tf.aliasing_output = 6 : i32}, %arg6: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 7 : i32}, %arg7: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 8 : i32}, %arg8: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 9 : i32}, %arg9: tensor<12x768x3072xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {"model"}]>, tf.aliasing_output = 10 : i32}, %arg10: tensor<12x3072xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}]>, tf.aliasing_output = 11 : i32}, %arg11: tensor<12x3072x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {"data"}]>, tf.aliasing_output = 12 : i32}, %arg12: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 13 : i32}, %arg13: tensor<768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>, tf.aliasing_output = 14 : i32}, %arg14: tensor<768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>, tf.aliasing_output = 15 : i32}, %arg15: tensor<50257x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 16 : i32}, %arg16: tensor<1024x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 17 : i32}, %arg17: tensor<i32> {tf.aliasing_output = 18 : i32}, %arg18: tensor<i32> {tf.aliasing_output = 20 : i32}, %arg19: tensor<i32> {tf.aliasing_output = 21 : i32}, %arg20: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 22 : i32}, %arg21: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 23 : i32}, %arg22: tensor<12x768x3x12x64xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {}, {"model"}, {}]>, tf.aliasing_output = 24 : i32}, %arg23: tensor<12x3x12x64xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {}, {"model"}, {}]>, tf.aliasing_output = 25 : i32}, %arg24: tensor<12x12x64x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {}, {"data"}]>, tf.aliasing_output = 26 : i32}, %arg25: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 27 : i32}, %arg26: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 28 : i32}, %arg27: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 29 : i32}, %arg28: tensor<12x768x3072xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {"model"}]>, tf.aliasing_output = 30 : i32}, %arg29: tensor<12x3072xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}]>, tf.aliasing_output = 31 : i32}, %arg30: tensor<12x3072x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {"data"}]>, tf.aliasing_output = 32 : i32}, %arg31: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 33 : i32}, %arg32: tensor<768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>, tf.aliasing_output = 34 : i32}, %arg33: tensor<768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>, tf.aliasing_output = 35 : i32}, %arg34: tensor<50257x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 36 : i32}, %arg35: tensor<1024x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 37 : i32}, %arg36: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 38 : i32}, %arg37: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 39 : i32}, %arg38: tensor<12x768x3x12x64xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {}, {"model"}, {}]>, tf.aliasing_output = 40 : i32}, %arg39: tensor<12x3x12x64xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {}, {"model"}, {}]>, tf.aliasing_output = 41 : i32}, %arg40: tensor<12x12x64x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {}, {"data"}]>, tf.aliasing_output = 42 : i32}, %arg41: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 43 : i32}, %arg42: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 44 : i32}, %arg43: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 45 : i32}, %arg44: tensor<12x768x3072xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {"model"}]>, tf.aliasing_output = 46 : i32}, %arg45: tensor<12x3072xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}]>, tf.aliasing_output = 47 : i32}, %arg46: tensor<12x3072x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {"data"}]>, tf.aliasing_output = 48 : i32}, %arg47: tensor<12x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 49 : i32}, %arg48: tensor<768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>, tf.aliasing_output = 50 : i32}, %arg49: tensor<768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>, tf.aliasing_output = 51 : i32}, %arg50: tensor<50257x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 52 : i32}, %arg51: tensor<1024x768xbf16> {sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>, tf.aliasing_output = 53 : i32}, %arg52: tensor<2xui32> {sdy.sharding = #sdy.sharding<@mesh, [{}]>, tf.aliasing_output = 54 : i32}, %arg53: tensor<32x1024xi32> {sdy.sharding = #sdy.sharding<@mesh, [{"replica", "data"}, {}]>}, %arg54: tensor<32x1024xi32> {sdy.sharding = #sdy.sharding<@mesh, [{"replica", "data"}, {}]>}, %arg55: tensor<32x1024xi32> {sdy.sharding = #sdy.sharding<@mesh, [{"replica", "data"}, {}]>}, %arg56: tensor<32x1024xi32> {sdy.sharding = #sdy.sharding<@mesh, [{"replica", "data"}, {}]>}) -> (tensor<f32> {jax.result_info = "result[0].loss"}, tensor<i32> {jax.result_info = "result[0].new_state.step"}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.ln_1.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.ln_1.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768x3x12x64xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.attn.c_attn.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {}, {"model"}, {}]>}, tensor<12x3x12x64xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.attn.c_attn.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {}, {"model"}, {}]>}, tensor<12x12x64x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.attn.c_proj.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.attn.c_proj.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.ln_2.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.ln_2.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768x3072xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.mlp.c_fc.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {"model"}]>}, tensor<12x3072xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.mlp.c_fc.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}]>}, tensor<12x3072x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.mlp.c_proj.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.model.transformer.blocks.stacked.mlp.c_proj.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<768xbf16> {jax.result_info = "result[0].new_state.model.transformer.ln_f.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>}, tensor<768xbf16> {jax.result_info = "result[0].new_state.model.transformer.ln_f.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>}, tensor<50257x768xbf16> {jax.result_info = "result[0].new_state.model.embeddings.token_embeddings.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<1024x768xbf16> {jax.result_info = "result[0].new_state.model.embeddings.position_embeddings.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<i32> {jax.result_info = "result[0].new_state.opt_state.count"}, tensor<bf16> {jax.result_info = "result[0].new_state.opt_state.hyperparams['learning_rate']"}, tensor<i32> {jax.result_info = "result[0].new_state.opt_state.hyperparams_states['learning_rate'].count"}, tensor<i32> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].count"}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.ln_1.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.ln_1.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768x3x12x64xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.attn.c_attn.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {}, {"model"}, {}]>}, tensor<12x3x12x64xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.attn.c_attn.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {}, {"model"}, {}]>}, tensor<12x12x64x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.attn.c_proj.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.attn.c_proj.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.ln_2.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.ln_2.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768x3072xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.mlp.c_fc.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {"model"}]>}, tensor<12x3072xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.mlp.c_fc.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}]>}, tensor<12x3072x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.mlp.c_proj.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.blocks.stacked.mlp.c_proj.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.ln_f.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>}, tensor<768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.transformer.ln_f.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>}, tensor<50257x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.embeddings.token_embeddings.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<1024x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].mu.embeddings.position_embeddings.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.ln_1.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.ln_1.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768x3x12x64xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.attn.c_attn.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {}, {"model"}, {}]>}, tensor<12x3x12x64xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.attn.c_attn.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {}, {"model"}, {}]>}, tensor<12x12x64x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.attn.c_proj.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.attn.c_proj.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.ln_2.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.ln_2.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<12x768x3072xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.mlp.c_fc.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}, {"model"}]>}, tensor<12x3072xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.mlp.c_fc.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}]>}, tensor<12x3072x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.mlp.c_proj.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"model"}, {"data"}]>}, tensor<12x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.blocks.stacked.mlp.c_proj.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.ln_f.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>}, tensor<768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.transformer.ln_f.bias[0]", sdy.sharding = #sdy.sharding<@mesh, [{"data"}]>}, tensor<50257x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.embeddings.token_embeddings.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<1024x768xbf16> {jax.result_info = "result[0].new_state.opt_state.inner_state[1].nu.embeddings.position_embeddings.weight[0]", sdy.sharding = #sdy.sharding<@mesh, [{}, {"data"}]>}, tensor<2xui32> {jax.result_info = "result[0].new_state.training_key", sdy.sharding = #sdy.sharding<@mesh, [{}]>}) {
    %c = stablehlo.constant dense<[[[0, 0], [0, 1]]]> : tensor<1x2x2xi8>
    %c_0 = stablehlo.constant dense<[[[1, 0], [2, 1]]]> : tensor<1x2x2xi8>
    %c_1 = stablehlo.constant dense<"tensor<1024xi32>
    %c_2 = stablehlo.constant dense<[[[0, 0], [0, 1]]]> : tensor<1x2x2xi8>
    %c_3 = stablehlo.constant dense<[[[1, 0], [2, 1]]]> : tensor<1x2x2xi8>
    %c_4 = stablehlo.constant dense<"tensor<1024xi32>
    %c_5 = stablehlo.constant dense<[[[0, 0], [1, 1]]]> : tensor<1x2x2xi8>
    %c_6 = stablehlo.constant dense<[[[1, 0], [2, 1]]]> : tensor<1x2x2xi8>
    %c_7 = stablehlo.constant dense<"tensor<1024xi32>
    %0 = call @_threefry_split(%arg52) : (tensor<2xui32>) -> tensor<2x2xui32>
    %1 = stablehlo.slice %0 [0:1, 0:2] : (tensor<2x2xui32>) -> tensor<1x2xui32>
    %2 = stablehlo.reshape %1 : (tensor<1x2xui32>) -> tensor<2xui32>
    %3 = stablehlo.slice %0 [1:2, 0:2] : (tensor<2x2xui32>) -> tensor<1x2xui32>
    %4 = stablehlo.reshape %3 : (tensor<1x2xui32>) -> tensor<2xui32>
    %5 = call @_threefry_split(%2) : (tensor<2xui32>) -> tensor<2x2xui32>
    %6 = stablehlo.slice %5 [0:1, 0:2] : (tensor<2x2xui32>) -> tensor<1x2xui32>
    %7 = stablehlo.reshape %6 : (tensor<1x2xui32>) -> tensor<2xui32>
    %8 = stablehlo.slice %5 [1:2, 0:2] : (tensor<2x2xui32>) -> tensor<1x2xui32>
    %9 = stablehlo.reshape %8 : (tensor<1x2xui32>) -> tensor<2xui32>
    %10 = stablehlo.iota dim = 0 : tensor<1024xi32>
    %c_8 = stablehlo.constant dense<1> : tensor<i32>
    %11 = stablehlo.broadcast_in_dim %c_8, dims = [] : (tensor<i32>) -> tensor<1024xi32>
    %12 = stablehlo.multiply %10, %11 : tensor<1024xi32>
    %c_9 = stablehlo.constant dense<0> : tensor<i32>
    %13 = stablehlo.broadcast_in_dim %c_9, dims = [] : (tensor<i32>) -> tensor<1024xi32>
    %14 = stablehlo.add %12, %13 : tensor<1024xi32>
    %15:2 = call @_take(%arg15, %arg53) : (tensor<50257x768xbf16>, tensor<32x1024xi32>) -> (tensor<32x1024x768xbf16>, tensor<32x1024x1xi32>)
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %16 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %17 = stablehlo.multiply %15#0, %16 : tensor<32x1024x768xbf16>
    %18:2 = call @_take_18(%arg16, %14) : (tensor<1024x768xbf16>, tensor<1024xi32>) -> (tensor<1024x768xbf16>, tensor<1024x1xi32>)
    %cst_10 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %19 = stablehlo.broadcast_in_dim %cst_10, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %20 = stablehlo.multiply %18#0, %19 : tensor<1024x768xbf16>
    %21 = stablehlo.broadcast_in_dim %20, dims = [1, 2] : (tensor<1024x768xbf16>) -> tensor<32x1024x768xbf16>
    %22 = stablehlo.add %17, %21 : tensor<32x1024x768xbf16>
    %cst_11 = stablehlo.constant dense<8.000000e-01> : tensor<f32>
    %23 = stablehlo.broadcast_in_dim %cst_11, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %24 = stablehlo.convert %23 : tensor<32x1024x768xf32>
    %25 = call @_bernoulli(%7, %24) : (tensor<2xui32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    %26 = sdy.sharding_constraint %25 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xi1>
    %cst_12 = stablehlo.constant dense<8.007810e-01> : tensor<bf16>
    %27 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %28 = stablehlo.divide %22, %27 : tensor<32x1024x768xbf16>
    %c_13 = stablehlo.constant dense<0> : tensor<i32>
    %29 = call @_where_56(%26, %28, %c_13) : (tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>, tensor<i32>) -> tensor<32x1024x768xbf16>
    %30 = call @_threefry_split_60(%9) : (tensor<2xui32>) -> tensor<12x2xui32>
    %31:3 = call @_var(%c_13) : (tensor<i32>) -> (tensor<f32>, tensor<i1>, tensor<32x1024xbf16>)
    %32 = call @_take_79(%c_13) : (tensor<i32>) -> tensor<1xi32>
    %c_14 = stablehlo.constant dense<1> : tensor<i32>
    %33 = call @_take_79(%c_14) : (tensor<i32>) -> tensor<1xi32>
    %c_15 = stablehlo.constant dense<2> : tensor<i32>
    %34 = call @_take_79(%c_15) : (tensor<i32>) -> tensor<1xi32>
    %35:3 = sdy.manual_computation(%c_1, %arg55, %arg56) in_shardings=[<@mesh, [{}]>, <@mesh, [{"replica", "data"}, {}]>, <@mesh, [{"replica", "data"}, {}]>] out_shardings=[<@mesh, [{"replica", "data", "model"}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}]>] manual_axes={"replica", "data", "model"} (%arg57: tensor<1024xi32>, %arg58: tensor<8x1024xi32>, %arg59: tensor<8x1024xi32>) {
      %913:3 = func.call @_splash_attention(%arg57, %arg58, %arg59) : (tensor<1024xi32>, tensor<8x1024xi32>, tensor<8x1024xi32>) -> (tensor<8x1024x128xi32>, tensor<8x8x1024xi32>, tensor<1024x128xi32>)
      sdy.return %913#0, %913#1, %913#2 : tensor<8x1024x128xi32>, tensor<8x8x1024xi32>, tensor<1024x128xi32>
    } : (tensor<1024xi32>, tensor<32x1024xi32>, tensor<32x1024xi32>) -> (tensor<32x1024x128xi32>, tensor<32x8x1024xi32>, tensor<4096x128xi32>)
    %cst_16 = stablehlo.constant dense<8.000000e-01> : tensor<f32>
    %36 = stablehlo.broadcast_in_dim %cst_16, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %37 = stablehlo.convert %36 : tensor<32x1024x768xf32>
    %38:2 = call @_bernoulli_88() : () -> (tensor<1x1x1xf32>, tensor<1x1x1xf32>)
    %39 = call @_where_90(%c_13) : (tensor<i32>) -> tensor<32x1024x768xbf16>
    %40:3 = call @_var(%c_13) : (tensor<i32>) -> (tensor<f32>, tensor<i1>, tensor<32x1024xbf16>)
    %cst_17 = stablehlo.constant dense<8.000000e-01> : tensor<f32>
    %41 = stablehlo.broadcast_in_dim %cst_17, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %42 = stablehlo.convert %41 : tensor<32x1024x768xf32>
    %43:2 = call @_bernoulli_88() : () -> (tensor<1x1x1xf32>, tensor<1x1x1xf32>)
    %44 = call @_where_90(%c_13) : (tensor<i32>) -> tensor<32x1024x768xbf16>
    %cst_18 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %45 = stablehlo.broadcast_in_dim %cst_18, dims = [] : (tensor<bf16>) -> tensor<12x32x1024x768xbf16>
    %c_19 = stablehlo.constant dense<0> : tensor<i32>
    %46:38 = stablehlo.while(%iterArg = %arg1, %iterArg_230 = %arg2, %iterArg_231 = %arg3, %iterArg_232 = %arg4, %iterArg_233 = %arg5, %iterArg_234 = %arg6, %iterArg_235 = %arg7, %iterArg_236 = %arg8, %iterArg_237 = %arg9, %iterArg_238 = %arg10, %iterArg_239 = %arg11, %iterArg_240 = %arg12, %iterArg_241 = %30, %iterArg_242 = %43#0, %iterArg_243 = %43#1, %iterArg_244 = %42, %iterArg_245 = %38#0, %iterArg_246 = %38#1, %iterArg_247 = %37, %iterArg_248 = %c, %iterArg_249 = %c_0, %iterArg_250 = %35#0, %iterArg_251 = %35#1, %iterArg_252 = %35#2, %iterArg_253 = %31#0, %iterArg_254 = %31#1, %iterArg_255 = %31#2, %iterArg_256 = %32, %iterArg_257 = %33, %iterArg_258 = %34, %iterArg_259 = %39, %iterArg_260 = %40#0, %iterArg_261 = %40#1, %iterArg_262 = %40#2, %iterArg_263 = %44, %iterArg_264 = %c_19, %iterArg_265 = %29, %iterArg_266 = %45) : tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x768xbf16>, tensor<12x2xui32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<32x1024x128xi32>, tensor<32x8x1024xi32>, tensor<4096x128xi32>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>, tensor<32x1024x768xbf16>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>, tensor<32x1024x768xbf16>, tensor<i32>, tensor<32x1024x768xbf16>, tensor<12x32x1024x768xbf16>
    cond {
      %c_267 = stablehlo.constant dense<12> : tensor<i32>
      %913 = stablehlo.compare  LT, %iterArg_264, %c_267,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
      stablehlo.return %913 : tensor<i1>
    } do {
      %c_267 = stablehlo.constant dense<0> : tensor<i32>
      %913 = stablehlo.dynamic_slice %iterArg, %iterArg_264, %c_267, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %914 = stablehlo.reshape %913 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_268 = stablehlo.constant dense<0> : tensor<i32>
      %915 = stablehlo.dynamic_slice %iterArg_230, %iterArg_264, %c_268, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %916 = stablehlo.reshape %915 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_269 = stablehlo.constant dense<0> : tensor<i32>
      %c_270 = stablehlo.constant dense<0> : tensor<i32>
      %c_271 = stablehlo.constant dense<0> : tensor<i32>
      %c_272 = stablehlo.constant dense<0> : tensor<i32>
      %917 = stablehlo.dynamic_slice %iterArg_231, %iterArg_264, %c_269, %c_270, %c_271, %c_272, sizes = [1, 768, 3, 12, 64] : (tensor<12x768x3x12x64xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x768x3x12x64xbf16>
      %918 = stablehlo.reshape %917 : (tensor<1x768x3x12x64xbf16>) -> tensor<768x3x12x64xbf16>
      %c_273 = stablehlo.constant dense<0> : tensor<i32>
      %c_274 = stablehlo.constant dense<0> : tensor<i32>
      %c_275 = stablehlo.constant dense<0> : tensor<i32>
      %919 = stablehlo.dynamic_slice %iterArg_232, %iterArg_264, %c_273, %c_274, %c_275, sizes = [1, 3, 12, 64] : (tensor<12x3x12x64xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x3x12x64xbf16>
      %920 = stablehlo.reshape %919 : (tensor<1x3x12x64xbf16>) -> tensor<3x12x64xbf16>
      %c_276 = stablehlo.constant dense<0> : tensor<i32>
      %c_277 = stablehlo.constant dense<0> : tensor<i32>
      %c_278 = stablehlo.constant dense<0> : tensor<i32>
      %921 = stablehlo.dynamic_slice %iterArg_233, %iterArg_264, %c_276, %c_277, %c_278, sizes = [1, 12, 64, 768] : (tensor<12x12x64x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x12x64x768xbf16>
      %922 = stablehlo.reshape %921 : (tensor<1x12x64x768xbf16>) -> tensor<12x64x768xbf16>
      %c_279 = stablehlo.constant dense<0> : tensor<i32>
      %923 = stablehlo.dynamic_slice %iterArg_234, %iterArg_264, %c_279, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %924 = stablehlo.reshape %923 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_280 = stablehlo.constant dense<0> : tensor<i32>
      %925 = stablehlo.dynamic_slice %iterArg_235, %iterArg_264, %c_280, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %926 = stablehlo.reshape %925 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_281 = stablehlo.constant dense<0> : tensor<i32>
      %927 = stablehlo.dynamic_slice %iterArg_236, %iterArg_264, %c_281, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %928 = stablehlo.reshape %927 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_282 = stablehlo.constant dense<0> : tensor<i32>
      %c_283 = stablehlo.constant dense<0> : tensor<i32>
      %929 = stablehlo.dynamic_slice %iterArg_237, %iterArg_264, %c_282, %c_283, sizes = [1, 768, 3072] : (tensor<12x768x3072xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x768x3072xbf16>
      %930 = stablehlo.reshape %929 : (tensor<1x768x3072xbf16>) -> tensor<768x3072xbf16>
      %c_284 = stablehlo.constant dense<0> : tensor<i32>
      %931 = stablehlo.dynamic_slice %iterArg_238, %iterArg_264, %c_284, sizes = [1, 3072] : (tensor<12x3072xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x3072xbf16>
      %932 = stablehlo.reshape %931 : (tensor<1x3072xbf16>) -> tensor<3072xbf16>
      %c_285 = stablehlo.constant dense<0> : tensor<i32>
      %c_286 = stablehlo.constant dense<0> : tensor<i32>
      %933 = stablehlo.dynamic_slice %iterArg_239, %iterArg_264, %c_285, %c_286, sizes = [1, 3072, 768] : (tensor<12x3072x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x3072x768xbf16>
      %934 = stablehlo.reshape %933 : (tensor<1x3072x768xbf16>) -> tensor<3072x768xbf16>
      %c_287 = stablehlo.constant dense<0> : tensor<i32>
      %935 = stablehlo.dynamic_slice %iterArg_240, %iterArg_264, %c_287, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %936 = stablehlo.reshape %935 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_288 = stablehlo.constant dense<0> : tensor<i32>
      %937 = stablehlo.dynamic_slice %iterArg_241, %iterArg_264, %c_288, sizes = [1, 2] : (tensor<12x2xui32>, tensor<i32>, tensor<i32>) -> tensor<1x2xui32>
      %938 = stablehlo.reshape %937 : (tensor<1x2xui32>) -> tensor<2xui32>
      %939:2 = func.call @closed_call(%iterArg_242, %iterArg_243, %iterArg_244, %iterArg_245, %iterArg_246, %iterArg_247, %iterArg_248, %iterArg_249, %iterArg_250, %iterArg_251, %iterArg_252, %iterArg_253, %iterArg_254, %iterArg_255, %iterArg_256, %iterArg_257, %iterArg_258, %iterArg_259, %iterArg_260, %iterArg_261, %iterArg_262, %iterArg_263, %iterArg_265, %914, %916, %918, %920, %922, %924, %926, %928, %930, %932, %934, %936, %938) : (tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<32x1024x128xi32>, tensor<32x8x1024xi32>, tensor<4096x128xi32>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>, tensor<32x1024x768xbf16>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>, tensor<32x1024x768xbf16>, tensor<32x1024x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3x12x64xbf16>, tensor<3x12x64xbf16>, tensor<12x64x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3072xbf16>, tensor<3072xbf16>, tensor<3072x768xbf16>, tensor<768xbf16>, tensor<2xui32>) -> (tensor<32x1024x768xbf16>, tensor<32x1024x768xbf16>)
      %940 = stablehlo.broadcast_in_dim %939#1, dims = [1, 2, 3] : (tensor<32x1024x768xbf16>) -> tensor<1x32x1024x768xbf16>
      %c_289 = stablehlo.constant dense<0> : tensor<i32>
      %c_290 = stablehlo.constant dense<0> : tensor<i32>
      %c_291 = stablehlo.constant dense<0> : tensor<i32>
      %941 = stablehlo.dynamic_update_slice %iterArg_266, %940, %iterArg_264, %c_289, %c_290, %c_291 : (tensor<12x32x1024x768xbf16>, tensor<1x32x1024x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<12x32x1024x768xbf16>
      %c_292 = stablehlo.constant dense<1> : tensor<i32>
      %942 = stablehlo.add %iterArg_264, %c_292 : tensor<i32>
      stablehlo.return %iterArg, %iterArg_230, %iterArg_231, %iterArg_232, %iterArg_233, %iterArg_234, %iterArg_235, %iterArg_236, %iterArg_237, %iterArg_238, %iterArg_239, %iterArg_240, %iterArg_241, %iterArg_242, %iterArg_243, %iterArg_244, %iterArg_245, %iterArg_246, %iterArg_247, %iterArg_248, %iterArg_249, %iterArg_250, %iterArg_251, %iterArg_252, %iterArg_253, %iterArg_254, %iterArg_255, %iterArg_256, %iterArg_257, %iterArg_258, %iterArg_259, %iterArg_260, %iterArg_261, %iterArg_262, %iterArg_263, %942, %939#0, %941 : tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x768xbf16>, tensor<12x2xui32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<32x1024x128xi32>, tensor<32x8x1024xi32>, tensor<4096x128xi32>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>, tensor<1xi32>, tensor<1xi32>, tensor<1xi32>, tensor<32x1024x768xbf16>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>, tensor<32x1024x768xbf16>, tensor<i32>, tensor<32x1024x768xbf16>, tensor<12x32x1024x768xbf16>
    }
    %47 = stablehlo.convert %46#36 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst_20 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %48 = stablehlo.reduce(%47 init: %cst_20) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %cst_21 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %49 = stablehlo.broadcast_in_dim %cst_21, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %50 = stablehlo.divide %48, %49 : tensor<32x1024xf32>
    %51 = stablehlo.convert %50 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %52:4 = call @_var_185(%46#36, %c_13) : (tensor<32x1024x768xbf16>, tensor<i32>) -> (tensor<32x1024xbf16>, tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>)
    %cst_22 = stablehlo.constant dense<1.001360e-05> : tensor<bf16>
    %53 = stablehlo.broadcast_in_dim %cst_22, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %54 = stablehlo.add %52#0, %53 : tensor<32x1024xbf16>
    %55 = stablehlo.rsqrt %54 : tensor<32x1024xbf16>
    %56 = stablehlo.divide %55, %54 : tensor<32x1024xbf16>
    %cst_23 = stablehlo.constant dense<-5.000000e-01> : tensor<bf16>
    %57 = stablehlo.broadcast_in_dim %cst_23, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %58 = stablehlo.multiply %57, %56 : tensor<32x1024xbf16>
    %59 = stablehlo.broadcast_in_dim %51, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %60 = stablehlo.transpose %59, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %61 = stablehlo.subtract %46#36, %60 : tensor<32x1024x768xbf16>
    %62 = stablehlo.broadcast_in_dim %55, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %63 = stablehlo.transpose %62, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %64 = stablehlo.multiply %61, %63 : tensor<32x1024x768xbf16>
    %65 = stablehlo.broadcast_in_dim %arg13, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %66 = stablehlo.multiply %65, %64 : tensor<32x1024x768xbf16>
    %67 = stablehlo.broadcast_in_dim %arg14, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %68 = stablehlo.add %66, %67 : tensor<32x1024x768xbf16>
    %69 = stablehlo.dot_general %68, %arg15, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<50257x768xbf16>) -> tensor<32x1024x50257xbf16>
    %70 = sdy.sharding_constraint %69 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x50257xbf16>
    %71 = stablehlo.convert %70 : (tensor<32x1024x50257xbf16>) -> tensor<32x1024x50257xf32>
    %72 = call @_roll_static(%arg53) : (tensor<32x1024xi32>) -> tensor<32x1024xi32>
    %73 = call @_one_hot(%72) : (tensor<32x1024xi32>) -> tensor<32x1024x50257xf32>
    %cst_24 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %74 = stablehlo.broadcast_in_dim %cst_24, dims = [] : (tensor<f32>) -> tensor<1024xf32>
    %c_25 = stablehlo.constant dense<-1> : tensor<i32>
    %75 = stablehlo.compare  LT, %c_25, %c_13,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %c_26 = stablehlo.constant dense<-1> : tensor<i32>
    %c_27 = stablehlo.constant dense<1024> : tensor<i32>
    %76 = stablehlo.add %c_26, %c_27 : tensor<i32>
    %c_28 = stablehlo.constant dense<-1> : tensor<i32>
    %77 = stablehlo.select %75, %76, %c_28 : tensor<i1>, tensor<i32>
    %78 = stablehlo.convert %77 : tensor<i32>
    %79 = stablehlo.broadcast_in_dim %78, dims = [] : (tensor<i32>) -> tensor<1xi32>
    %cst_29 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %80 = "stablehlo.scatter"(%74, %79, %cst_29) <{indices_are_sorted = true, scatter_dimension_numbers = #stablehlo.scatter<inserted_window_dims = [0], scatter_dims_to_operand_dims = [0]>, unique_indices = true}> ({
    ^bb0(%arg57: tensor<f32>, %arg58: tensor<f32>):
      stablehlo.return %arg58 : tensor<f32>
    }) : (tensor<1024xf32>, tensor<1xi32>, tensor<f32>) -> tensor<1024xf32>
    %81 = sdy.sharding_constraint %80 <@mesh, [{}]> : tensor<1024xf32>
    %cst_30 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %82 = stablehlo.broadcast_in_dim %cst_30, dims = [] : (tensor<f32>) -> tensor<1024xf32>
    %83 = stablehlo.subtract %82, %81 : tensor<1024xf32>
    %84 = stablehlo.broadcast_in_dim %83, dims = [1] : (tensor<1024xf32>) -> tensor<32x1024xf32>
    %85 = stablehlo.convert %arg54 : (tensor<32x1024xi32>) -> tensor<32x1024xf32>
    %86 = stablehlo.multiply %85, %84 : tensor<32x1024xf32>
    %cst_31 = stablehlo.constant dense<0xFF800000> : tensor<f32>
    %87 = stablehlo.reduce(%71 init: %cst_31) applies stablehlo.maximum across dimensions = [2] : (tensor<32x1024x50257xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %cst_32 = stablehlo.constant dense<0xFF800000> : tensor<f32>
    %88 = stablehlo.broadcast_in_dim %cst_32, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %89 = stablehlo.maximum %88, %87 : tensor<32x1024xf32>
    %90 = stablehlo.is_finite %89 : (tensor<32x1024xf32>) -> tensor<32x1024xi1>
    %cst_33 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %91 = stablehlo.broadcast_in_dim %cst_33, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %92 = stablehlo.select %90, %89, %91 : tensor<32x1024xi1>, tensor<32x1024xf32>
    %93 = stablehlo.broadcast_in_dim %92, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x1xf32>
    %94 = stablehlo.broadcast_in_dim %93, dims = [0, 1, 2] : (tensor<32x1024x1xf32>) -> tensor<32x1024x50257xf32>
    %95 = stablehlo.subtract %71, %94 : tensor<32x1024x50257xf32>
    %96 = stablehlo.exponential %95 : tensor<32x1024x50257xf32>
    %cst_34 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %97 = stablehlo.reduce(%96 init: %cst_34) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x50257xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %98 = stablehlo.abs %97 : tensor<32x1024xf32>
    %cst_35 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %99 = stablehlo.broadcast_in_dim %cst_35, dims = [] : (tensor<f32>) -> tensor<f32>
    %100 = stablehlo.broadcast_in_dim %99, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %101 = stablehlo.compare  GE, %97, %100,  FLOAT : (tensor<32x1024xf32>, tensor<32x1024xf32>) -> tensor<32x1024xi1>
    %102 = stablehlo.log %98 : tensor<32x1024xf32>
    %103 = stablehlo.add %102, %92 : tensor<32x1024xf32>
    %104 = stablehlo.broadcast_in_dim %103, dims = [1, 2] : (tensor<32x1024xf32>) -> tensor<50257x32x1024xf32>
    %105 = stablehlo.transpose %104, dims = [1, 2, 0] : (tensor<50257x32x1024xf32>) -> tensor<32x1024x50257xf32>
    %106 = stablehlo.subtract %105, %71 : tensor<32x1024x50257xf32>
    %107 = stablehlo.dot_general %73, %106, batching_dims = [0, 1] x [0, 1], contracting_dims = [2] x [2], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x50257xf32>, tensor<32x1024x50257xf32>) -> tensor<32x1024xf32>
    %108 = sdy.sharding_constraint %107 <@mesh, [{"replica", "data"}, {}]> : tensor<32x1024xf32>
    %cst_36 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %109 = stablehlo.broadcast_in_dim %cst_36, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %110 = stablehlo.compare  NE, %86, %109,  FLOAT : (tensor<32x1024xf32>, tensor<32x1024xf32>) -> tensor<32x1024xi1>
    %111 = stablehlo.convert %110 : tensor<32x1024xi1>
    %112 = stablehlo.convert %111 : (tensor<32x1024xi1>) -> tensor<32x1024xi32>
    %113 = stablehlo.convert %112 : (tensor<32x1024xi32>) -> tensor<32x1024xf32>
    %cst_37 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %114 = stablehlo.reduce(%113 init: %cst_37) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024xf32>, tensor<f32>) -> tensor<f32>
    %cst_38 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %115 = call @_where_222(%111, %108, %cst_38) : (tensor<32x1024xi1>, tensor<32x1024xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %cst_39 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %116 = stablehlo.reduce(%115 init: %cst_39) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024xf32>, tensor<f32>) -> tensor<f32>
    %117 = stablehlo.divide %116, %114 : tensor<f32>
    %cst_40 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %118 = stablehlo.add %117, %cst_40 : tensor<f32>
    %cst_41 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %119 = stablehlo.reduce(%118 init: %cst_41) applies stablehlo.add across dimensions = [] : (tensor<f32>, tensor<f32>) -> tensor<f32>
    %cst_42 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %120 = stablehlo.divide %119, %cst_42 : tensor<f32>
    %cst_43 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %121 = stablehlo.broadcast_in_dim %cst_43, dims = [] : (tensor<f32>) -> tensor<f32>
    %cst_44 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %122 = stablehlo.divide %121, %cst_44 : tensor<f32>
    %123 = stablehlo.divide %122, %114 : tensor<f32>
    %124 = stablehlo.broadcast_in_dim %123, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %125 = call @_where_228(%111, %124) : (tensor<32x1024xi1>, tensor<32x1024xf32>) -> tensor<32x1024xf32>
    %126 = sdy.sharding_constraint %125 <@mesh, [{"replica", "data"}, {}]> : tensor<32x1024xf32>
    %127 = stablehlo.dot_general %126, %73, batching_dims = [0, 1] x [0, 1], contracting_dims = [] x [], precision = [DEFAULT, DEFAULT] : (tensor<32x1024xf32>, tensor<32x1024x50257xf32>) -> tensor<32x1024x50257xf32>
    %128 = stablehlo.negate %127 : tensor<32x1024x50257xf32>
    %129 = stablehlo.transpose %127, dims = [2, 0, 1] : (tensor<32x1024x50257xf32>) -> tensor<50257x32x1024xf32>
    %cst_45 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %130 = stablehlo.reduce(%129 init: %cst_45) applies stablehlo.add across dimensions = [0] : (tensor<50257x32x1024xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %131 = stablehlo.divide %130, %98 : tensor<32x1024xf32>
    %cst_46 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %132 = stablehlo.broadcast_in_dim %cst_46, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %133 = stablehlo.select %101, %132, %131 : tensor<32x1024xi1>, tensor<32x1024xf32>
    %134 = stablehlo.select %101, %131, %132 : tensor<32x1024xi1>, tensor<32x1024xf32>
    %135 = stablehlo.negate %133 : tensor<32x1024xf32>
    %136 = stablehlo.add %134, %135 : tensor<32x1024xf32>
    %137 = stablehlo.broadcast_in_dim %136, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x50257xf32>
    %138 = stablehlo.multiply %137, %96 : tensor<32x1024x50257xf32>
    %139 = stablehlo.add %128, %138 : tensor<32x1024x50257xf32>
    %140 = stablehlo.convert %139 : (tensor<32x1024x50257xf32>) -> tensor<32x1024x50257xbf16>
    %141 = sdy.sharding_constraint %140 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x50257xbf16>
    %142 = stablehlo.dot_general %141, %68, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x50257xbf16>, tensor<32x1024x768xbf16>) -> tensor<50257x768xbf16>
    %143 = stablehlo.dot_general %141, %arg15, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x50257xbf16>, tensor<50257x768xbf16>) -> tensor<32x1024x768xbf16>
    %cst_47 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %144 = stablehlo.reduce(%143 init: %cst_47) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %145 = stablehlo.multiply %65, %143 : tensor<32x1024x768xbf16>
    %146 = stablehlo.multiply %143, %64 : tensor<32x1024x768xbf16>
    %cst_48 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %147 = stablehlo.reduce(%146 init: %cst_48) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %148 = stablehlo.multiply %61, %145 : tensor<32x1024x768xbf16>
    %149 = stablehlo.multiply %145, %63 : tensor<32x1024x768xbf16>
    %150 = stablehlo.transpose %148, dims = [2, 0, 1] : (tensor<32x1024x768xbf16>) -> tensor<768x32x1024xbf16>
    %cst_49 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %151 = stablehlo.reduce(%150 init: %cst_49) applies stablehlo.add across dimensions = [0] : (tensor<768x32x1024xbf16>, tensor<bf16>) -> tensor<32x1024xbf16>
    %152 = stablehlo.negate %149 : tensor<32x1024x768xbf16>
    %153 = stablehlo.transpose %152, dims = [2, 0, 1] : (tensor<32x1024x768xbf16>) -> tensor<768x32x1024xbf16>
    %cst_50 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %154 = stablehlo.reduce(%153 init: %cst_50) applies stablehlo.add across dimensions = [0] : (tensor<768x32x1024xbf16>, tensor<bf16>) -> tensor<32x1024xbf16>
    %155 = stablehlo.multiply %151, %58 : tensor<32x1024xbf16>
    %156 = call @_var_245(%52#1, %52#2, %52#3, %155) : (tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %157 = stablehlo.add %149, %156 : tensor<32x1024x768xbf16>
    %158 = stablehlo.convert %154 : (tensor<32x1024xbf16>) -> tensor<32x1024xf32>
    %cst_51 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %159 = stablehlo.broadcast_in_dim %cst_51, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %160 = stablehlo.divide %158, %159 : tensor<32x1024xf32>
    %161 = stablehlo.broadcast_in_dim %160, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x768xf32>
    %162 = stablehlo.convert %161 : (tensor<32x1024x768xf32>) -> tensor<32x1024x768xbf16>
    %163 = stablehlo.add %157, %162 : tensor<32x1024x768xbf16>
    %cst_52 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %164 = stablehlo.broadcast_in_dim %cst_52, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %cst_53 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %165 = stablehlo.broadcast_in_dim %cst_53, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %cst_54 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %166 = stablehlo.broadcast_in_dim %cst_54, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %cst_55 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %167 = stablehlo.broadcast_in_dim %cst_55, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %cst_56 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %168 = stablehlo.broadcast_in_dim %cst_56, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %cst_57 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %169 = stablehlo.broadcast_in_dim %cst_57, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %cst_58 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %170 = stablehlo.broadcast_in_dim %cst_58, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %cst_59 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %171 = stablehlo.broadcast_in_dim %cst_59, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %cst_60 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %172 = stablehlo.broadcast_in_dim %cst_60, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %cst_61 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %173 = stablehlo.broadcast_in_dim %cst_61, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %cst_62 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %174 = stablehlo.broadcast_in_dim %cst_62, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %cst_63 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %175 = stablehlo.broadcast_in_dim %cst_63, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %c_64 = stablehlo.constant dense<0> : tensor<i32>
    %176:38 = stablehlo.while(%iterArg = %46#37, %iterArg_230 = %arg1, %iterArg_231 = %arg2, %iterArg_232 = %arg3, %iterArg_233 = %arg4, %iterArg_234 = %arg5, %iterArg_235 = %arg6, %iterArg_236 = %arg7, %iterArg_237 = %arg8, %iterArg_238 = %arg9, %iterArg_239 = %arg10, %iterArg_240 = %arg11, %iterArg_241 = %30, %iterArg_242 = %arg55, %iterArg_243 = %arg56, %iterArg_244 = %c, %iterArg_245 = %c_0, %iterArg_246 = %c_1, %iterArg_247 = %c_2, %iterArg_248 = %c_3, %iterArg_249 = %c_4, %iterArg_250 = %c_5, %iterArg_251 = %c_6, %iterArg_252 = %c_7, %iterArg_253 = %c_64, %iterArg_254 = %163, %iterArg_255 = %164, %iterArg_256 = %165, %iterArg_257 = %166, %iterArg_258 = %167, %iterArg_259 = %168, %iterArg_260 = %169, %iterArg_261 = %170, %iterArg_262 = %171, %iterArg_263 = %172, %iterArg_264 = %173, %iterArg_265 = %174, %iterArg_266 = %175) : tensor<12x32x1024x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x2xui32>, tensor<32x1024xi32>, tensor<32x1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<i32>, tensor<32x1024x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x768xbf16>
    cond {
      %c_267 = stablehlo.constant dense<12> : tensor<i32>
      %913 = stablehlo.compare  LT, %iterArg_253, %c_267,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
      stablehlo.return %913 : tensor<i1>
    } do {
      %c_267 = stablehlo.constant dense<12> : tensor<i32>
      %913 = stablehlo.subtract %c_267, %iterArg_253 : tensor<i32>
      %c_268 = stablehlo.constant dense<1> : tensor<i32>
      %914 = stablehlo.subtract %913, %c_268 : tensor<i32>
      %c_269 = stablehlo.constant dense<0> : tensor<i32>
      %c_270 = stablehlo.constant dense<0> : tensor<i32>
      %c_271 = stablehlo.constant dense<0> : tensor<i32>
      %915 = stablehlo.dynamic_slice %iterArg, %914, %c_269, %c_270, %c_271, sizes = [1, 32, 1024, 768] : (tensor<12x32x1024x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x32x1024x768xbf16>
      %916 = stablehlo.reshape %915 : (tensor<1x32x1024x768xbf16>) -> tensor<32x1024x768xbf16>
      %c_272 = stablehlo.constant dense<0> : tensor<i32>
      %917 = stablehlo.dynamic_slice %iterArg_230, %914, %c_272, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %918 = stablehlo.reshape %917 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_273 = stablehlo.constant dense<0> : tensor<i32>
      %919 = stablehlo.dynamic_slice %iterArg_231, %914, %c_273, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %920 = stablehlo.reshape %919 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_274 = stablehlo.constant dense<0> : tensor<i32>
      %c_275 = stablehlo.constant dense<0> : tensor<i32>
      %c_276 = stablehlo.constant dense<0> : tensor<i32>
      %c_277 = stablehlo.constant dense<0> : tensor<i32>
      %921 = stablehlo.dynamic_slice %iterArg_232, %914, %c_274, %c_275, %c_276, %c_277, sizes = [1, 768, 3, 12, 64] : (tensor<12x768x3x12x64xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x768x3x12x64xbf16>
      %922 = stablehlo.reshape %921 : (tensor<1x768x3x12x64xbf16>) -> tensor<768x3x12x64xbf16>
      %c_278 = stablehlo.constant dense<0> : tensor<i32>
      %c_279 = stablehlo.constant dense<0> : tensor<i32>
      %c_280 = stablehlo.constant dense<0> : tensor<i32>
      %923 = stablehlo.dynamic_slice %iterArg_233, %914, %c_278, %c_279, %c_280, sizes = [1, 3, 12, 64] : (tensor<12x3x12x64xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x3x12x64xbf16>
      %924 = stablehlo.reshape %923 : (tensor<1x3x12x64xbf16>) -> tensor<3x12x64xbf16>
      %c_281 = stablehlo.constant dense<0> : tensor<i32>
      %c_282 = stablehlo.constant dense<0> : tensor<i32>
      %c_283 = stablehlo.constant dense<0> : tensor<i32>
      %925 = stablehlo.dynamic_slice %iterArg_234, %914, %c_281, %c_282, %c_283, sizes = [1, 12, 64, 768] : (tensor<12x12x64x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x12x64x768xbf16>
      %926 = stablehlo.reshape %925 : (tensor<1x12x64x768xbf16>) -> tensor<12x64x768xbf16>
      %c_284 = stablehlo.constant dense<0> : tensor<i32>
      %927 = stablehlo.dynamic_slice %iterArg_235, %914, %c_284, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %928 = stablehlo.reshape %927 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_285 = stablehlo.constant dense<0> : tensor<i32>
      %929 = stablehlo.dynamic_slice %iterArg_236, %914, %c_285, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %930 = stablehlo.reshape %929 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_286 = stablehlo.constant dense<0> : tensor<i32>
      %931 = stablehlo.dynamic_slice %iterArg_237, %914, %c_286, sizes = [1, 768] : (tensor<12x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x768xbf16>
      %932 = stablehlo.reshape %931 : (tensor<1x768xbf16>) -> tensor<768xbf16>
      %c_287 = stablehlo.constant dense<0> : tensor<i32>
      %c_288 = stablehlo.constant dense<0> : tensor<i32>
      %933 = stablehlo.dynamic_slice %iterArg_238, %914, %c_287, %c_288, sizes = [1, 768, 3072] : (tensor<12x768x3072xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x768x3072xbf16>
      %934 = stablehlo.reshape %933 : (tensor<1x768x3072xbf16>) -> tensor<768x3072xbf16>
      %c_289 = stablehlo.constant dense<0> : tensor<i32>
      %935 = stablehlo.dynamic_slice %iterArg_239, %914, %c_289, sizes = [1, 3072] : (tensor<12x3072xbf16>, tensor<i32>, tensor<i32>) -> tensor<1x3072xbf16>
      %936 = stablehlo.reshape %935 : (tensor<1x3072xbf16>) -> tensor<3072xbf16>
      %c_290 = stablehlo.constant dense<0> : tensor<i32>
      %c_291 = stablehlo.constant dense<0> : tensor<i32>
      %937 = stablehlo.dynamic_slice %iterArg_240, %914, %c_290, %c_291, sizes = [1, 3072, 768] : (tensor<12x3072x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<1x3072x768xbf16>
      %938 = stablehlo.reshape %937 : (tensor<1x3072x768xbf16>) -> tensor<3072x768xbf16>
      %c_292 = stablehlo.constant dense<0> : tensor<i32>
      %939 = stablehlo.dynamic_slice %iterArg_241, %914, %c_292, sizes = [1, 2] : (tensor<12x2xui32>, tensor<i32>, tensor<i32>) -> tensor<1x2xui32>
      %940 = stablehlo.reshape %939 : (tensor<1x2xui32>) -> tensor<2xui32>
      %941:13 = func.call @closed_call_277(%iterArg_242, %iterArg_243, %iterArg_244, %iterArg_245, %iterArg_246, %iterArg_247, %iterArg_248, %iterArg_249, %iterArg_250, %iterArg_251, %iterArg_252, %iterArg_254, %916, %918, %920, %922, %924, %926, %928, %930, %932, %934, %936, %938, %940) : (tensor<32x1024xi32>, tensor<32x1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<32x1024x768xbf16>, tensor<32x1024x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3x12x64xbf16>, tensor<3x12x64xbf16>, tensor<12x64x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3072xbf16>, tensor<3072xbf16>, tensor<3072x768xbf16>, tensor<2xui32>) -> (tensor<32x1024x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3x12x64xbf16>, tensor<3x12x64xbf16>, tensor<12x64x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3072xbf16>, tensor<3072xbf16>, tensor<3072x768xbf16>, tensor<768xbf16>)
      %942 = stablehlo.broadcast_in_dim %941#1, dims = [1] : (tensor<768xbf16>) -> tensor<1x768xbf16>
      %c_293 = stablehlo.constant dense<0> : tensor<i32>
      %943 = stablehlo.dynamic_update_slice %iterArg_255, %942, %914, %c_293 : (tensor<12x768xbf16>, tensor<1x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<12x768xbf16>
      %944 = stablehlo.broadcast_in_dim %941#2, dims = [1] : (tensor<768xbf16>) -> tensor<1x768xbf16>
      %c_294 = stablehlo.constant dense<0> : tensor<i32>
      %945 = stablehlo.dynamic_update_slice %iterArg_256, %944, %914, %c_294 : (tensor<12x768xbf16>, tensor<1x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<12x768xbf16>
      %946 = stablehlo.broadcast_in_dim %941#3, dims = [1, 2, 3, 4] : (tensor<768x3x12x64xbf16>) -> tensor<1x768x3x12x64xbf16>
      %c_295 = stablehlo.constant dense<0> : tensor<i32>
      %c_296 = stablehlo.constant dense<0> : tensor<i32>
      %c_297 = stablehlo.constant dense<0> : tensor<i32>
      %c_298 = stablehlo.constant dense<0> : tensor<i32>
      %947 = stablehlo.dynamic_update_slice %iterArg_257, %946, %914, %c_295, %c_296, %c_297, %c_298 : (tensor<12x768x3x12x64xbf16>, tensor<1x768x3x12x64xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<12x768x3x12x64xbf16>
      %948 = stablehlo.broadcast_in_dim %941#4, dims = [1, 2, 3] : (tensor<3x12x64xbf16>) -> tensor<1x3x12x64xbf16>
      %c_299 = stablehlo.constant dense<0> : tensor<i32>
      %c_300 = stablehlo.constant dense<0> : tensor<i32>
      %c_301 = stablehlo.constant dense<0> : tensor<i32>
      %949 = stablehlo.dynamic_update_slice %iterArg_258, %948, %914, %c_299, %c_300, %c_301 : (tensor<12x3x12x64xbf16>, tensor<1x3x12x64xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<12x3x12x64xbf16>
      %950 = stablehlo.broadcast_in_dim %941#5, dims = [1, 2, 3] : (tensor<12x64x768xbf16>) -> tensor<1x12x64x768xbf16>
      %c_302 = stablehlo.constant dense<0> : tensor<i32>
      %c_303 = stablehlo.constant dense<0> : tensor<i32>
      %c_304 = stablehlo.constant dense<0> : tensor<i32>
      %951 = stablehlo.dynamic_update_slice %iterArg_259, %950, %914, %c_302, %c_303, %c_304 : (tensor<12x12x64x768xbf16>, tensor<1x12x64x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<12x12x64x768xbf16>
      %952 = stablehlo.broadcast_in_dim %941#6, dims = [1] : (tensor<768xbf16>) -> tensor<1x768xbf16>
      %c_305 = stablehlo.constant dense<0> : tensor<i32>
      %953 = stablehlo.dynamic_update_slice %iterArg_260, %952, %914, %c_305 : (tensor<12x768xbf16>, tensor<1x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<12x768xbf16>
      %954 = stablehlo.broadcast_in_dim %941#7, dims = [1] : (tensor<768xbf16>) -> tensor<1x768xbf16>
      %c_306 = stablehlo.constant dense<0> : tensor<i32>
      %955 = stablehlo.dynamic_update_slice %iterArg_261, %954, %914, %c_306 : (tensor<12x768xbf16>, tensor<1x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<12x768xbf16>
      %956 = stablehlo.broadcast_in_dim %941#8, dims = [1] : (tensor<768xbf16>) -> tensor<1x768xbf16>
      %c_307 = stablehlo.constant dense<0> : tensor<i32>
      %957 = stablehlo.dynamic_update_slice %iterArg_262, %956, %914, %c_307 : (tensor<12x768xbf16>, tensor<1x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<12x768xbf16>
      %958 = stablehlo.broadcast_in_dim %941#9, dims = [1, 2] : (tensor<768x3072xbf16>) -> tensor<1x768x3072xbf16>
      %c_308 = stablehlo.constant dense<0> : tensor<i32>
      %c_309 = stablehlo.constant dense<0> : tensor<i32>
      %959 = stablehlo.dynamic_update_slice %iterArg_263, %958, %914, %c_308, %c_309 : (tensor<12x768x3072xbf16>, tensor<1x768x3072xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<12x768x3072xbf16>
      %960 = stablehlo.broadcast_in_dim %941#10, dims = [1] : (tensor<3072xbf16>) -> tensor<1x3072xbf16>
      %c_310 = stablehlo.constant dense<0> : tensor<i32>
      %961 = stablehlo.dynamic_update_slice %iterArg_264, %960, %914, %c_310 : (tensor<12x3072xbf16>, tensor<1x3072xbf16>, tensor<i32>, tensor<i32>) -> tensor<12x3072xbf16>
      %962 = stablehlo.broadcast_in_dim %941#11, dims = [1, 2] : (tensor<3072x768xbf16>) -> tensor<1x3072x768xbf16>
      %c_311 = stablehlo.constant dense<0> : tensor<i32>
      %c_312 = stablehlo.constant dense<0> : tensor<i32>
      %963 = stablehlo.dynamic_update_slice %iterArg_265, %962, %914, %c_311, %c_312 : (tensor<12x3072x768xbf16>, tensor<1x3072x768xbf16>, tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<12x3072x768xbf16>
      %964 = stablehlo.broadcast_in_dim %941#12, dims = [1] : (tensor<768xbf16>) -> tensor<1x768xbf16>
      %c_313 = stablehlo.constant dense<0> : tensor<i32>
      %965 = stablehlo.dynamic_update_slice %iterArg_266, %964, %914, %c_313 : (tensor<12x768xbf16>, tensor<1x768xbf16>, tensor<i32>, tensor<i32>) -> tensor<12x768xbf16>
      %966 = stablehlo.add %iterArg_253, %c_268 : tensor<i32>
      stablehlo.return %iterArg, %iterArg_230, %iterArg_231, %iterArg_232, %iterArg_233, %iterArg_234, %iterArg_235, %iterArg_236, %iterArg_237, %iterArg_238, %iterArg_239, %iterArg_240, %iterArg_241, %iterArg_242, %iterArg_243, %iterArg_244, %iterArg_245, %iterArg_246, %iterArg_247, %iterArg_248, %iterArg_249, %iterArg_250, %iterArg_251, %iterArg_252, %966, %941#0, %943, %945, %947, %949, %951, %953, %955, %957, %959, %961, %963, %965 : tensor<12x32x1024x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x2xui32>, tensor<32x1024xi32>, tensor<32x1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<i32>, tensor<32x1024x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x768xbf16>
    }
    %177 = call @_where_342(%26, %176#25) : (tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16>
    %cst_65 = stablehlo.constant dense<8.007810e-01> : tensor<bf16>
    %178 = stablehlo.broadcast_in_dim %cst_65, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %179 = stablehlo.divide %177, %178 : tensor<32x1024x768xbf16>
    %cst_66 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %180 = stablehlo.reduce(%179 init: %cst_66) applies stablehlo.add across dimensions = [0] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<1024x768xbf16>
    %cst_67 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %181 = stablehlo.broadcast_in_dim %cst_67, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %182 = stablehlo.multiply %180, %181 : tensor<1024x768xbf16>
    %183 = call @_take_344(%18#1, %182) : (tensor<1024x1xi32>, tensor<1024x768xbf16>) -> tensor<1024x768xbf16>
    %cst_68 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %184 = stablehlo.broadcast_in_dim %cst_68, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %185 = stablehlo.multiply %179, %184 : tensor<32x1024x768xbf16>
    %186 = call @_take_346(%15#1, %185) : (tensor<32x1024x1xi32>, tensor<32x1024x768xbf16>) -> tensor<50257x768xbf16>
    %187 = stablehlo.add %142, %186 : tensor<50257x768xbf16>
    %c_69 = stablehlo.constant dense<0> : tensor<i32>
    %188 = stablehlo.subtract %arg18, %c_69 : tensor<i32>
    %189 = call @clip(%188, %c_13, %c_14) : (tensor<i32>, tensor<i32>, tensor<i32>) -> tensor<i32>
    %190 = stablehlo.convert %189 : (tensor<i32>) -> tensor<f32>
    %cst_70 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %191 = stablehlo.divide %190, %cst_70 : tensor<f32>
    %cst_71 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %192 = stablehlo.subtract %cst_71, %191 : tensor<f32>
    %cst_72 = stablehlo.constant dense<-6.000000e-04> : tensor<f32>
    %193 = stablehlo.multiply %cst_72, %192 : tensor<f32>
    %cst_73 = stablehlo.constant dense<6.000000e-04> : tensor<f32>
    %194 = stablehlo.add %193, %cst_73 : tensor<f32>
    %c_74 = stablehlo.constant dense<1> : tensor<i32>
    %195 = stablehlo.compare  LT, %arg18, %c_74,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %c_75 = stablehlo.constant dense<1> : tensor<i32>
    %196 = stablehlo.subtract %arg18, %c_75 : tensor<i32>
    %197 = stablehlo.convert %196 : (tensor<i32>) -> tensor<f32>
    %cst_76 = stablehlo.constant dense<9.900000e+01> : tensor<f32>
    %198 = stablehlo.minimum %197, %cst_76 : tensor<f32>
    %cst_77 = stablehlo.constant dense<3.14159274> : tensor<f32>
    %199 = stablehlo.multiply %cst_77, %198 : tensor<f32>
    %200 = stablehlo.divide %199, %cst_76 : tensor<f32>
    %201 = stablehlo.cosine %200 : tensor<f32>
    %cst_78 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %202 = stablehlo.add %cst_78, %201 : tensor<f32>
    %cst_79 = stablehlo.constant dense<5.000000e-01> : tensor<f32>
    %203 = stablehlo.multiply %cst_79, %202 : tensor<f32>
    %cst_80 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %204 = stablehlo.power %203, %cst_80 : tensor<f32>
    %cst_81 = stablehlo.constant dense<0.899999976> : tensor<f32>
    %205 = stablehlo.multiply %cst_81, %204 : tensor<f32>
    %cst_82 = stablehlo.constant dense<1.000000e-01> : tensor<f32>
    %206 = stablehlo.add %205, %cst_82 : tensor<f32>
    %cst_83 = stablehlo.constant dense<6.000000e-04> : tensor<f32>
    %207 = stablehlo.multiply %cst_83, %206 : tensor<f32>
    %208 = call @_where_363(%195, %194, %207) : (tensor<i1>, tensor<f32>, tensor<f32>) -> tensor<f32>
    %209 = stablehlo.convert %208 : (tensor<f32>) -> tensor<bf16>
    %c_84 = stablehlo.constant dense<2147483647> : tensor<i32>
    %210 = stablehlo.compare  LT, %arg18, %c_84,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %c_85 = stablehlo.constant dense<1> : tensor<i32>
    %211 = stablehlo.add %arg18, %c_85 : tensor<i32>
    %c_86 = stablehlo.constant dense<2147483647> : tensor<i32>
    %212 = call @_where_368(%210, %211, %c_86) : (tensor<i1>, tensor<i32>, tensor<i32>) -> tensor<i32>
    %213 = stablehlo.negate %209 : tensor<bf16>
    %214 = stablehlo.multiply %176#26, %176#26 : tensor<12x768xbf16>
    %215 = stablehlo.convert %214 : (tensor<12x768xbf16>) -> tensor<12x768xf32>
    %cst_87 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %216 = stablehlo.reduce(%215 init: %cst_87) applies stablehlo.add across dimensions = [0, 1] : (tensor<12x768xf32>, tensor<f32>) -> tensor<f32>
    %217 = stablehlo.convert %216 : (tensor<f32>) -> tensor<bf16>
    %cst_88 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %218 = stablehlo.add %cst_88, %217 : tensor<bf16>
    %219 = stablehlo.multiply %176#27, %176#27 : tensor<12x768xbf16>
    %220 = stablehlo.convert %219 : (tensor<12x768xbf16>) -> tensor<12x768xf32>
    %cst_89 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %221 = stablehlo.reduce(%220 init: %cst_89) applies stablehlo.add across dimensions = [0, 1] : (tensor<12x768xf32>, tensor<f32>) -> tensor<f32>
    %222 = stablehlo.convert %221 : (tensor<f32>) -> tensor<bf16>
    %223 = stablehlo.add %218, %222 : tensor<bf16>
    %224 = stablehlo.multiply %176#28, %176#28 : tensor<12x768x3x12x64xbf16>
    %225 = stablehlo.convert %224 : (tensor<12x768x3x12x64xbf16>) -> tensor<12x768x3x12x64xf32>
    %cst_90 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %226 = stablehlo.reduce(%225 init: %cst_90) applies stablehlo.add across dimensions = [0, 1, 2, 3, 4] : (tensor<12x768x3x12x64xf32>, tensor<f32>) -> tensor<f32>
    %227 = stablehlo.convert %226 : (tensor<f32>) -> tensor<bf16>
    %228 = stablehlo.add %223, %227 : tensor<bf16>
    %229 = stablehlo.multiply %176#29, %176#29 : tensor<12x3x12x64xbf16>
    %230 = stablehlo.convert %229 : (tensor<12x3x12x64xbf16>) -> tensor<12x3x12x64xf32>
    %cst_91 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %231 = stablehlo.reduce(%230 init: %cst_91) applies stablehlo.add across dimensions = [0, 1, 2, 3] : (tensor<12x3x12x64xf32>, tensor<f32>) -> tensor<f32>
    %232 = stablehlo.convert %231 : (tensor<f32>) -> tensor<bf16>
    %233 = stablehlo.add %228, %232 : tensor<bf16>
    %234 = stablehlo.multiply %176#30, %176#30 : tensor<12x12x64x768xbf16>
    %235 = stablehlo.convert %234 : (tensor<12x12x64x768xbf16>) -> tensor<12x12x64x768xf32>
    %cst_92 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %236 = stablehlo.reduce(%235 init: %cst_92) applies stablehlo.add across dimensions = [0, 1, 2, 3] : (tensor<12x12x64x768xf32>, tensor<f32>) -> tensor<f32>
    %237 = stablehlo.convert %236 : (tensor<f32>) -> tensor<bf16>
    %238 = stablehlo.add %233, %237 : tensor<bf16>
    %239 = stablehlo.multiply %176#31, %176#31 : tensor<12x768xbf16>
    %240 = stablehlo.convert %239 : (tensor<12x768xbf16>) -> tensor<12x768xf32>
    %cst_93 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %241 = stablehlo.reduce(%240 init: %cst_93) applies stablehlo.add across dimensions = [0, 1] : (tensor<12x768xf32>, tensor<f32>) -> tensor<f32>
    %242 = stablehlo.convert %241 : (tensor<f32>) -> tensor<bf16>
    %243 = stablehlo.add %238, %242 : tensor<bf16>
    %244 = stablehlo.multiply %176#32, %176#32 : tensor<12x768xbf16>
    %245 = stablehlo.convert %244 : (tensor<12x768xbf16>) -> tensor<12x768xf32>
    %cst_94 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %246 = stablehlo.reduce(%245 init: %cst_94) applies stablehlo.add across dimensions = [0, 1] : (tensor<12x768xf32>, tensor<f32>) -> tensor<f32>
    %247 = stablehlo.convert %246 : (tensor<f32>) -> tensor<bf16>
    %248 = stablehlo.add %243, %247 : tensor<bf16>
    %249 = stablehlo.multiply %176#33, %176#33 : tensor<12x768xbf16>
    %250 = stablehlo.convert %249 : (tensor<12x768xbf16>) -> tensor<12x768xf32>
    %cst_95 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %251 = stablehlo.reduce(%250 init: %cst_95) applies stablehlo.add across dimensions = [0, 1] : (tensor<12x768xf32>, tensor<f32>) -> tensor<f32>
    %252 = stablehlo.convert %251 : (tensor<f32>) -> tensor<bf16>
    %253 = stablehlo.add %248, %252 : tensor<bf16>
    %254 = stablehlo.multiply %176#34, %176#34 : tensor<12x768x3072xbf16>
    %255 = stablehlo.convert %254 : (tensor<12x768x3072xbf16>) -> tensor<12x768x3072xf32>
    %cst_96 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %256 = stablehlo.reduce(%255 init: %cst_96) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<12x768x3072xf32>, tensor<f32>) -> tensor<f32>
    %257 = stablehlo.convert %256 : (tensor<f32>) -> tensor<bf16>
    %258 = stablehlo.add %253, %257 : tensor<bf16>
    %259 = stablehlo.multiply %176#35, %176#35 : tensor<12x3072xbf16>
    %260 = stablehlo.convert %259 : (tensor<12x3072xbf16>) -> tensor<12x3072xf32>
    %cst_97 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %261 = stablehlo.reduce(%260 init: %cst_97) applies stablehlo.add across dimensions = [0, 1] : (tensor<12x3072xf32>, tensor<f32>) -> tensor<f32>
    %262 = stablehlo.convert %261 : (tensor<f32>) -> tensor<bf16>
    %263 = stablehlo.add %258, %262 : tensor<bf16>
    %264 = stablehlo.multiply %176#36, %176#36 : tensor<12x3072x768xbf16>
    %265 = stablehlo.convert %264 : (tensor<12x3072x768xbf16>) -> tensor<12x3072x768xf32>
    %cst_98 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %266 = stablehlo.reduce(%265 init: %cst_98) applies stablehlo.add across dimensions = [0, 1, 2] : (tensor<12x3072x768xf32>, tensor<f32>) -> tensor<f32>
    %267 = stablehlo.convert %266 : (tensor<f32>) -> tensor<bf16>
    %268 = stablehlo.add %263, %267 : tensor<bf16>
    %269 = stablehlo.multiply %176#37, %176#37 : tensor<12x768xbf16>
    %270 = stablehlo.convert %269 : (tensor<12x768xbf16>) -> tensor<12x768xf32>
    %cst_99 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %271 = stablehlo.reduce(%270 init: %cst_99) applies stablehlo.add across dimensions = [0, 1] : (tensor<12x768xf32>, tensor<f32>) -> tensor<f32>
    %272 = stablehlo.convert %271 : (tensor<f32>) -> tensor<bf16>
    %273 = stablehlo.add %268, %272 : tensor<bf16>
    %274 = stablehlo.multiply %147, %147 : tensor<768xbf16>
    %275 = stablehlo.convert %274 : (tensor<768xbf16>) -> tensor<768xf32>
    %cst_100 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %276 = stablehlo.reduce(%275 init: %cst_100) applies stablehlo.add across dimensions = [0] : (tensor<768xf32>, tensor<f32>) -> tensor<f32>
    %277 = stablehlo.convert %276 : (tensor<f32>) -> tensor<bf16>
    %278 = stablehlo.add %273, %277 : tensor<bf16>
    %279 = stablehlo.multiply %144, %144 : tensor<768xbf16>
    %280 = stablehlo.convert %279 : (tensor<768xbf16>) -> tensor<768xf32>
    %cst_101 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %281 = stablehlo.reduce(%280 init: %cst_101) applies stablehlo.add across dimensions = [0] : (tensor<768xf32>, tensor<f32>) -> tensor<f32>
    %282 = stablehlo.convert %281 : (tensor<f32>) -> tensor<bf16>
    %283 = stablehlo.add %278, %282 : tensor<bf16>
    %284 = stablehlo.multiply %187, %187 : tensor<50257x768xbf16>
    %285 = stablehlo.convert %284 : (tensor<50257x768xbf16>) -> tensor<50257x768xf32>
    %cst_102 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %286 = stablehlo.reduce(%285 init: %cst_102) applies stablehlo.add across dimensions = [0, 1] : (tensor<50257x768xf32>, tensor<f32>) -> tensor<f32>
    %287 = stablehlo.convert %286 : (tensor<f32>) -> tensor<bf16>
    %288 = stablehlo.add %283, %287 : tensor<bf16>
    %289 = stablehlo.multiply %183, %183 : tensor<1024x768xbf16>
    %290 = stablehlo.convert %289 : (tensor<1024x768xbf16>) -> tensor<1024x768xf32>
    %cst_103 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %291 = stablehlo.reduce(%290 init: %cst_103) applies stablehlo.add across dimensions = [0, 1] : (tensor<1024x768xf32>, tensor<f32>) -> tensor<f32>
    %292 = stablehlo.convert %291 : (tensor<f32>) -> tensor<bf16>
    %293 = stablehlo.add %288, %292 : tensor<bf16>
    %294 = stablehlo.sqrt %293 : tensor<bf16>
    %cst_104 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %295 = stablehlo.compare  LT, %294, %cst_104,  FLOAT : (tensor<bf16>, tensor<bf16>) -> tensor<i1>
    %296 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %297 = stablehlo.divide %176#26, %296 : tensor<12x768xbf16>
    %cst_105 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %298 = stablehlo.broadcast_in_dim %cst_105, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %299 = stablehlo.multiply %297, %298 : tensor<12x768xbf16>
    %300 = stablehlo.select %295, %176#26, %299 : tensor<i1>, tensor<12x768xbf16>
    %301 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %302 = stablehlo.divide %176#27, %301 : tensor<12x768xbf16>
    %cst_106 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %303 = stablehlo.broadcast_in_dim %cst_106, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %304 = stablehlo.multiply %302, %303 : tensor<12x768xbf16>
    %305 = stablehlo.select %295, %176#27, %304 : tensor<i1>, tensor<12x768xbf16>
    %306 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %307 = stablehlo.divide %176#28, %306 : tensor<12x768x3x12x64xbf16>
    %cst_107 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %308 = stablehlo.broadcast_in_dim %cst_107, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %309 = stablehlo.multiply %307, %308 : tensor<12x768x3x12x64xbf16>
    %310 = stablehlo.select %295, %176#28, %309 : tensor<i1>, tensor<12x768x3x12x64xbf16>
    %311 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %312 = stablehlo.divide %176#29, %311 : tensor<12x3x12x64xbf16>
    %cst_108 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %313 = stablehlo.broadcast_in_dim %cst_108, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %314 = stablehlo.multiply %312, %313 : tensor<12x3x12x64xbf16>
    %315 = stablehlo.select %295, %176#29, %314 : tensor<i1>, tensor<12x3x12x64xbf16>
    %316 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %317 = stablehlo.divide %176#30, %316 : tensor<12x12x64x768xbf16>
    %cst_109 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %318 = stablehlo.broadcast_in_dim %cst_109, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %319 = stablehlo.multiply %317, %318 : tensor<12x12x64x768xbf16>
    %320 = stablehlo.select %295, %176#30, %319 : tensor<i1>, tensor<12x12x64x768xbf16>
    %321 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %322 = stablehlo.divide %176#31, %321 : tensor<12x768xbf16>
    %cst_110 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %323 = stablehlo.broadcast_in_dim %cst_110, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %324 = stablehlo.multiply %322, %323 : tensor<12x768xbf16>
    %325 = stablehlo.select %295, %176#31, %324 : tensor<i1>, tensor<12x768xbf16>
    %326 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %327 = stablehlo.divide %176#32, %326 : tensor<12x768xbf16>
    %cst_111 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %328 = stablehlo.broadcast_in_dim %cst_111, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %329 = stablehlo.multiply %327, %328 : tensor<12x768xbf16>
    %330 = stablehlo.select %295, %176#32, %329 : tensor<i1>, tensor<12x768xbf16>
    %331 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %332 = stablehlo.divide %176#33, %331 : tensor<12x768xbf16>
    %cst_112 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %333 = stablehlo.broadcast_in_dim %cst_112, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %334 = stablehlo.multiply %332, %333 : tensor<12x768xbf16>
    %335 = stablehlo.select %295, %176#33, %334 : tensor<i1>, tensor<12x768xbf16>
    %336 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %337 = stablehlo.divide %176#34, %336 : tensor<12x768x3072xbf16>
    %cst_113 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %338 = stablehlo.broadcast_in_dim %cst_113, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %339 = stablehlo.multiply %337, %338 : tensor<12x768x3072xbf16>
    %340 = stablehlo.select %295, %176#34, %339 : tensor<i1>, tensor<12x768x3072xbf16>
    %341 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %342 = stablehlo.divide %176#35, %341 : tensor<12x3072xbf16>
    %cst_114 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %343 = stablehlo.broadcast_in_dim %cst_114, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %344 = stablehlo.multiply %342, %343 : tensor<12x3072xbf16>
    %345 = stablehlo.select %295, %176#35, %344 : tensor<i1>, tensor<12x3072xbf16>
    %346 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %347 = stablehlo.divide %176#36, %346 : tensor<12x3072x768xbf16>
    %cst_115 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %348 = stablehlo.broadcast_in_dim %cst_115, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %349 = stablehlo.multiply %347, %348 : tensor<12x3072x768xbf16>
    %350 = stablehlo.select %295, %176#36, %349 : tensor<i1>, tensor<12x3072x768xbf16>
    %351 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %352 = stablehlo.divide %176#37, %351 : tensor<12x768xbf16>
    %cst_116 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %353 = stablehlo.broadcast_in_dim %cst_116, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %354 = stablehlo.multiply %352, %353 : tensor<12x768xbf16>
    %355 = stablehlo.select %295, %176#37, %354 : tensor<i1>, tensor<12x768xbf16>
    %356 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %357 = stablehlo.divide %147, %356 : tensor<768xbf16>
    %cst_117 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %358 = stablehlo.broadcast_in_dim %cst_117, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %359 = stablehlo.multiply %357, %358 : tensor<768xbf16>
    %360 = stablehlo.select %295, %147, %359 : tensor<i1>, tensor<768xbf16>
    %361 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %362 = stablehlo.divide %144, %361 : tensor<768xbf16>
    %cst_118 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %363 = stablehlo.broadcast_in_dim %cst_118, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %364 = stablehlo.multiply %362, %363 : tensor<768xbf16>
    %365 = stablehlo.select %295, %144, %364 : tensor<i1>, tensor<768xbf16>
    %366 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %367 = stablehlo.divide %187, %366 : tensor<50257x768xbf16>
    %cst_119 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %368 = stablehlo.broadcast_in_dim %cst_119, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %369 = stablehlo.multiply %367, %368 : tensor<50257x768xbf16>
    %370 = stablehlo.select %295, %187, %369 : tensor<i1>, tensor<50257x768xbf16>
    %371 = stablehlo.broadcast_in_dim %294, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %372 = stablehlo.divide %183, %371 : tensor<1024x768xbf16>
    %cst_120 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %373 = stablehlo.broadcast_in_dim %cst_120, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %374 = stablehlo.multiply %372, %373 : tensor<1024x768xbf16>
    %375 = stablehlo.select %295, %183, %374 : tensor<i1>, tensor<1024x768xbf16>
    %cst_121 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %376 = stablehlo.broadcast_in_dim %cst_121, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %377 = stablehlo.multiply %376, %300 : tensor<12x768xbf16>
    %cst_122 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %378 = stablehlo.broadcast_in_dim %cst_122, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %379 = stablehlo.multiply %378, %arg20 : tensor<12x768xbf16>
    %380 = stablehlo.add %377, %379 : tensor<12x768xbf16>
    %cst_123 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %381 = stablehlo.broadcast_in_dim %cst_123, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %382 = stablehlo.multiply %381, %305 : tensor<12x768xbf16>
    %cst_124 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %383 = stablehlo.broadcast_in_dim %cst_124, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %384 = stablehlo.multiply %383, %arg21 : tensor<12x768xbf16>
    %385 = stablehlo.add %382, %384 : tensor<12x768xbf16>
    %cst_125 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %386 = stablehlo.broadcast_in_dim %cst_125, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %387 = stablehlo.multiply %386, %310 : tensor<12x768x3x12x64xbf16>
    %cst_126 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %388 = stablehlo.broadcast_in_dim %cst_126, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %389 = stablehlo.multiply %388, %arg22 : tensor<12x768x3x12x64xbf16>
    %390 = stablehlo.add %387, %389 : tensor<12x768x3x12x64xbf16>
    %cst_127 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %391 = stablehlo.broadcast_in_dim %cst_127, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %392 = stablehlo.multiply %391, %315 : tensor<12x3x12x64xbf16>
    %cst_128 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %393 = stablehlo.broadcast_in_dim %cst_128, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %394 = stablehlo.multiply %393, %arg23 : tensor<12x3x12x64xbf16>
    %395 = stablehlo.add %392, %394 : tensor<12x3x12x64xbf16>
    %cst_129 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %396 = stablehlo.broadcast_in_dim %cst_129, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %397 = stablehlo.multiply %396, %320 : tensor<12x12x64x768xbf16>
    %cst_130 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %398 = stablehlo.broadcast_in_dim %cst_130, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %399 = stablehlo.multiply %398, %arg24 : tensor<12x12x64x768xbf16>
    %400 = stablehlo.add %397, %399 : tensor<12x12x64x768xbf16>
    %cst_131 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %401 = stablehlo.broadcast_in_dim %cst_131, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %402 = stablehlo.multiply %401, %325 : tensor<12x768xbf16>
    %cst_132 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %403 = stablehlo.broadcast_in_dim %cst_132, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %404 = stablehlo.multiply %403, %arg25 : tensor<12x768xbf16>
    %405 = stablehlo.add %402, %404 : tensor<12x768xbf16>
    %cst_133 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %406 = stablehlo.broadcast_in_dim %cst_133, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %407 = stablehlo.multiply %406, %330 : tensor<12x768xbf16>
    %cst_134 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %408 = stablehlo.broadcast_in_dim %cst_134, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %409 = stablehlo.multiply %408, %arg26 : tensor<12x768xbf16>
    %410 = stablehlo.add %407, %409 : tensor<12x768xbf16>
    %cst_135 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %411 = stablehlo.broadcast_in_dim %cst_135, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %412 = stablehlo.multiply %411, %335 : tensor<12x768xbf16>
    %cst_136 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %413 = stablehlo.broadcast_in_dim %cst_136, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %414 = stablehlo.multiply %413, %arg27 : tensor<12x768xbf16>
    %415 = stablehlo.add %412, %414 : tensor<12x768xbf16>
    %cst_137 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %416 = stablehlo.broadcast_in_dim %cst_137, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %417 = stablehlo.multiply %416, %340 : tensor<12x768x3072xbf16>
    %cst_138 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %418 = stablehlo.broadcast_in_dim %cst_138, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %419 = stablehlo.multiply %418, %arg28 : tensor<12x768x3072xbf16>
    %420 = stablehlo.add %417, %419 : tensor<12x768x3072xbf16>
    %cst_139 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %421 = stablehlo.broadcast_in_dim %cst_139, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %422 = stablehlo.multiply %421, %345 : tensor<12x3072xbf16>
    %cst_140 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %423 = stablehlo.broadcast_in_dim %cst_140, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %424 = stablehlo.multiply %423, %arg29 : tensor<12x3072xbf16>
    %425 = stablehlo.add %422, %424 : tensor<12x3072xbf16>
    %cst_141 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %426 = stablehlo.broadcast_in_dim %cst_141, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %427 = stablehlo.multiply %426, %350 : tensor<12x3072x768xbf16>
    %cst_142 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %428 = stablehlo.broadcast_in_dim %cst_142, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %429 = stablehlo.multiply %428, %arg30 : tensor<12x3072x768xbf16>
    %430 = stablehlo.add %427, %429 : tensor<12x3072x768xbf16>
    %cst_143 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %431 = stablehlo.broadcast_in_dim %cst_143, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %432 = stablehlo.multiply %431, %355 : tensor<12x768xbf16>
    %cst_144 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %433 = stablehlo.broadcast_in_dim %cst_144, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %434 = stablehlo.multiply %433, %arg31 : tensor<12x768xbf16>
    %435 = stablehlo.add %432, %434 : tensor<12x768xbf16>
    %cst_145 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %436 = stablehlo.broadcast_in_dim %cst_145, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %437 = stablehlo.multiply %436, %360 : tensor<768xbf16>
    %cst_146 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %438 = stablehlo.broadcast_in_dim %cst_146, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %439 = stablehlo.multiply %438, %arg32 : tensor<768xbf16>
    %440 = stablehlo.add %437, %439 : tensor<768xbf16>
    %cst_147 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %441 = stablehlo.broadcast_in_dim %cst_147, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %442 = stablehlo.multiply %441, %365 : tensor<768xbf16>
    %cst_148 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %443 = stablehlo.broadcast_in_dim %cst_148, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %444 = stablehlo.multiply %443, %arg33 : tensor<768xbf16>
    %445 = stablehlo.add %442, %444 : tensor<768xbf16>
    %cst_149 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %446 = stablehlo.broadcast_in_dim %cst_149, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %447 = stablehlo.multiply %446, %370 : tensor<50257x768xbf16>
    %cst_150 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %448 = stablehlo.broadcast_in_dim %cst_150, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %449 = stablehlo.multiply %448, %arg34 : tensor<50257x768xbf16>
    %450 = stablehlo.add %447, %449 : tensor<50257x768xbf16>
    %cst_151 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %451 = stablehlo.broadcast_in_dim %cst_151, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %452 = stablehlo.multiply %451, %375 : tensor<1024x768xbf16>
    %cst_152 = stablehlo.constant dense<8.984370e-01> : tensor<bf16>
    %453 = stablehlo.broadcast_in_dim %cst_152, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %454 = stablehlo.multiply %453, %arg35 : tensor<1024x768xbf16>
    %455 = stablehlo.add %452, %454 : tensor<1024x768xbf16>
    %456 = stablehlo.multiply %300, %300 : tensor<12x768xbf16>
    %cst_153 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %457 = stablehlo.broadcast_in_dim %cst_153, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %458 = stablehlo.multiply %457, %456 : tensor<12x768xbf16>
    %cst_154 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %459 = stablehlo.broadcast_in_dim %cst_154, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %460 = stablehlo.multiply %459, %arg36 : tensor<12x768xbf16>
    %461 = stablehlo.add %458, %460 : tensor<12x768xbf16>
    %462 = stablehlo.multiply %305, %305 : tensor<12x768xbf16>
    %cst_155 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %463 = stablehlo.broadcast_in_dim %cst_155, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %464 = stablehlo.multiply %463, %462 : tensor<12x768xbf16>
    %cst_156 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %465 = stablehlo.broadcast_in_dim %cst_156, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %466 = stablehlo.multiply %465, %arg37 : tensor<12x768xbf16>
    %467 = stablehlo.add %464, %466 : tensor<12x768xbf16>
    %468 = stablehlo.multiply %310, %310 : tensor<12x768x3x12x64xbf16>
    %cst_157 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %469 = stablehlo.broadcast_in_dim %cst_157, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %470 = stablehlo.multiply %469, %468 : tensor<12x768x3x12x64xbf16>
    %cst_158 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %471 = stablehlo.broadcast_in_dim %cst_158, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %472 = stablehlo.multiply %471, %arg38 : tensor<12x768x3x12x64xbf16>
    %473 = stablehlo.add %470, %472 : tensor<12x768x3x12x64xbf16>
    %474 = stablehlo.multiply %315, %315 : tensor<12x3x12x64xbf16>
    %cst_159 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %475 = stablehlo.broadcast_in_dim %cst_159, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %476 = stablehlo.multiply %475, %474 : tensor<12x3x12x64xbf16>
    %cst_160 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %477 = stablehlo.broadcast_in_dim %cst_160, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %478 = stablehlo.multiply %477, %arg39 : tensor<12x3x12x64xbf16>
    %479 = stablehlo.add %476, %478 : tensor<12x3x12x64xbf16>
    %480 = stablehlo.multiply %320, %320 : tensor<12x12x64x768xbf16>
    %cst_161 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %481 = stablehlo.broadcast_in_dim %cst_161, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %482 = stablehlo.multiply %481, %480 : tensor<12x12x64x768xbf16>
    %cst_162 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %483 = stablehlo.broadcast_in_dim %cst_162, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %484 = stablehlo.multiply %483, %arg40 : tensor<12x12x64x768xbf16>
    %485 = stablehlo.add %482, %484 : tensor<12x12x64x768xbf16>
    %486 = stablehlo.multiply %325, %325 : tensor<12x768xbf16>
    %cst_163 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %487 = stablehlo.broadcast_in_dim %cst_163, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %488 = stablehlo.multiply %487, %486 : tensor<12x768xbf16>
    %cst_164 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %489 = stablehlo.broadcast_in_dim %cst_164, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %490 = stablehlo.multiply %489, %arg41 : tensor<12x768xbf16>
    %491 = stablehlo.add %488, %490 : tensor<12x768xbf16>
    %492 = stablehlo.multiply %330, %330 : tensor<12x768xbf16>
    %cst_165 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %493 = stablehlo.broadcast_in_dim %cst_165, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %494 = stablehlo.multiply %493, %492 : tensor<12x768xbf16>
    %cst_166 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %495 = stablehlo.broadcast_in_dim %cst_166, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %496 = stablehlo.multiply %495, %arg42 : tensor<12x768xbf16>
    %497 = stablehlo.add %494, %496 : tensor<12x768xbf16>
    %498 = stablehlo.multiply %335, %335 : tensor<12x768xbf16>
    %cst_167 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %499 = stablehlo.broadcast_in_dim %cst_167, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %500 = stablehlo.multiply %499, %498 : tensor<12x768xbf16>
    %cst_168 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %501 = stablehlo.broadcast_in_dim %cst_168, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %502 = stablehlo.multiply %501, %arg43 : tensor<12x768xbf16>
    %503 = stablehlo.add %500, %502 : tensor<12x768xbf16>
    %504 = stablehlo.multiply %340, %340 : tensor<12x768x3072xbf16>
    %cst_169 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %505 = stablehlo.broadcast_in_dim %cst_169, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %506 = stablehlo.multiply %505, %504 : tensor<12x768x3072xbf16>
    %cst_170 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %507 = stablehlo.broadcast_in_dim %cst_170, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %508 = stablehlo.multiply %507, %arg44 : tensor<12x768x3072xbf16>
    %509 = stablehlo.add %506, %508 : tensor<12x768x3072xbf16>
    %510 = stablehlo.multiply %345, %345 : tensor<12x3072xbf16>
    %cst_171 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %511 = stablehlo.broadcast_in_dim %cst_171, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %512 = stablehlo.multiply %511, %510 : tensor<12x3072xbf16>
    %cst_172 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %513 = stablehlo.broadcast_in_dim %cst_172, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %514 = stablehlo.multiply %513, %arg45 : tensor<12x3072xbf16>
    %515 = stablehlo.add %512, %514 : tensor<12x3072xbf16>
    %516 = stablehlo.multiply %350, %350 : tensor<12x3072x768xbf16>
    %cst_173 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %517 = stablehlo.broadcast_in_dim %cst_173, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %518 = stablehlo.multiply %517, %516 : tensor<12x3072x768xbf16>
    %cst_174 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %519 = stablehlo.broadcast_in_dim %cst_174, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %520 = stablehlo.multiply %519, %arg46 : tensor<12x3072x768xbf16>
    %521 = stablehlo.add %518, %520 : tensor<12x3072x768xbf16>
    %522 = stablehlo.multiply %355, %355 : tensor<12x768xbf16>
    %cst_175 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %523 = stablehlo.broadcast_in_dim %cst_175, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %524 = stablehlo.multiply %523, %522 : tensor<12x768xbf16>
    %cst_176 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %525 = stablehlo.broadcast_in_dim %cst_176, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %526 = stablehlo.multiply %525, %arg47 : tensor<12x768xbf16>
    %527 = stablehlo.add %524, %526 : tensor<12x768xbf16>
    %528 = stablehlo.multiply %360, %360 : tensor<768xbf16>
    %cst_177 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %529 = stablehlo.broadcast_in_dim %cst_177, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %530 = stablehlo.multiply %529, %528 : tensor<768xbf16>
    %cst_178 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %531 = stablehlo.broadcast_in_dim %cst_178, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %532 = stablehlo.multiply %531, %arg48 : tensor<768xbf16>
    %533 = stablehlo.add %530, %532 : tensor<768xbf16>
    %534 = stablehlo.multiply %365, %365 : tensor<768xbf16>
    %cst_179 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %535 = stablehlo.broadcast_in_dim %cst_179, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %536 = stablehlo.multiply %535, %534 : tensor<768xbf16>
    %cst_180 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %537 = stablehlo.broadcast_in_dim %cst_180, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %538 = stablehlo.multiply %537, %arg49 : tensor<768xbf16>
    %539 = stablehlo.add %536, %538 : tensor<768xbf16>
    %540 = stablehlo.multiply %370, %370 : tensor<50257x768xbf16>
    %cst_181 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %541 = stablehlo.broadcast_in_dim %cst_181, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %542 = stablehlo.multiply %541, %540 : tensor<50257x768xbf16>
    %cst_182 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %543 = stablehlo.broadcast_in_dim %cst_182, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %544 = stablehlo.multiply %543, %arg50 : tensor<50257x768xbf16>
    %545 = stablehlo.add %542, %544 : tensor<50257x768xbf16>
    %546 = stablehlo.multiply %375, %375 : tensor<1024x768xbf16>
    %cst_183 = stablehlo.constant dense<5.004880e-02> : tensor<bf16>
    %547 = stablehlo.broadcast_in_dim %cst_183, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %548 = stablehlo.multiply %547, %546 : tensor<1024x768xbf16>
    %cst_184 = stablehlo.constant dense<9.492180e-01> : tensor<bf16>
    %549 = stablehlo.broadcast_in_dim %cst_184, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %550 = stablehlo.multiply %549, %arg51 : tensor<1024x768xbf16>
    %551 = stablehlo.add %548, %550 : tensor<1024x768xbf16>
    %c_185 = stablehlo.constant dense<2147483647> : tensor<i32>
    %552 = stablehlo.compare  LT, %arg19, %c_185,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %c_186 = stablehlo.constant dense<1> : tensor<i32>
    %553 = stablehlo.add %arg19, %c_186 : tensor<i32>
    %c_187 = stablehlo.constant dense<2147483647> : tensor<i32>
    %554 = call @_where_368(%552, %553, %c_187) : (tensor<i1>, tensor<i32>, tensor<i32>) -> tensor<i32>
    %555 = stablehlo.convert %554 : (tensor<i32>) -> tensor<f32>
    %556 = stablehlo.power %cst_81, %555 : tensor<f32>
    %cst_188 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %557 = stablehlo.subtract %cst_188, %556 : tensor<f32>
    %558 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %559 = stablehlo.broadcast_in_dim %558, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %560 = stablehlo.divide %380, %559 : tensor<12x768xbf16>
    %561 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %562 = stablehlo.broadcast_in_dim %561, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %563 = stablehlo.divide %385, %562 : tensor<12x768xbf16>
    %564 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %565 = stablehlo.broadcast_in_dim %564, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %566 = stablehlo.divide %390, %565 : tensor<12x768x3x12x64xbf16>
    %567 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %568 = stablehlo.broadcast_in_dim %567, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %569 = stablehlo.divide %395, %568 : tensor<12x3x12x64xbf16>
    %570 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %571 = stablehlo.broadcast_in_dim %570, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %572 = stablehlo.divide %400, %571 : tensor<12x12x64x768xbf16>
    %573 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %574 = stablehlo.broadcast_in_dim %573, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %575 = stablehlo.divide %405, %574 : tensor<12x768xbf16>
    %576 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %577 = stablehlo.broadcast_in_dim %576, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %578 = stablehlo.divide %410, %577 : tensor<12x768xbf16>
    %579 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %580 = stablehlo.broadcast_in_dim %579, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %581 = stablehlo.divide %415, %580 : tensor<12x768xbf16>
    %582 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %583 = stablehlo.broadcast_in_dim %582, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %584 = stablehlo.divide %420, %583 : tensor<12x768x3072xbf16>
    %585 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %586 = stablehlo.broadcast_in_dim %585, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %587 = stablehlo.divide %425, %586 : tensor<12x3072xbf16>
    %588 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %589 = stablehlo.broadcast_in_dim %588, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %590 = stablehlo.divide %430, %589 : tensor<12x3072x768xbf16>
    %591 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %592 = stablehlo.broadcast_in_dim %591, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %593 = stablehlo.divide %435, %592 : tensor<12x768xbf16>
    %594 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %595 = stablehlo.broadcast_in_dim %594, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %596 = stablehlo.divide %440, %595 : tensor<768xbf16>
    %597 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %598 = stablehlo.broadcast_in_dim %597, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %599 = stablehlo.divide %445, %598 : tensor<768xbf16>
    %600 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %601 = stablehlo.broadcast_in_dim %600, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %602 = stablehlo.divide %450, %601 : tensor<50257x768xbf16>
    %603 = stablehlo.convert %557 : (tensor<f32>) -> tensor<bf16>
    %604 = stablehlo.broadcast_in_dim %603, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %605 = stablehlo.divide %455, %604 : tensor<1024x768xbf16>
    %cst_189 = stablehlo.constant dense<0.949999988> : tensor<f32>
    %606 = stablehlo.convert %554 : (tensor<i32>) -> tensor<f32>
    %607 = stablehlo.power %cst_189, %606 : tensor<f32>
    %cst_190 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %608 = stablehlo.subtract %cst_190, %607 : tensor<f32>
    %609 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %610 = stablehlo.broadcast_in_dim %609, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %611 = stablehlo.divide %461, %610 : tensor<12x768xbf16>
    %612 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %613 = stablehlo.broadcast_in_dim %612, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %614 = stablehlo.divide %467, %613 : tensor<12x768xbf16>
    %615 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %616 = stablehlo.broadcast_in_dim %615, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %617 = stablehlo.divide %473, %616 : tensor<12x768x3x12x64xbf16>
    %618 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %619 = stablehlo.broadcast_in_dim %618, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %620 = stablehlo.divide %479, %619 : tensor<12x3x12x64xbf16>
    %621 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %622 = stablehlo.broadcast_in_dim %621, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %623 = stablehlo.divide %485, %622 : tensor<12x12x64x768xbf16>
    %624 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %625 = stablehlo.broadcast_in_dim %624, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %626 = stablehlo.divide %491, %625 : tensor<12x768xbf16>
    %627 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %628 = stablehlo.broadcast_in_dim %627, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %629 = stablehlo.divide %497, %628 : tensor<12x768xbf16>
    %630 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %631 = stablehlo.broadcast_in_dim %630, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %632 = stablehlo.divide %503, %631 : tensor<12x768xbf16>
    %633 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %634 = stablehlo.broadcast_in_dim %633, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %635 = stablehlo.divide %509, %634 : tensor<12x768x3072xbf16>
    %636 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %637 = stablehlo.broadcast_in_dim %636, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %638 = stablehlo.divide %515, %637 : tensor<12x3072xbf16>
    %639 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %640 = stablehlo.broadcast_in_dim %639, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %641 = stablehlo.divide %521, %640 : tensor<12x3072x768xbf16>
    %642 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %643 = stablehlo.broadcast_in_dim %642, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %644 = stablehlo.divide %527, %643 : tensor<12x768xbf16>
    %645 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %646 = stablehlo.broadcast_in_dim %645, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %647 = stablehlo.divide %533, %646 : tensor<768xbf16>
    %648 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %649 = stablehlo.broadcast_in_dim %648, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %650 = stablehlo.divide %539, %649 : tensor<768xbf16>
    %651 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %652 = stablehlo.broadcast_in_dim %651, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %653 = stablehlo.divide %545, %652 : tensor<50257x768xbf16>
    %654 = stablehlo.convert %608 : (tensor<f32>) -> tensor<bf16>
    %655 = stablehlo.broadcast_in_dim %654, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %656 = stablehlo.divide %551, %655 : tensor<1024x768xbf16>
    %cst_191 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %657 = stablehlo.broadcast_in_dim %cst_191, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %658 = stablehlo.add %611, %657 : tensor<12x768xbf16>
    %659 = stablehlo.sqrt %658 : tensor<12x768xbf16>
    %cst_192 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %660 = stablehlo.broadcast_in_dim %cst_192, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %661 = stablehlo.add %659, %660 : tensor<12x768xbf16>
    %662 = stablehlo.divide %560, %661 : tensor<12x768xbf16>
    %cst_193 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %663 = stablehlo.broadcast_in_dim %cst_193, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %664 = stablehlo.add %614, %663 : tensor<12x768xbf16>
    %665 = stablehlo.sqrt %664 : tensor<12x768xbf16>
    %cst_194 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %666 = stablehlo.broadcast_in_dim %cst_194, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %667 = stablehlo.add %665, %666 : tensor<12x768xbf16>
    %668 = stablehlo.divide %563, %667 : tensor<12x768xbf16>
    %cst_195 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %669 = stablehlo.broadcast_in_dim %cst_195, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %670 = stablehlo.add %617, %669 : tensor<12x768x3x12x64xbf16>
    %671 = stablehlo.sqrt %670 : tensor<12x768x3x12x64xbf16>
    %cst_196 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %672 = stablehlo.broadcast_in_dim %cst_196, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %673 = stablehlo.add %671, %672 : tensor<12x768x3x12x64xbf16>
    %674 = stablehlo.divide %566, %673 : tensor<12x768x3x12x64xbf16>
    %cst_197 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %675 = stablehlo.broadcast_in_dim %cst_197, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %676 = stablehlo.add %620, %675 : tensor<12x3x12x64xbf16>
    %677 = stablehlo.sqrt %676 : tensor<12x3x12x64xbf16>
    %cst_198 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %678 = stablehlo.broadcast_in_dim %cst_198, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %679 = stablehlo.add %677, %678 : tensor<12x3x12x64xbf16>
    %680 = stablehlo.divide %569, %679 : tensor<12x3x12x64xbf16>
    %cst_199 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %681 = stablehlo.broadcast_in_dim %cst_199, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %682 = stablehlo.add %623, %681 : tensor<12x12x64x768xbf16>
    %683 = stablehlo.sqrt %682 : tensor<12x12x64x768xbf16>
    %cst_200 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %684 = stablehlo.broadcast_in_dim %cst_200, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %685 = stablehlo.add %683, %684 : tensor<12x12x64x768xbf16>
    %686 = stablehlo.divide %572, %685 : tensor<12x12x64x768xbf16>
    %cst_201 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %687 = stablehlo.broadcast_in_dim %cst_201, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %688 = stablehlo.add %626, %687 : tensor<12x768xbf16>
    %689 = stablehlo.sqrt %688 : tensor<12x768xbf16>
    %cst_202 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %690 = stablehlo.broadcast_in_dim %cst_202, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %691 = stablehlo.add %689, %690 : tensor<12x768xbf16>
    %692 = stablehlo.divide %575, %691 : tensor<12x768xbf16>
    %cst_203 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %693 = stablehlo.broadcast_in_dim %cst_203, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %694 = stablehlo.add %629, %693 : tensor<12x768xbf16>
    %695 = stablehlo.sqrt %694 : tensor<12x768xbf16>
    %cst_204 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %696 = stablehlo.broadcast_in_dim %cst_204, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %697 = stablehlo.add %695, %696 : tensor<12x768xbf16>
    %698 = stablehlo.divide %578, %697 : tensor<12x768xbf16>
    %cst_205 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %699 = stablehlo.broadcast_in_dim %cst_205, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %700 = stablehlo.add %632, %699 : tensor<12x768xbf16>
    %701 = stablehlo.sqrt %700 : tensor<12x768xbf16>
    %cst_206 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %702 = stablehlo.broadcast_in_dim %cst_206, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %703 = stablehlo.add %701, %702 : tensor<12x768xbf16>
    %704 = stablehlo.divide %581, %703 : tensor<12x768xbf16>
    %cst_207 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %705 = stablehlo.broadcast_in_dim %cst_207, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %706 = stablehlo.add %635, %705 : tensor<12x768x3072xbf16>
    %707 = stablehlo.sqrt %706 : tensor<12x768x3072xbf16>
    %cst_208 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %708 = stablehlo.broadcast_in_dim %cst_208, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %709 = stablehlo.add %707, %708 : tensor<12x768x3072xbf16>
    %710 = stablehlo.divide %584, %709 : tensor<12x768x3072xbf16>
    %cst_209 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %711 = stablehlo.broadcast_in_dim %cst_209, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %712 = stablehlo.add %638, %711 : tensor<12x3072xbf16>
    %713 = stablehlo.sqrt %712 : tensor<12x3072xbf16>
    %cst_210 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %714 = stablehlo.broadcast_in_dim %cst_210, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %715 = stablehlo.add %713, %714 : tensor<12x3072xbf16>
    %716 = stablehlo.divide %587, %715 : tensor<12x3072xbf16>
    %cst_211 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %717 = stablehlo.broadcast_in_dim %cst_211, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %718 = stablehlo.add %641, %717 : tensor<12x3072x768xbf16>
    %719 = stablehlo.sqrt %718 : tensor<12x3072x768xbf16>
    %cst_212 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %720 = stablehlo.broadcast_in_dim %cst_212, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %721 = stablehlo.add %719, %720 : tensor<12x3072x768xbf16>
    %722 = stablehlo.divide %590, %721 : tensor<12x3072x768xbf16>
    %cst_213 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %723 = stablehlo.broadcast_in_dim %cst_213, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %724 = stablehlo.add %644, %723 : tensor<12x768xbf16>
    %725 = stablehlo.sqrt %724 : tensor<12x768xbf16>
    %cst_214 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %726 = stablehlo.broadcast_in_dim %cst_214, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %727 = stablehlo.add %725, %726 : tensor<12x768xbf16>
    %728 = stablehlo.divide %593, %727 : tensor<12x768xbf16>
    %cst_215 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %729 = stablehlo.broadcast_in_dim %cst_215, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %730 = stablehlo.add %647, %729 : tensor<768xbf16>
    %731 = stablehlo.sqrt %730 : tensor<768xbf16>
    %cst_216 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %732 = stablehlo.broadcast_in_dim %cst_216, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %733 = stablehlo.add %731, %732 : tensor<768xbf16>
    %734 = stablehlo.divide %596, %733 : tensor<768xbf16>
    %cst_217 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %735 = stablehlo.broadcast_in_dim %cst_217, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %736 = stablehlo.add %650, %735 : tensor<768xbf16>
    %737 = stablehlo.sqrt %736 : tensor<768xbf16>
    %cst_218 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %738 = stablehlo.broadcast_in_dim %cst_218, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %739 = stablehlo.add %737, %738 : tensor<768xbf16>
    %740 = stablehlo.divide %599, %739 : tensor<768xbf16>
    %cst_219 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %741 = stablehlo.broadcast_in_dim %cst_219, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %742 = stablehlo.add %653, %741 : tensor<50257x768xbf16>
    %743 = stablehlo.sqrt %742 : tensor<50257x768xbf16>
    %cst_220 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %744 = stablehlo.broadcast_in_dim %cst_220, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %745 = stablehlo.add %743, %744 : tensor<50257x768xbf16>
    %746 = stablehlo.divide %602, %745 : tensor<50257x768xbf16>
    %cst_221 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %747 = stablehlo.broadcast_in_dim %cst_221, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %748 = stablehlo.add %656, %747 : tensor<1024x768xbf16>
    %749 = stablehlo.sqrt %748 : tensor<1024x768xbf16>
    %cst_222 = stablehlo.constant dense<1.001170e-08> : tensor<bf16>
    %750 = stablehlo.broadcast_in_dim %cst_222, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %751 = stablehlo.add %749, %750 : tensor<1024x768xbf16>
    %752 = stablehlo.divide %605, %751 : tensor<1024x768xbf16>
    %cst_223 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %753 = stablehlo.broadcast_in_dim %cst_223, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %754 = stablehlo.multiply %753, %arg3 : tensor<12x768x3x12x64xbf16>
    %755 = stablehlo.add %674, %754 : tensor<12x768x3x12x64xbf16>
    %cst_224 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %756 = stablehlo.broadcast_in_dim %cst_224, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %757 = stablehlo.multiply %756, %arg5 : tensor<12x12x64x768xbf16>
    %758 = stablehlo.add %686, %757 : tensor<12x12x64x768xbf16>
    %cst_225 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %759 = stablehlo.broadcast_in_dim %cst_225, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %760 = stablehlo.multiply %759, %arg9 : tensor<12x768x3072xbf16>
    %761 = stablehlo.add %710, %760 : tensor<12x768x3072xbf16>
    %cst_226 = stablehlo.constant dense<1.000980e-01> : tensor<bf16>
    %762 = stablehlo.broadcast_in_dim %cst_226, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %763 = stablehlo.multiply %762, %arg11 : tensor<12x3072x768xbf16>
    %764 = stablehlo.add %722, %763 : tensor<12x3072x768xbf16>
    %765 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %766 = stablehlo.multiply %765, %662 : tensor<12x768xbf16>
    %767 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %768 = stablehlo.multiply %767, %668 : tensor<12x768xbf16>
    %769 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768x3x12x64xbf16>
    %770 = stablehlo.multiply %769, %755 : tensor<12x768x3x12x64xbf16>
    %771 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x3x12x64xbf16>
    %772 = stablehlo.multiply %771, %680 : tensor<12x3x12x64xbf16>
    %773 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x12x64x768xbf16>
    %774 = stablehlo.multiply %773, %758 : tensor<12x12x64x768xbf16>
    %775 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %776 = stablehlo.multiply %775, %692 : tensor<12x768xbf16>
    %777 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %778 = stablehlo.multiply %777, %698 : tensor<12x768xbf16>
    %779 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %780 = stablehlo.multiply %779, %704 : tensor<12x768xbf16>
    %781 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768x3072xbf16>
    %782 = stablehlo.multiply %781, %761 : tensor<12x768x3072xbf16>
    %783 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x3072xbf16>
    %784 = stablehlo.multiply %783, %716 : tensor<12x3072xbf16>
    %785 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x3072x768xbf16>
    %786 = stablehlo.multiply %785, %764 : tensor<12x3072x768xbf16>
    %787 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<12x768xbf16>
    %788 = stablehlo.multiply %787, %728 : tensor<12x768xbf16>
    %789 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %790 = stablehlo.multiply %789, %734 : tensor<768xbf16>
    %791 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<768xbf16>
    %792 = stablehlo.multiply %791, %740 : tensor<768xbf16>
    %793 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<50257x768xbf16>
    %794 = stablehlo.multiply %793, %746 : tensor<50257x768xbf16>
    %795 = stablehlo.broadcast_in_dim %213, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %796 = stablehlo.multiply %795, %752 : tensor<1024x768xbf16>
    %c_227 = stablehlo.constant dense<2147483647> : tensor<i32>
    %797 = stablehlo.compare  LT, %arg17, %c_227,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %c_228 = stablehlo.constant dense<1> : tensor<i32>
    %798 = stablehlo.add %arg17, %c_228 : tensor<i32>
    %c_229 = stablehlo.constant dense<2147483647> : tensor<i32>
    %799 = call @_where_368(%797, %798, %c_229) : (tensor<i1>, tensor<i32>, tensor<i32>) -> tensor<i32>
    %800 = stablehlo.add %arg1, %766 : tensor<12x768xbf16>
    %801 = stablehlo.add %arg2, %768 : tensor<12x768xbf16>
    %802 = stablehlo.add %arg3, %770 : tensor<12x768x3x12x64xbf16>
    %803 = stablehlo.add %arg4, %772 : tensor<12x3x12x64xbf16>
    %804 = stablehlo.add %arg5, %774 : tensor<12x12x64x768xbf16>
    %805 = stablehlo.add %arg6, %776 : tensor<12x768xbf16>
    %806 = stablehlo.add %arg7, %778 : tensor<12x768xbf16>
    %807 = stablehlo.add %arg8, %780 : tensor<12x768xbf16>
    %808 = stablehlo.add %arg9, %782 : tensor<12x768x3072xbf16>
    %809 = stablehlo.add %arg10, %784 : tensor<12x3072xbf16>
    %810 = stablehlo.add %arg11, %786 : tensor<12x3072x768xbf16>
    %811 = stablehlo.add %arg12, %788 : tensor<12x768xbf16>
    %812 = stablehlo.add %arg13, %790 : tensor<768xbf16>
    %813 = stablehlo.add %arg14, %792 : tensor<768xbf16>
    %814 = stablehlo.add %arg15, %794 : tensor<50257x768xbf16>
    %815 = stablehlo.add %arg16, %796 : tensor<1024x768xbf16>
    %816 = stablehlo.add %arg0, %c_14 : tensor<i32>
    %817 = sdy.sharding_constraint %800 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %818 = sdy.sharding_constraint %801 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %819 = sdy.sharding_constraint %802 <@mesh, [{}, {"data"}, {}, {"model"}, {}]> : tensor<12x768x3x12x64xbf16>
    %820 = sdy.sharding_constraint %803 <@mesh, [{}, {}, {"model"}, {}]> : tensor<12x3x12x64xbf16>
    %821 = sdy.sharding_constraint %804 <@mesh, [{}, {"model"}, {}, {"data"}]> : tensor<12x12x64x768xbf16>
    %822 = sdy.sharding_constraint %805 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %823 = sdy.sharding_constraint %806 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %824 = sdy.sharding_constraint %807 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %825 = sdy.sharding_constraint %808 <@mesh, [{}, {"data"}, {"model"}]> : tensor<12x768x3072xbf16>
    %826 = sdy.sharding_constraint %809 <@mesh, [{}, {"model"}]> : tensor<12x3072xbf16>
    %827 = sdy.sharding_constraint %810 <@mesh, [{}, {"model"}, {"data"}]> : tensor<12x3072x768xbf16>
    %828 = sdy.sharding_constraint %811 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %829 = sdy.sharding_constraint %812 <@mesh, [{"data"}]> : tensor<768xbf16>
    %830 = sdy.sharding_constraint %813 <@mesh, [{"data"}]> : tensor<768xbf16>
    %831 = sdy.sharding_constraint %814 <@mesh, [{}, {"data"}]> : tensor<50257x768xbf16>
    %832 = sdy.sharding_constraint %815 <@mesh, [{}, {"data"}]> : tensor<1024x768xbf16>
    %833 = sdy.sharding_constraint %380 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %834 = sdy.sharding_constraint %385 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %835 = sdy.sharding_constraint %390 <@mesh, [{}, {"data"}, {}, {"model"}, {}]> : tensor<12x768x3x12x64xbf16>
    %836 = sdy.sharding_constraint %395 <@mesh, [{}, {}, {"model"}, {}]> : tensor<12x3x12x64xbf16>
    %837 = sdy.sharding_constraint %400 <@mesh, [{}, {"model"}, {}, {"data"}]> : tensor<12x12x64x768xbf16>
    %838 = sdy.sharding_constraint %405 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %839 = sdy.sharding_constraint %410 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %840 = sdy.sharding_constraint %415 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %841 = sdy.sharding_constraint %420 <@mesh, [{}, {"data"}, {"model"}]> : tensor<12x768x3072xbf16>
    %842 = sdy.sharding_constraint %425 <@mesh, [{}, {"model"}]> : tensor<12x3072xbf16>
    %843 = sdy.sharding_constraint %430 <@mesh, [{}, {"model"}, {"data"}]> : tensor<12x3072x768xbf16>
    %844 = sdy.sharding_constraint %435 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %845 = sdy.sharding_constraint %440 <@mesh, [{"data"}]> : tensor<768xbf16>
    %846 = sdy.sharding_constraint %445 <@mesh, [{"data"}]> : tensor<768xbf16>
    %847 = sdy.sharding_constraint %450 <@mesh, [{}, {"data"}]> : tensor<50257x768xbf16>
    %848 = sdy.sharding_constraint %455 <@mesh, [{}, {"data"}]> : tensor<1024x768xbf16>
    %849 = sdy.sharding_constraint %461 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %850 = sdy.sharding_constraint %467 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %851 = sdy.sharding_constraint %473 <@mesh, [{}, {"data"}, {}, {"model"}, {}]> : tensor<12x768x3x12x64xbf16>
    %852 = sdy.sharding_constraint %479 <@mesh, [{}, {}, {"model"}, {}]> : tensor<12x3x12x64xbf16>
    %853 = sdy.sharding_constraint %485 <@mesh, [{}, {"model"}, {}, {"data"}]> : tensor<12x12x64x768xbf16>
    %854 = sdy.sharding_constraint %491 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %855 = sdy.sharding_constraint %497 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %856 = sdy.sharding_constraint %503 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %857 = sdy.sharding_constraint %509 <@mesh, [{}, {"data"}, {"model"}]> : tensor<12x768x3072xbf16>
    %858 = sdy.sharding_constraint %515 <@mesh, [{}, {"model"}]> : tensor<12x3072xbf16>
    %859 = sdy.sharding_constraint %521 <@mesh, [{}, {"model"}, {"data"}]> : tensor<12x3072x768xbf16>
    %860 = sdy.sharding_constraint %527 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %861 = sdy.sharding_constraint %533 <@mesh, [{"data"}]> : tensor<768xbf16>
    %862 = sdy.sharding_constraint %539 <@mesh, [{"data"}]> : tensor<768xbf16>
    %863 = sdy.sharding_constraint %545 <@mesh, [{}, {"data"}]> : tensor<50257x768xbf16>
    %864 = sdy.sharding_constraint %551 <@mesh, [{}, {"data"}]> : tensor<1024x768xbf16>
    %865 = sdy.sharding_constraint %817 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %866 = sdy.sharding_constraint %818 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %867 = sdy.sharding_constraint %819 <@mesh, [{}, {"data"}, {}, {"model"}, {}]> : tensor<12x768x3x12x64xbf16>
    %868 = sdy.sharding_constraint %820 <@mesh, [{}, {}, {"model"}, {}]> : tensor<12x3x12x64xbf16>
    %869 = sdy.sharding_constraint %821 <@mesh, [{}, {"model"}, {}, {"data"}]> : tensor<12x12x64x768xbf16>
    %870 = sdy.sharding_constraint %822 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %871 = sdy.sharding_constraint %823 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %872 = sdy.sharding_constraint %824 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %873 = sdy.sharding_constraint %825 <@mesh, [{}, {"data"}, {"model"}]> : tensor<12x768x3072xbf16>
    %874 = sdy.sharding_constraint %826 <@mesh, [{}, {"model"}]> : tensor<12x3072xbf16>
    %875 = sdy.sharding_constraint %827 <@mesh, [{}, {"model"}, {"data"}]> : tensor<12x3072x768xbf16>
    %876 = sdy.sharding_constraint %828 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %877 = sdy.sharding_constraint %829 <@mesh, [{"data"}]> : tensor<768xbf16>
    %878 = sdy.sharding_constraint %830 <@mesh, [{"data"}]> : tensor<768xbf16>
    %879 = sdy.sharding_constraint %831 <@mesh, [{}, {"data"}]> : tensor<50257x768xbf16>
    %880 = sdy.sharding_constraint %832 <@mesh, [{}, {"data"}]> : tensor<1024x768xbf16>
    %881 = sdy.sharding_constraint %833 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %882 = sdy.sharding_constraint %834 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %883 = sdy.sharding_constraint %835 <@mesh, [{}, {"data"}, {}, {"model"}, {}]> : tensor<12x768x3x12x64xbf16>
    %884 = sdy.sharding_constraint %836 <@mesh, [{}, {}, {"model"}, {}]> : tensor<12x3x12x64xbf16>
    %885 = sdy.sharding_constraint %837 <@mesh, [{}, {"model"}, {}, {"data"}]> : tensor<12x12x64x768xbf16>
    %886 = sdy.sharding_constraint %838 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %887 = sdy.sharding_constraint %839 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %888 = sdy.sharding_constraint %840 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %889 = sdy.sharding_constraint %841 <@mesh, [{}, {"data"}, {"model"}]> : tensor<12x768x3072xbf16>
    %890 = sdy.sharding_constraint %842 <@mesh, [{}, {"model"}]> : tensor<12x3072xbf16>
    %891 = sdy.sharding_constraint %843 <@mesh, [{}, {"model"}, {"data"}]> : tensor<12x3072x768xbf16>
    %892 = sdy.sharding_constraint %844 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %893 = sdy.sharding_constraint %845 <@mesh, [{"data"}]> : tensor<768xbf16>
    %894 = sdy.sharding_constraint %846 <@mesh, [{"data"}]> : tensor<768xbf16>
    %895 = sdy.sharding_constraint %847 <@mesh, [{}, {"data"}]> : tensor<50257x768xbf16>
    %896 = sdy.sharding_constraint %848 <@mesh, [{}, {"data"}]> : tensor<1024x768xbf16>
    %897 = sdy.sharding_constraint %849 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %898 = sdy.sharding_constraint %850 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %899 = sdy.sharding_constraint %851 <@mesh, [{}, {"data"}, {}, {"model"}, {}]> : tensor<12x768x3x12x64xbf16>
    %900 = sdy.sharding_constraint %852 <@mesh, [{}, {}, {"model"}, {}]> : tensor<12x3x12x64xbf16>
    %901 = sdy.sharding_constraint %853 <@mesh, [{}, {"model"}, {}, {"data"}]> : tensor<12x12x64x768xbf16>
    %902 = sdy.sharding_constraint %854 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %903 = sdy.sharding_constraint %855 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %904 = sdy.sharding_constraint %856 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %905 = sdy.sharding_constraint %857 <@mesh, [{}, {"data"}, {"model"}]> : tensor<12x768x3072xbf16>
    %906 = sdy.sharding_constraint %858 <@mesh, [{}, {"model"}]> : tensor<12x3072xbf16>
    %907 = sdy.sharding_constraint %859 <@mesh, [{}, {"model"}, {"data"}]> : tensor<12x3072x768xbf16>
    %908 = sdy.sharding_constraint %860 <@mesh, [{}, {"data"}]> : tensor<12x768xbf16>
    %909 = sdy.sharding_constraint %861 <@mesh, [{"data"}]> : tensor<768xbf16>
    %910 = sdy.sharding_constraint %862 <@mesh, [{"data"}]> : tensor<768xbf16>
    %911 = sdy.sharding_constraint %863 <@mesh, [{}, {"data"}]> : tensor<50257x768xbf16>
    %912 = sdy.sharding_constraint %864 <@mesh, [{}, {"data"}]> : tensor<1024x768xbf16>
    return %120, %816, %865, %866, %867, %868, %869, %870, %871, %872, %873, %874, %875, %876, %877, %878, %879, %880, %799, %209, %212, %554, %881, %882, %883, %884, %885, %886, %887, %888, %889, %890, %891, %892, %893, %894, %895, %896, %897, %898, %899, %900, %901, %902, %903, %904, %905, %906, %907, %908, %909, %910, %911, %912, %4 : tensor<f32>, tensor<i32>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<50257x768xbf16>, tensor<1024x768xbf16>, tensor<i32>, tensor<bf16>, tensor<i32>, tensor<i32>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<50257x768xbf16>, tensor<1024x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3x12x64xbf16>, tensor<12x3x12x64xbf16>, tensor<12x12x64x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768xbf16>, tensor<12x768x3072xbf16>, tensor<12x3072xbf16>, tensor<12x3072x768xbf16>, tensor<12x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<50257x768xbf16>, tensor<1024x768xbf16>, tensor<2xui32>
  }
  func.func private @_threefry_split(%arg0: tensor<2xui32>) -> tensor<2x2xui32> {
    %0 = stablehlo.slice %arg0 [0:1] : (tensor<2xui32>) -> tensor<1xui32>
    %1 = stablehlo.reshape %0 : (tensor<1xui32>) -> tensor<ui32>
    %2 = stablehlo.slice %arg0 [1:2] : (tensor<2xui32>) -> tensor<1xui32>
    %3 = stablehlo.reshape %2 : (tensor<1xui32>) -> tensor<ui32>
    %4 = stablehlo.iota dim = 0 : tensor<2xui64>
    %c = stablehlo.constant dense<1> : tensor<ui64>
    %5 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<ui64>) -> tensor<2xui64>
    %6 = stablehlo.multiply %5, %4 : tensor<2xui64>
    %c_0 = stablehlo.constant dense<32> : tensor<ui64>
    %7 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui64>) -> tensor<2xui64>
    %8 = stablehlo.shift_right_logical %6, %7 : tensor<2xui64>
    %9 = stablehlo.convert %6 : (tensor<2xui64>) -> tensor<2xui32>
    %10 = stablehlo.convert %8 : (tensor<2xui64>) -> tensor<2xui32>
    %11:2 = call @threefry2x32(%1, %3, %10, %9) : (tensor<ui32>, tensor<ui32>, tensor<2xui32>, tensor<2xui32>) -> (tensor<2xui32>, tensor<2xui32>)
    %12 = stablehlo.broadcast_in_dim %11#0, dims = [0] : (tensor<2xui32>) -> tensor<2x1xui32>
    %13 = stablehlo.broadcast_in_dim %11#1, dims = [0] : (tensor<2xui32>) -> tensor<2x1xui32>
    %14 = stablehlo.concatenate %12, %13, dim = 1 : (tensor<2x1xui32>, tensor<2x1xui32>) -> tensor<2x2xui32>
    return %14 : tensor<2x2xui32>
  }
  func.func private @threefry2x32(%arg0: tensor<ui32>, %arg1: tensor<ui32>, %arg2: tensor<2xui32>, %arg3: tensor<2xui32>) -> (tensor<2xui32>, tensor<2xui32>) {
    %0 = stablehlo.xor %arg0, %arg1 : tensor<ui32>
    %c = stablehlo.constant dense<466688986> : tensor<ui32>
    %1 = stablehlo.xor %0, %c : tensor<ui32>
    %2 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %3 = stablehlo.add %arg2, %2 : tensor<2xui32>
    %4 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %5 = stablehlo.add %arg3, %4 : tensor<2xui32>
    %6 = stablehlo.add %3, %5 : tensor<2xui32>
    %c_0 = stablehlo.constant dense<13> : tensor<ui32>
    %7 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %8 = stablehlo.shift_left %5, %7 : tensor<2xui32>
    %c_1 = stablehlo.constant dense<19> : tensor<ui32>
    %9 = stablehlo.broadcast_in_dim %c_1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %10 = stablehlo.shift_right_logical %5, %9 : tensor<2xui32>
    %11 = stablehlo.or %8, %10 : tensor<2xui32>
    %12 = stablehlo.xor %6, %11 : tensor<2xui32>
    %13 = stablehlo.add %6, %12 : tensor<2xui32>
    %c_2 = stablehlo.constant dense<15> : tensor<ui32>
    %14 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %15 = stablehlo.shift_left %12, %14 : tensor<2xui32>
    %c_3 = stablehlo.constant dense<17> : tensor<ui32>
    %16 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %17 = stablehlo.shift_right_logical %12, %16 : tensor<2xui32>
    %18 = stablehlo.or %15, %17 : tensor<2xui32>
    %19 = stablehlo.xor %13, %18 : tensor<2xui32>
    %20 = stablehlo.add %13, %19 : tensor<2xui32>
    %c_4 = stablehlo.constant dense<26> : tensor<ui32>
    %21 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %22 = stablehlo.shift_left %19, %21 : tensor<2xui32>
    %c_5 = stablehlo.constant dense<6> : tensor<ui32>
    %23 = stablehlo.broadcast_in_dim %c_5, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %24 = stablehlo.shift_right_logical %19, %23 : tensor<2xui32>
    %25 = stablehlo.or %22, %24 : tensor<2xui32>
    %26 = stablehlo.xor %20, %25 : tensor<2xui32>
    %27 = stablehlo.add %20, %26 : tensor<2xui32>
    %c_6 = stablehlo.constant dense<6> : tensor<ui32>
    %28 = stablehlo.broadcast_in_dim %c_6, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %29 = stablehlo.shift_left %26, %28 : tensor<2xui32>
    %c_7 = stablehlo.constant dense<26> : tensor<ui32>
    %30 = stablehlo.broadcast_in_dim %c_7, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %31 = stablehlo.shift_right_logical %26, %30 : tensor<2xui32>
    %32 = stablehlo.or %29, %31 : tensor<2xui32>
    %33 = stablehlo.xor %27, %32 : tensor<2xui32>
    %34 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %35 = stablehlo.add %27, %34 : tensor<2xui32>
    %36 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %37 = stablehlo.add %33, %36 : tensor<2xui32>
    %c_8 = stablehlo.constant dense<1> : tensor<ui32>
    %38 = stablehlo.broadcast_in_dim %c_8, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %39 = stablehlo.add %37, %38 : tensor<2xui32>
    %40 = stablehlo.add %35, %39 : tensor<2xui32>
    %c_9 = stablehlo.constant dense<17> : tensor<ui32>
    %41 = stablehlo.broadcast_in_dim %c_9, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %42 = stablehlo.shift_left %39, %41 : tensor<2xui32>
    %c_10 = stablehlo.constant dense<15> : tensor<ui32>
    %43 = stablehlo.broadcast_in_dim %c_10, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %44 = stablehlo.shift_right_logical %39, %43 : tensor<2xui32>
    %45 = stablehlo.or %42, %44 : tensor<2xui32>
    %46 = stablehlo.xor %40, %45 : tensor<2xui32>
    %47 = stablehlo.add %40, %46 : tensor<2xui32>
    %c_11 = stablehlo.constant dense<29> : tensor<ui32>
    %48 = stablehlo.broadcast_in_dim %c_11, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %49 = stablehlo.shift_left %46, %48 : tensor<2xui32>
    %c_12 = stablehlo.constant dense<3> : tensor<ui32>
    %50 = stablehlo.broadcast_in_dim %c_12, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %51 = stablehlo.shift_right_logical %46, %50 : tensor<2xui32>
    %52 = stablehlo.or %49, %51 : tensor<2xui32>
    %53 = stablehlo.xor %47, %52 : tensor<2xui32>
    %54 = stablehlo.add %47, %53 : tensor<2xui32>
    %c_13 = stablehlo.constant dense<16> : tensor<ui32>
    %55 = stablehlo.broadcast_in_dim %c_13, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %56 = stablehlo.shift_left %53, %55 : tensor<2xui32>
    %c_14 = stablehlo.constant dense<16> : tensor<ui32>
    %57 = stablehlo.broadcast_in_dim %c_14, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %58 = stablehlo.shift_right_logical %53, %57 : tensor<2xui32>
    %59 = stablehlo.or %56, %58 : tensor<2xui32>
    %60 = stablehlo.xor %54, %59 : tensor<2xui32>
    %61 = stablehlo.add %54, %60 : tensor<2xui32>
    %c_15 = stablehlo.constant dense<24> : tensor<ui32>
    %62 = stablehlo.broadcast_in_dim %c_15, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %63 = stablehlo.shift_left %60, %62 : tensor<2xui32>
    %c_16 = stablehlo.constant dense<8> : tensor<ui32>
    %64 = stablehlo.broadcast_in_dim %c_16, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %65 = stablehlo.shift_right_logical %60, %64 : tensor<2xui32>
    %66 = stablehlo.or %63, %65 : tensor<2xui32>
    %67 = stablehlo.xor %61, %66 : tensor<2xui32>
    %68 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %69 = stablehlo.add %61, %68 : tensor<2xui32>
    %70 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %71 = stablehlo.add %67, %70 : tensor<2xui32>
    %c_17 = stablehlo.constant dense<2> : tensor<ui32>
    %72 = stablehlo.broadcast_in_dim %c_17, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %73 = stablehlo.add %71, %72 : tensor<2xui32>
    %74 = stablehlo.add %69, %73 : tensor<2xui32>
    %c_18 = stablehlo.constant dense<13> : tensor<ui32>
    %75 = stablehlo.broadcast_in_dim %c_18, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %76 = stablehlo.shift_left %73, %75 : tensor<2xui32>
    %c_19 = stablehlo.constant dense<19> : tensor<ui32>
    %77 = stablehlo.broadcast_in_dim %c_19, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %78 = stablehlo.shift_right_logical %73, %77 : tensor<2xui32>
    %79 = stablehlo.or %76, %78 : tensor<2xui32>
    %80 = stablehlo.xor %74, %79 : tensor<2xui32>
    %81 = stablehlo.add %74, %80 : tensor<2xui32>
    %c_20 = stablehlo.constant dense<15> : tensor<ui32>
    %82 = stablehlo.broadcast_in_dim %c_20, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %83 = stablehlo.shift_left %80, %82 : tensor<2xui32>
    %c_21 = stablehlo.constant dense<17> : tensor<ui32>
    %84 = stablehlo.broadcast_in_dim %c_21, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %85 = stablehlo.shift_right_logical %80, %84 : tensor<2xui32>
    %86 = stablehlo.or %83, %85 : tensor<2xui32>
    %87 = stablehlo.xor %81, %86 : tensor<2xui32>
    %88 = stablehlo.add %81, %87 : tensor<2xui32>
    %c_22 = stablehlo.constant dense<26> : tensor<ui32>
    %89 = stablehlo.broadcast_in_dim %c_22, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %90 = stablehlo.shift_left %87, %89 : tensor<2xui32>
    %c_23 = stablehlo.constant dense<6> : tensor<ui32>
    %91 = stablehlo.broadcast_in_dim %c_23, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %92 = stablehlo.shift_right_logical %87, %91 : tensor<2xui32>
    %93 = stablehlo.or %90, %92 : tensor<2xui32>
    %94 = stablehlo.xor %88, %93 : tensor<2xui32>
    %95 = stablehlo.add %88, %94 : tensor<2xui32>
    %c_24 = stablehlo.constant dense<6> : tensor<ui32>
    %96 = stablehlo.broadcast_in_dim %c_24, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %97 = stablehlo.shift_left %94, %96 : tensor<2xui32>
    %c_25 = stablehlo.constant dense<26> : tensor<ui32>
    %98 = stablehlo.broadcast_in_dim %c_25, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %99 = stablehlo.shift_right_logical %94, %98 : tensor<2xui32>
    %100 = stablehlo.or %97, %99 : tensor<2xui32>
    %101 = stablehlo.xor %95, %100 : tensor<2xui32>
    %102 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %103 = stablehlo.add %95, %102 : tensor<2xui32>
    %104 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %105 = stablehlo.add %101, %104 : tensor<2xui32>
    %c_26 = stablehlo.constant dense<3> : tensor<ui32>
    %106 = stablehlo.broadcast_in_dim %c_26, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %107 = stablehlo.add %105, %106 : tensor<2xui32>
    %108 = stablehlo.add %103, %107 : tensor<2xui32>
    %c_27 = stablehlo.constant dense<17> : tensor<ui32>
    %109 = stablehlo.broadcast_in_dim %c_27, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %110 = stablehlo.shift_left %107, %109 : tensor<2xui32>
    %c_28 = stablehlo.constant dense<15> : tensor<ui32>
    %111 = stablehlo.broadcast_in_dim %c_28, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %112 = stablehlo.shift_right_logical %107, %111 : tensor<2xui32>
    %113 = stablehlo.or %110, %112 : tensor<2xui32>
    %114 = stablehlo.xor %108, %113 : tensor<2xui32>
    %115 = stablehlo.add %108, %114 : tensor<2xui32>
    %c_29 = stablehlo.constant dense<29> : tensor<ui32>
    %116 = stablehlo.broadcast_in_dim %c_29, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %117 = stablehlo.shift_left %114, %116 : tensor<2xui32>
    %c_30 = stablehlo.constant dense<3> : tensor<ui32>
    %118 = stablehlo.broadcast_in_dim %c_30, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %119 = stablehlo.shift_right_logical %114, %118 : tensor<2xui32>
    %120 = stablehlo.or %117, %119 : tensor<2xui32>
    %121 = stablehlo.xor %115, %120 : tensor<2xui32>
    %122 = stablehlo.add %115, %121 : tensor<2xui32>
    %c_31 = stablehlo.constant dense<16> : tensor<ui32>
    %123 = stablehlo.broadcast_in_dim %c_31, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %124 = stablehlo.shift_left %121, %123 : tensor<2xui32>
    %c_32 = stablehlo.constant dense<16> : tensor<ui32>
    %125 = stablehlo.broadcast_in_dim %c_32, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %126 = stablehlo.shift_right_logical %121, %125 : tensor<2xui32>
    %127 = stablehlo.or %124, %126 : tensor<2xui32>
    %128 = stablehlo.xor %122, %127 : tensor<2xui32>
    %129 = stablehlo.add %122, %128 : tensor<2xui32>
    %c_33 = stablehlo.constant dense<24> : tensor<ui32>
    %130 = stablehlo.broadcast_in_dim %c_33, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %131 = stablehlo.shift_left %128, %130 : tensor<2xui32>
    %c_34 = stablehlo.constant dense<8> : tensor<ui32>
    %132 = stablehlo.broadcast_in_dim %c_34, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %133 = stablehlo.shift_right_logical %128, %132 : tensor<2xui32>
    %134 = stablehlo.or %131, %133 : tensor<2xui32>
    %135 = stablehlo.xor %129, %134 : tensor<2xui32>
    %136 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %137 = stablehlo.add %129, %136 : tensor<2xui32>
    %138 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %139 = stablehlo.add %135, %138 : tensor<2xui32>
    %c_35 = stablehlo.constant dense<4> : tensor<ui32>
    %140 = stablehlo.broadcast_in_dim %c_35, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %141 = stablehlo.add %139, %140 : tensor<2xui32>
    %142 = stablehlo.add %137, %141 : tensor<2xui32>
    %c_36 = stablehlo.constant dense<13> : tensor<ui32>
    %143 = stablehlo.broadcast_in_dim %c_36, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %144 = stablehlo.shift_left %141, %143 : tensor<2xui32>
    %c_37 = stablehlo.constant dense<19> : tensor<ui32>
    %145 = stablehlo.broadcast_in_dim %c_37, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %146 = stablehlo.shift_right_logical %141, %145 : tensor<2xui32>
    %147 = stablehlo.or %144, %146 : tensor<2xui32>
    %148 = stablehlo.xor %142, %147 : tensor<2xui32>
    %149 = stablehlo.add %142, %148 : tensor<2xui32>
    %c_38 = stablehlo.constant dense<15> : tensor<ui32>
    %150 = stablehlo.broadcast_in_dim %c_38, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %151 = stablehlo.shift_left %148, %150 : tensor<2xui32>
    %c_39 = stablehlo.constant dense<17> : tensor<ui32>
    %152 = stablehlo.broadcast_in_dim %c_39, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %153 = stablehlo.shift_right_logical %148, %152 : tensor<2xui32>
    %154 = stablehlo.or %151, %153 : tensor<2xui32>
    %155 = stablehlo.xor %149, %154 : tensor<2xui32>
    %156 = stablehlo.add %149, %155 : tensor<2xui32>
    %c_40 = stablehlo.constant dense<26> : tensor<ui32>
    %157 = stablehlo.broadcast_in_dim %c_40, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %158 = stablehlo.shift_left %155, %157 : tensor<2xui32>
    %c_41 = stablehlo.constant dense<6> : tensor<ui32>
    %159 = stablehlo.broadcast_in_dim %c_41, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %160 = stablehlo.shift_right_logical %155, %159 : tensor<2xui32>
    %161 = stablehlo.or %158, %160 : tensor<2xui32>
    %162 = stablehlo.xor %156, %161 : tensor<2xui32>
    %163 = stablehlo.add %156, %162 : tensor<2xui32>
    %c_42 = stablehlo.constant dense<6> : tensor<ui32>
    %164 = stablehlo.broadcast_in_dim %c_42, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %165 = stablehlo.shift_left %162, %164 : tensor<2xui32>
    %c_43 = stablehlo.constant dense<26> : tensor<ui32>
    %166 = stablehlo.broadcast_in_dim %c_43, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %167 = stablehlo.shift_right_logical %162, %166 : tensor<2xui32>
    %168 = stablehlo.or %165, %167 : tensor<2xui32>
    %169 = stablehlo.xor %163, %168 : tensor<2xui32>
    %170 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %171 = stablehlo.add %163, %170 : tensor<2xui32>
    %172 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %173 = stablehlo.add %169, %172 : tensor<2xui32>
    %c_44 = stablehlo.constant dense<5> : tensor<ui32>
    %174 = stablehlo.broadcast_in_dim %c_44, dims = [] : (tensor<ui32>) -> tensor<2xui32>
    %175 = stablehlo.add %173, %174 : tensor<2xui32>
    return %171, %175 : tensor<2xui32>, tensor<2xui32>
  }
  func.func private @_take(%arg0: tensor<50257x768xbf16>, %arg1: tensor<32x1024xi32>) -> (tensor<32x1024x768xbf16>, tensor<32x1024x1xi32>) {
    %c = stablehlo.constant dense<0> : tensor<i32>
    %0 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<32x1024xi32>
    %1 = stablehlo.compare  LT, %arg1, %0,  SIGNED : (tensor<32x1024xi32>, tensor<32x1024xi32>) -> tensor<32x1024xi1>
    %c_0 = stablehlo.constant dense<50257> : tensor<i32>
    %2 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<i32>) -> tensor<32x1024xi32>
    %3 = stablehlo.add %arg1, %2 : tensor<32x1024xi32>
    %4 = call @_where(%1, %3, %arg1) : (tensor<32x1024xi1>, tensor<32x1024xi32>, tensor<32x1024xi32>) -> tensor<32x1024xi32>
    %5 = stablehlo.broadcast_in_dim %4, dims = [0, 1] : (tensor<32x1024xi32>) -> tensor<32x1024x1xi32>
    %c_1 = stablehlo.constant dense<50256> : tensor<1xi32>
    %c_2 = stablehlo.constant dense<0> : tensor<i32>
    %6 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<i32>) -> tensor<32x1024x1xi32>
    %7 = stablehlo.compare  GE, %5, %6,  SIGNED : (tensor<32x1024x1xi32>, tensor<32x1024x1xi32>) -> tensor<32x1024x1xi1>
    %8 = stablehlo.broadcast_in_dim %c_1, dims = [2] : (tensor<1xi32>) -> tensor<1x1x1xi32>
    %9 = stablehlo.broadcast_in_dim %8, dims = [0, 1, 2] : (tensor<1x1x1xi32>) -> tensor<32x1024x1xi32>
    %10 = stablehlo.compare  LE, %5, %9,  SIGNED : (tensor<32x1024x1xi32>, tensor<32x1024x1xi32>) -> tensor<32x1024x1xi1>
    %11 = stablehlo.and %7, %10 : tensor<32x1024x1xi1>
    %c_3 = stablehlo.constant dense<true> : tensor<i1>
    %12 = stablehlo.reduce(%11 init: %c_3) applies stablehlo.and across dimensions = [2] : (tensor<32x1024x1xi1>, tensor<i1>) -> tensor<32x1024xi1>
    %13 = "stablehlo.gather"(%arg0, %5) <{dimension_numbers = #stablehlo.gather<offset_dims = [2], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 2>, indices_are_sorted = false, slice_sizes = array<i64: 1, 768>}> : (tensor<50257x768xbf16>, tensor<32x1024x1xi32>) -> tensor<32x1024x768xbf16>
    %14 = stablehlo.broadcast_in_dim %12, dims = [0, 1] : (tensor<32x1024xi1>) -> tensor<32x1024x768xi1>
    %cst = stablehlo.constant dense<0x7FC0> : tensor<bf16>
    %15 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %16 = stablehlo.select %14, %13, %15 : tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>
    return %16, %5 : tensor<32x1024x768xbf16>, tensor<32x1024x1xi32>
  }
  func.func private @_where(%arg0: tensor<32x1024xi1>, %arg1: tensor<32x1024xi32>, %arg2: tensor<32x1024xi32>) -> tensor<32x1024xi32> {
    %0 = stablehlo.select %arg0, %arg1, %arg2 : tensor<32x1024xi1>, tensor<32x1024xi32>
    return %0 : tensor<32x1024xi32>
  }
  func.func private @_take_18(%arg0: tensor<1024x768xbf16>, %arg1: tensor<1024xi32>) -> (tensor<1024x768xbf16>, tensor<1024x1xi32>) {
    %c = stablehlo.constant dense<0> : tensor<i32>
    %0 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<i32>) -> tensor<1024xi32>
    %1 = stablehlo.compare  LT, %arg1, %0,  SIGNED : (tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi1>
    %c_0 = stablehlo.constant dense<1024> : tensor<i32>
    %2 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<i32>) -> tensor<1024xi32>
    %3 = stablehlo.add %arg1, %2 : tensor<1024xi32>
    %4 = call @_where_20(%1, %3, %arg1) : (tensor<1024xi1>, tensor<1024xi32>, tensor<1024xi32>) -> tensor<1024xi32>
    %5 = stablehlo.broadcast_in_dim %4, dims = [0] : (tensor<1024xi32>) -> tensor<1024x1xi32>
    %c_1 = stablehlo.constant dense<1023> : tensor<1xi32>
    %c_2 = stablehlo.constant dense<0> : tensor<i32>
    %6 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<i32>) -> tensor<1024x1xi32>
    %7 = stablehlo.compare  GE, %5, %6,  SIGNED : (tensor<1024x1xi32>, tensor<1024x1xi32>) -> tensor<1024x1xi1>
    %8 = stablehlo.broadcast_in_dim %c_1, dims = [1] : (tensor<1xi32>) -> tensor<1x1xi32>
    %9 = stablehlo.broadcast_in_dim %8, dims = [0, 1] : (tensor<1x1xi32>) -> tensor<1024x1xi32>
    %10 = stablehlo.compare  LE, %5, %9,  SIGNED : (tensor<1024x1xi32>, tensor<1024x1xi32>) -> tensor<1024x1xi1>
    %11 = stablehlo.and %7, %10 : tensor<1024x1xi1>
    %c_3 = stablehlo.constant dense<true> : tensor<i1>
    %12 = stablehlo.reduce(%11 init: %c_3) applies stablehlo.and across dimensions = [1] : (tensor<1024x1xi1>, tensor<i1>) -> tensor<1024xi1>
    %13 = "stablehlo.gather"(%arg0, %5) <{dimension_numbers = #stablehlo.gather<offset_dims = [1], collapsed_slice_dims = [0], start_index_map = [0], index_vector_dim = 1>, indices_are_sorted = false, slice_sizes = array<i64: 1, 768>}> : (tensor<1024x768xbf16>, tensor<1024x1xi32>) -> tensor<1024x768xbf16>
    %14 = stablehlo.broadcast_in_dim %12, dims = [0] : (tensor<1024xi1>) -> tensor<1024x768xi1>
    %cst = stablehlo.constant dense<0x7FC0> : tensor<bf16>
    %15 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<1024x768xbf16>
    %16 = stablehlo.select %14, %13, %15 : tensor<1024x768xi1>, tensor<1024x768xbf16>
    return %16, %5 : tensor<1024x768xbf16>, tensor<1024x1xi32>
  }
  func.func private @_where_20(%arg0: tensor<1024xi1>, %arg1: tensor<1024xi32>, %arg2: tensor<1024xi32>) -> tensor<1024xi32> {
    %0 = stablehlo.select %arg0, %arg1, %arg2 : tensor<1024xi1>, tensor<1024xi32>
    return %0 : tensor<1024xi32>
  }
  func.func private @_bernoulli(%arg0: tensor<2xui32>, %arg1: tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %0 = call @_uniform(%arg0, %cst, %cst_0) : (tensor<2xui32>, tensor<f32>, tensor<f32>) -> tensor<32x1024x768xf32>
    %1 = stablehlo.compare  LT, %0, %arg1,  FLOAT : (tensor<32x1024x768xf32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    return %1 : tensor<32x1024x768xi1>
  }
  func.func private @_uniform(%arg0: tensor<2xui32>, %arg1: tensor<f32>, %arg2: tensor<f32>) -> tensor<32x1024x768xf32> {
    %0 = stablehlo.convert %arg1 : tensor<f32>
    %1 = stablehlo.convert %arg2 : tensor<f32>
    %2 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<f32>) -> tensor<1x1x1xf32>
    %3 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<f32>) -> tensor<1x1x1xf32>
    %4 = stablehlo.slice %arg0 [0:1] : (tensor<2xui32>) -> tensor<1xui32>
    %5 = stablehlo.reshape %4 : (tensor<1xui32>) -> tensor<ui32>
    %6 = stablehlo.slice %arg0 [1:2] : (tensor<2xui32>) -> tensor<1xui32>
    %7 = stablehlo.reshape %6 : (tensor<1xui32>) -> tensor<ui32>
    %8 = stablehlo.iota dim = 0 : tensor<32x1024x768xui64>
    %9 = stablehlo.iota dim = 1 : tensor<32x1024x768xui64>
    %10 = stablehlo.iota dim = 2 : tensor<32x1024x768xui64>
    %c = stablehlo.constant dense<786432> : tensor<ui64>
    %11 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %12 = stablehlo.multiply %11, %8 : tensor<32x1024x768xui64>
    %c_0 = stablehlo.constant dense<768> : tensor<ui64>
    %13 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %14 = stablehlo.multiply %13, %9 : tensor<32x1024x768xui64>
    %c_1 = stablehlo.constant dense<1> : tensor<ui64>
    %15 = stablehlo.broadcast_in_dim %c_1, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %16 = stablehlo.multiply %15, %10 : tensor<32x1024x768xui64>
    %17 = stablehlo.add %12, %14 : tensor<32x1024x768xui64>
    %18 = stablehlo.add %17, %16 : tensor<32x1024x768xui64>
    %c_2 = stablehlo.constant dense<32> : tensor<ui64>
    %19 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %20 = stablehlo.shift_right_logical %18, %19 : tensor<32x1024x768xui64>
    %21 = stablehlo.convert %18 : (tensor<32x1024x768xui64>) -> tensor<32x1024x768xui32>
    %22 = stablehlo.convert %20 : (tensor<32x1024x768xui64>) -> tensor<32x1024x768xui32>
    %23:2 = call @threefry2x32_40(%5, %7, %22, %21) : (tensor<ui32>, tensor<ui32>, tensor<32x1024x768xui32>, tensor<32x1024x768xui32>) -> (tensor<32x1024x768xui32>, tensor<32x1024x768xui32>)
    %24 = stablehlo.xor %23#0, %23#1 : tensor<32x1024x768xui32>
    %c_3 = stablehlo.constant dense<9> : tensor<ui32>
    %25 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %26 = stablehlo.shift_right_logical %24, %25 : tensor<32x1024x768xui32>
    %c_4 = stablehlo.constant dense<1065353216> : tensor<ui32>
    %27 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %28 = stablehlo.or %26, %27 : tensor<32x1024x768xui32>
    %29 = stablehlo.bitcast_convert %28 : (tensor<32x1024x768xui32>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %30 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %31 = stablehlo.subtract %29, %30 : tensor<32x1024x768xf32>
    %32 = stablehlo.subtract %3, %2 : tensor<1x1x1xf32>
    %33 = stablehlo.broadcast_in_dim %32, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %34 = stablehlo.multiply %31, %33 : tensor<32x1024x768xf32>
    %35 = stablehlo.broadcast_in_dim %2, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %36 = stablehlo.add %34, %35 : tensor<32x1024x768xf32>
    %37 = stablehlo.broadcast_in_dim %2, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %38 = stablehlo.maximum %37, %36 : tensor<32x1024x768xf32>
    return %38 : tensor<32x1024x768xf32>
  }
  func.func private @threefry2x32_40(%arg0: tensor<ui32>, %arg1: tensor<ui32>, %arg2: tensor<32x1024x768xui32>, %arg3: tensor<32x1024x768xui32>) -> (tensor<32x1024x768xui32>, tensor<32x1024x768xui32>) {
    %0 = stablehlo.xor %arg0, %arg1 : tensor<ui32>
    %c = stablehlo.constant dense<466688986> : tensor<ui32>
    %1 = stablehlo.xor %0, %c : tensor<ui32>
    %2 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %3 = stablehlo.add %arg2, %2 : tensor<32x1024x768xui32>
    %4 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %5 = stablehlo.add %arg3, %4 : tensor<32x1024x768xui32>
    %6 = stablehlo.add %3, %5 : tensor<32x1024x768xui32>
    %c_0 = stablehlo.constant dense<13> : tensor<ui32>
    %7 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %8 = stablehlo.shift_left %5, %7 : tensor<32x1024x768xui32>
    %c_1 = stablehlo.constant dense<19> : tensor<ui32>
    %9 = stablehlo.broadcast_in_dim %c_1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %10 = stablehlo.shift_right_logical %5, %9 : tensor<32x1024x768xui32>
    %11 = stablehlo.or %8, %10 : tensor<32x1024x768xui32>
    %12 = stablehlo.xor %6, %11 : tensor<32x1024x768xui32>
    %13 = stablehlo.add %6, %12 : tensor<32x1024x768xui32>
    %c_2 = stablehlo.constant dense<15> : tensor<ui32>
    %14 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %15 = stablehlo.shift_left %12, %14 : tensor<32x1024x768xui32>
    %c_3 = stablehlo.constant dense<17> : tensor<ui32>
    %16 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %17 = stablehlo.shift_right_logical %12, %16 : tensor<32x1024x768xui32>
    %18 = stablehlo.or %15, %17 : tensor<32x1024x768xui32>
    %19 = stablehlo.xor %13, %18 : tensor<32x1024x768xui32>
    %20 = stablehlo.add %13, %19 : tensor<32x1024x768xui32>
    %c_4 = stablehlo.constant dense<26> : tensor<ui32>
    %21 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %22 = stablehlo.shift_left %19, %21 : tensor<32x1024x768xui32>
    %c_5 = stablehlo.constant dense<6> : tensor<ui32>
    %23 = stablehlo.broadcast_in_dim %c_5, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %24 = stablehlo.shift_right_logical %19, %23 : tensor<32x1024x768xui32>
    %25 = stablehlo.or %22, %24 : tensor<32x1024x768xui32>
    %26 = stablehlo.xor %20, %25 : tensor<32x1024x768xui32>
    %27 = stablehlo.add %20, %26 : tensor<32x1024x768xui32>
    %c_6 = stablehlo.constant dense<6> : tensor<ui32>
    %28 = stablehlo.broadcast_in_dim %c_6, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %29 = stablehlo.shift_left %26, %28 : tensor<32x1024x768xui32>
    %c_7 = stablehlo.constant dense<26> : tensor<ui32>
    %30 = stablehlo.broadcast_in_dim %c_7, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %31 = stablehlo.shift_right_logical %26, %30 : tensor<32x1024x768xui32>
    %32 = stablehlo.or %29, %31 : tensor<32x1024x768xui32>
    %33 = stablehlo.xor %27, %32 : tensor<32x1024x768xui32>
    %34 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %35 = stablehlo.add %27, %34 : tensor<32x1024x768xui32>
    %36 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %37 = stablehlo.add %33, %36 : tensor<32x1024x768xui32>
    %c_8 = stablehlo.constant dense<1> : tensor<ui32>
    %38 = stablehlo.broadcast_in_dim %c_8, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %39 = stablehlo.add %37, %38 : tensor<32x1024x768xui32>
    %40 = stablehlo.add %35, %39 : tensor<32x1024x768xui32>
    %c_9 = stablehlo.constant dense<17> : tensor<ui32>
    %41 = stablehlo.broadcast_in_dim %c_9, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %42 = stablehlo.shift_left %39, %41 : tensor<32x1024x768xui32>
    %c_10 = stablehlo.constant dense<15> : tensor<ui32>
    %43 = stablehlo.broadcast_in_dim %c_10, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %44 = stablehlo.shift_right_logical %39, %43 : tensor<32x1024x768xui32>
    %45 = stablehlo.or %42, %44 : tensor<32x1024x768xui32>
    %46 = stablehlo.xor %40, %45 : tensor<32x1024x768xui32>
    %47 = stablehlo.add %40, %46 : tensor<32x1024x768xui32>
    %c_11 = stablehlo.constant dense<29> : tensor<ui32>
    %48 = stablehlo.broadcast_in_dim %c_11, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %49 = stablehlo.shift_left %46, %48 : tensor<32x1024x768xui32>
    %c_12 = stablehlo.constant dense<3> : tensor<ui32>
    %50 = stablehlo.broadcast_in_dim %c_12, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %51 = stablehlo.shift_right_logical %46, %50 : tensor<32x1024x768xui32>
    %52 = stablehlo.or %49, %51 : tensor<32x1024x768xui32>
    %53 = stablehlo.xor %47, %52 : tensor<32x1024x768xui32>
    %54 = stablehlo.add %47, %53 : tensor<32x1024x768xui32>
    %c_13 = stablehlo.constant dense<16> : tensor<ui32>
    %55 = stablehlo.broadcast_in_dim %c_13, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %56 = stablehlo.shift_left %53, %55 : tensor<32x1024x768xui32>
    %c_14 = stablehlo.constant dense<16> : tensor<ui32>
    %57 = stablehlo.broadcast_in_dim %c_14, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %58 = stablehlo.shift_right_logical %53, %57 : tensor<32x1024x768xui32>
    %59 = stablehlo.or %56, %58 : tensor<32x1024x768xui32>
    %60 = stablehlo.xor %54, %59 : tensor<32x1024x768xui32>
    %61 = stablehlo.add %54, %60 : tensor<32x1024x768xui32>
    %c_15 = stablehlo.constant dense<24> : tensor<ui32>
    %62 = stablehlo.broadcast_in_dim %c_15, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %63 = stablehlo.shift_left %60, %62 : tensor<32x1024x768xui32>
    %c_16 = stablehlo.constant dense<8> : tensor<ui32>
    %64 = stablehlo.broadcast_in_dim %c_16, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %65 = stablehlo.shift_right_logical %60, %64 : tensor<32x1024x768xui32>
    %66 = stablehlo.or %63, %65 : tensor<32x1024x768xui32>
    %67 = stablehlo.xor %61, %66 : tensor<32x1024x768xui32>
    %68 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %69 = stablehlo.add %61, %68 : tensor<32x1024x768xui32>
    %70 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %71 = stablehlo.add %67, %70 : tensor<32x1024x768xui32>
    %c_17 = stablehlo.constant dense<2> : tensor<ui32>
    %72 = stablehlo.broadcast_in_dim %c_17, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %73 = stablehlo.add %71, %72 : tensor<32x1024x768xui32>
    %74 = stablehlo.add %69, %73 : tensor<32x1024x768xui32>
    %c_18 = stablehlo.constant dense<13> : tensor<ui32>
    %75 = stablehlo.broadcast_in_dim %c_18, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %76 = stablehlo.shift_left %73, %75 : tensor<32x1024x768xui32>
    %c_19 = stablehlo.constant dense<19> : tensor<ui32>
    %77 = stablehlo.broadcast_in_dim %c_19, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %78 = stablehlo.shift_right_logical %73, %77 : tensor<32x1024x768xui32>
    %79 = stablehlo.or %76, %78 : tensor<32x1024x768xui32>
    %80 = stablehlo.xor %74, %79 : tensor<32x1024x768xui32>
    %81 = stablehlo.add %74, %80 : tensor<32x1024x768xui32>
    %c_20 = stablehlo.constant dense<15> : tensor<ui32>
    %82 = stablehlo.broadcast_in_dim %c_20, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %83 = stablehlo.shift_left %80, %82 : tensor<32x1024x768xui32>
    %c_21 = stablehlo.constant dense<17> : tensor<ui32>
    %84 = stablehlo.broadcast_in_dim %c_21, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %85 = stablehlo.shift_right_logical %80, %84 : tensor<32x1024x768xui32>
    %86 = stablehlo.or %83, %85 : tensor<32x1024x768xui32>
    %87 = stablehlo.xor %81, %86 : tensor<32x1024x768xui32>
    %88 = stablehlo.add %81, %87 : tensor<32x1024x768xui32>
    %c_22 = stablehlo.constant dense<26> : tensor<ui32>
    %89 = stablehlo.broadcast_in_dim %c_22, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %90 = stablehlo.shift_left %87, %89 : tensor<32x1024x768xui32>
    %c_23 = stablehlo.constant dense<6> : tensor<ui32>
    %91 = stablehlo.broadcast_in_dim %c_23, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %92 = stablehlo.shift_right_logical %87, %91 : tensor<32x1024x768xui32>
    %93 = stablehlo.or %90, %92 : tensor<32x1024x768xui32>
    %94 = stablehlo.xor %88, %93 : tensor<32x1024x768xui32>
    %95 = stablehlo.add %88, %94 : tensor<32x1024x768xui32>
    %c_24 = stablehlo.constant dense<6> : tensor<ui32>
    %96 = stablehlo.broadcast_in_dim %c_24, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %97 = stablehlo.shift_left %94, %96 : tensor<32x1024x768xui32>
    %c_25 = stablehlo.constant dense<26> : tensor<ui32>
    %98 = stablehlo.broadcast_in_dim %c_25, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %99 = stablehlo.shift_right_logical %94, %98 : tensor<32x1024x768xui32>
    %100 = stablehlo.or %97, %99 : tensor<32x1024x768xui32>
    %101 = stablehlo.xor %95, %100 : tensor<32x1024x768xui32>
    %102 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %103 = stablehlo.add %95, %102 : tensor<32x1024x768xui32>
    %104 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %105 = stablehlo.add %101, %104 : tensor<32x1024x768xui32>
    %c_26 = stablehlo.constant dense<3> : tensor<ui32>
    %106 = stablehlo.broadcast_in_dim %c_26, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %107 = stablehlo.add %105, %106 : tensor<32x1024x768xui32>
    %108 = stablehlo.add %103, %107 : tensor<32x1024x768xui32>
    %c_27 = stablehlo.constant dense<17> : tensor<ui32>
    %109 = stablehlo.broadcast_in_dim %c_27, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %110 = stablehlo.shift_left %107, %109 : tensor<32x1024x768xui32>
    %c_28 = stablehlo.constant dense<15> : tensor<ui32>
    %111 = stablehlo.broadcast_in_dim %c_28, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %112 = stablehlo.shift_right_logical %107, %111 : tensor<32x1024x768xui32>
    %113 = stablehlo.or %110, %112 : tensor<32x1024x768xui32>
    %114 = stablehlo.xor %108, %113 : tensor<32x1024x768xui32>
    %115 = stablehlo.add %108, %114 : tensor<32x1024x768xui32>
    %c_29 = stablehlo.constant dense<29> : tensor<ui32>
    %116 = stablehlo.broadcast_in_dim %c_29, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %117 = stablehlo.shift_left %114, %116 : tensor<32x1024x768xui32>
    %c_30 = stablehlo.constant dense<3> : tensor<ui32>
    %118 = stablehlo.broadcast_in_dim %c_30, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %119 = stablehlo.shift_right_logical %114, %118 : tensor<32x1024x768xui32>
    %120 = stablehlo.or %117, %119 : tensor<32x1024x768xui32>
    %121 = stablehlo.xor %115, %120 : tensor<32x1024x768xui32>
    %122 = stablehlo.add %115, %121 : tensor<32x1024x768xui32>
    %c_31 = stablehlo.constant dense<16> : tensor<ui32>
    %123 = stablehlo.broadcast_in_dim %c_31, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %124 = stablehlo.shift_left %121, %123 : tensor<32x1024x768xui32>
    %c_32 = stablehlo.constant dense<16> : tensor<ui32>
    %125 = stablehlo.broadcast_in_dim %c_32, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %126 = stablehlo.shift_right_logical %121, %125 : tensor<32x1024x768xui32>
    %127 = stablehlo.or %124, %126 : tensor<32x1024x768xui32>
    %128 = stablehlo.xor %122, %127 : tensor<32x1024x768xui32>
    %129 = stablehlo.add %122, %128 : tensor<32x1024x768xui32>
    %c_33 = stablehlo.constant dense<24> : tensor<ui32>
    %130 = stablehlo.broadcast_in_dim %c_33, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %131 = stablehlo.shift_left %128, %130 : tensor<32x1024x768xui32>
    %c_34 = stablehlo.constant dense<8> : tensor<ui32>
    %132 = stablehlo.broadcast_in_dim %c_34, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %133 = stablehlo.shift_right_logical %128, %132 : tensor<32x1024x768xui32>
    %134 = stablehlo.or %131, %133 : tensor<32x1024x768xui32>
    %135 = stablehlo.xor %129, %134 : tensor<32x1024x768xui32>
    %136 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %137 = stablehlo.add %129, %136 : tensor<32x1024x768xui32>
    %138 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %139 = stablehlo.add %135, %138 : tensor<32x1024x768xui32>
    %c_35 = stablehlo.constant dense<4> : tensor<ui32>
    %140 = stablehlo.broadcast_in_dim %c_35, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %141 = stablehlo.add %139, %140 : tensor<32x1024x768xui32>
    %142 = stablehlo.add %137, %141 : tensor<32x1024x768xui32>
    %c_36 = stablehlo.constant dense<13> : tensor<ui32>
    %143 = stablehlo.broadcast_in_dim %c_36, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %144 = stablehlo.shift_left %141, %143 : tensor<32x1024x768xui32>
    %c_37 = stablehlo.constant dense<19> : tensor<ui32>
    %145 = stablehlo.broadcast_in_dim %c_37, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %146 = stablehlo.shift_right_logical %141, %145 : tensor<32x1024x768xui32>
    %147 = stablehlo.or %144, %146 : tensor<32x1024x768xui32>
    %148 = stablehlo.xor %142, %147 : tensor<32x1024x768xui32>
    %149 = stablehlo.add %142, %148 : tensor<32x1024x768xui32>
    %c_38 = stablehlo.constant dense<15> : tensor<ui32>
    %150 = stablehlo.broadcast_in_dim %c_38, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %151 = stablehlo.shift_left %148, %150 : tensor<32x1024x768xui32>
    %c_39 = stablehlo.constant dense<17> : tensor<ui32>
    %152 = stablehlo.broadcast_in_dim %c_39, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %153 = stablehlo.shift_right_logical %148, %152 : tensor<32x1024x768xui32>
    %154 = stablehlo.or %151, %153 : tensor<32x1024x768xui32>
    %155 = stablehlo.xor %149, %154 : tensor<32x1024x768xui32>
    %156 = stablehlo.add %149, %155 : tensor<32x1024x768xui32>
    %c_40 = stablehlo.constant dense<26> : tensor<ui32>
    %157 = stablehlo.broadcast_in_dim %c_40, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %158 = stablehlo.shift_left %155, %157 : tensor<32x1024x768xui32>
    %c_41 = stablehlo.constant dense<6> : tensor<ui32>
    %159 = stablehlo.broadcast_in_dim %c_41, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %160 = stablehlo.shift_right_logical %155, %159 : tensor<32x1024x768xui32>
    %161 = stablehlo.or %158, %160 : tensor<32x1024x768xui32>
    %162 = stablehlo.xor %156, %161 : tensor<32x1024x768xui32>
    %163 = stablehlo.add %156, %162 : tensor<32x1024x768xui32>
    %c_42 = stablehlo.constant dense<6> : tensor<ui32>
    %164 = stablehlo.broadcast_in_dim %c_42, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %165 = stablehlo.shift_left %162, %164 : tensor<32x1024x768xui32>
    %c_43 = stablehlo.constant dense<26> : tensor<ui32>
    %166 = stablehlo.broadcast_in_dim %c_43, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %167 = stablehlo.shift_right_logical %162, %166 : tensor<32x1024x768xui32>
    %168 = stablehlo.or %165, %167 : tensor<32x1024x768xui32>
    %169 = stablehlo.xor %163, %168 : tensor<32x1024x768xui32>
    %170 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %171 = stablehlo.add %163, %170 : tensor<32x1024x768xui32>
    %172 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %173 = stablehlo.add %169, %172 : tensor<32x1024x768xui32>
    %c_44 = stablehlo.constant dense<5> : tensor<ui32>
    %174 = stablehlo.broadcast_in_dim %c_44, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %175 = stablehlo.add %173, %174 : tensor<32x1024x768xui32>
    return %171, %175 : tensor<32x1024x768xui32>, tensor<32x1024x768xui32>
  }
  func.func private @_where_56(%arg0: tensor<32x1024x768xi1>, %arg1: tensor<32x1024x768xbf16>, %arg2: tensor<i32>) -> tensor<32x1024x768xbf16> {
    %0 = stablehlo.convert %arg2 : (tensor<i32>) -> tensor<bf16>
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %2 = stablehlo.select %arg0, %arg1, %1 : tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>
    return %2 : tensor<32x1024x768xbf16>
  }
  func.func private @_threefry_split_60(%arg0: tensor<2xui32>) -> tensor<12x2xui32> {
    %0 = stablehlo.slice %arg0 [0:1] : (tensor<2xui32>) -> tensor<1xui32>
    %1 = stablehlo.reshape %0 : (tensor<1xui32>) -> tensor<ui32>
    %2 = stablehlo.slice %arg0 [1:2] : (tensor<2xui32>) -> tensor<1xui32>
    %3 = stablehlo.reshape %2 : (tensor<1xui32>) -> tensor<ui32>
    %4 = stablehlo.iota dim = 0 : tensor<12xui64>
    %c = stablehlo.constant dense<1> : tensor<ui64>
    %5 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<ui64>) -> tensor<12xui64>
    %6 = stablehlo.multiply %5, %4 : tensor<12xui64>
    %c_0 = stablehlo.constant dense<32> : tensor<ui64>
    %7 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui64>) -> tensor<12xui64>
    %8 = stablehlo.shift_right_logical %6, %7 : tensor<12xui64>
    %9 = stablehlo.convert %6 : (tensor<12xui64>) -> tensor<12xui32>
    %10 = stablehlo.convert %8 : (tensor<12xui64>) -> tensor<12xui32>
    %11:2 = call @threefry2x32_62(%1, %3, %10, %9) : (tensor<ui32>, tensor<ui32>, tensor<12xui32>, tensor<12xui32>) -> (tensor<12xui32>, tensor<12xui32>)
    %12 = stablehlo.broadcast_in_dim %11#0, dims = [0] : (tensor<12xui32>) -> tensor<12x1xui32>
    %13 = stablehlo.broadcast_in_dim %11#1, dims = [0] : (tensor<12xui32>) -> tensor<12x1xui32>
    %14 = stablehlo.concatenate %12, %13, dim = 1 : (tensor<12x1xui32>, tensor<12x1xui32>) -> tensor<12x2xui32>
    return %14 : tensor<12x2xui32>
  }
  func.func private @threefry2x32_62(%arg0: tensor<ui32>, %arg1: tensor<ui32>, %arg2: tensor<12xui32>, %arg3: tensor<12xui32>) -> (tensor<12xui32>, tensor<12xui32>) {
    %0 = stablehlo.xor %arg0, %arg1 : tensor<ui32>
    %c = stablehlo.constant dense<466688986> : tensor<ui32>
    %1 = stablehlo.xor %0, %c : tensor<ui32>
    %2 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %3 = stablehlo.add %arg2, %2 : tensor<12xui32>
    %4 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %5 = stablehlo.add %arg3, %4 : tensor<12xui32>
    %6 = stablehlo.add %3, %5 : tensor<12xui32>
    %c_0 = stablehlo.constant dense<13> : tensor<ui32>
    %7 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %8 = stablehlo.shift_left %5, %7 : tensor<12xui32>
    %c_1 = stablehlo.constant dense<19> : tensor<ui32>
    %9 = stablehlo.broadcast_in_dim %c_1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %10 = stablehlo.shift_right_logical %5, %9 : tensor<12xui32>
    %11 = stablehlo.or %8, %10 : tensor<12xui32>
    %12 = stablehlo.xor %6, %11 : tensor<12xui32>
    %13 = stablehlo.add %6, %12 : tensor<12xui32>
    %c_2 = stablehlo.constant dense<15> : tensor<ui32>
    %14 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %15 = stablehlo.shift_left %12, %14 : tensor<12xui32>
    %c_3 = stablehlo.constant dense<17> : tensor<ui32>
    %16 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %17 = stablehlo.shift_right_logical %12, %16 : tensor<12xui32>
    %18 = stablehlo.or %15, %17 : tensor<12xui32>
    %19 = stablehlo.xor %13, %18 : tensor<12xui32>
    %20 = stablehlo.add %13, %19 : tensor<12xui32>
    %c_4 = stablehlo.constant dense<26> : tensor<ui32>
    %21 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %22 = stablehlo.shift_left %19, %21 : tensor<12xui32>
    %c_5 = stablehlo.constant dense<6> : tensor<ui32>
    %23 = stablehlo.broadcast_in_dim %c_5, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %24 = stablehlo.shift_right_logical %19, %23 : tensor<12xui32>
    %25 = stablehlo.or %22, %24 : tensor<12xui32>
    %26 = stablehlo.xor %20, %25 : tensor<12xui32>
    %27 = stablehlo.add %20, %26 : tensor<12xui32>
    %c_6 = stablehlo.constant dense<6> : tensor<ui32>
    %28 = stablehlo.broadcast_in_dim %c_6, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %29 = stablehlo.shift_left %26, %28 : tensor<12xui32>
    %c_7 = stablehlo.constant dense<26> : tensor<ui32>
    %30 = stablehlo.broadcast_in_dim %c_7, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %31 = stablehlo.shift_right_logical %26, %30 : tensor<12xui32>
    %32 = stablehlo.or %29, %31 : tensor<12xui32>
    %33 = stablehlo.xor %27, %32 : tensor<12xui32>
    %34 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %35 = stablehlo.add %27, %34 : tensor<12xui32>
    %36 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %37 = stablehlo.add %33, %36 : tensor<12xui32>
    %c_8 = stablehlo.constant dense<1> : tensor<ui32>
    %38 = stablehlo.broadcast_in_dim %c_8, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %39 = stablehlo.add %37, %38 : tensor<12xui32>
    %40 = stablehlo.add %35, %39 : tensor<12xui32>
    %c_9 = stablehlo.constant dense<17> : tensor<ui32>
    %41 = stablehlo.broadcast_in_dim %c_9, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %42 = stablehlo.shift_left %39, %41 : tensor<12xui32>
    %c_10 = stablehlo.constant dense<15> : tensor<ui32>
    %43 = stablehlo.broadcast_in_dim %c_10, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %44 = stablehlo.shift_right_logical %39, %43 : tensor<12xui32>
    %45 = stablehlo.or %42, %44 : tensor<12xui32>
    %46 = stablehlo.xor %40, %45 : tensor<12xui32>
    %47 = stablehlo.add %40, %46 : tensor<12xui32>
    %c_11 = stablehlo.constant dense<29> : tensor<ui32>
    %48 = stablehlo.broadcast_in_dim %c_11, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %49 = stablehlo.shift_left %46, %48 : tensor<12xui32>
    %c_12 = stablehlo.constant dense<3> : tensor<ui32>
    %50 = stablehlo.broadcast_in_dim %c_12, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %51 = stablehlo.shift_right_logical %46, %50 : tensor<12xui32>
    %52 = stablehlo.or %49, %51 : tensor<12xui32>
    %53 = stablehlo.xor %47, %52 : tensor<12xui32>
    %54 = stablehlo.add %47, %53 : tensor<12xui32>
    %c_13 = stablehlo.constant dense<16> : tensor<ui32>
    %55 = stablehlo.broadcast_in_dim %c_13, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %56 = stablehlo.shift_left %53, %55 : tensor<12xui32>
    %c_14 = stablehlo.constant dense<16> : tensor<ui32>
    %57 = stablehlo.broadcast_in_dim %c_14, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %58 = stablehlo.shift_right_logical %53, %57 : tensor<12xui32>
    %59 = stablehlo.or %56, %58 : tensor<12xui32>
    %60 = stablehlo.xor %54, %59 : tensor<12xui32>
    %61 = stablehlo.add %54, %60 : tensor<12xui32>
    %c_15 = stablehlo.constant dense<24> : tensor<ui32>
    %62 = stablehlo.broadcast_in_dim %c_15, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %63 = stablehlo.shift_left %60, %62 : tensor<12xui32>
    %c_16 = stablehlo.constant dense<8> : tensor<ui32>
    %64 = stablehlo.broadcast_in_dim %c_16, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %65 = stablehlo.shift_right_logical %60, %64 : tensor<12xui32>
    %66 = stablehlo.or %63, %65 : tensor<12xui32>
    %67 = stablehlo.xor %61, %66 : tensor<12xui32>
    %68 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %69 = stablehlo.add %61, %68 : tensor<12xui32>
    %70 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %71 = stablehlo.add %67, %70 : tensor<12xui32>
    %c_17 = stablehlo.constant dense<2> : tensor<ui32>
    %72 = stablehlo.broadcast_in_dim %c_17, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %73 = stablehlo.add %71, %72 : tensor<12xui32>
    %74 = stablehlo.add %69, %73 : tensor<12xui32>
    %c_18 = stablehlo.constant dense<13> : tensor<ui32>
    %75 = stablehlo.broadcast_in_dim %c_18, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %76 = stablehlo.shift_left %73, %75 : tensor<12xui32>
    %c_19 = stablehlo.constant dense<19> : tensor<ui32>
    %77 = stablehlo.broadcast_in_dim %c_19, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %78 = stablehlo.shift_right_logical %73, %77 : tensor<12xui32>
    %79 = stablehlo.or %76, %78 : tensor<12xui32>
    %80 = stablehlo.xor %74, %79 : tensor<12xui32>
    %81 = stablehlo.add %74, %80 : tensor<12xui32>
    %c_20 = stablehlo.constant dense<15> : tensor<ui32>
    %82 = stablehlo.broadcast_in_dim %c_20, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %83 = stablehlo.shift_left %80, %82 : tensor<12xui32>
    %c_21 = stablehlo.constant dense<17> : tensor<ui32>
    %84 = stablehlo.broadcast_in_dim %c_21, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %85 = stablehlo.shift_right_logical %80, %84 : tensor<12xui32>
    %86 = stablehlo.or %83, %85 : tensor<12xui32>
    %87 = stablehlo.xor %81, %86 : tensor<12xui32>
    %88 = stablehlo.add %81, %87 : tensor<12xui32>
    %c_22 = stablehlo.constant dense<26> : tensor<ui32>
    %89 = stablehlo.broadcast_in_dim %c_22, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %90 = stablehlo.shift_left %87, %89 : tensor<12xui32>
    %c_23 = stablehlo.constant dense<6> : tensor<ui32>
    %91 = stablehlo.broadcast_in_dim %c_23, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %92 = stablehlo.shift_right_logical %87, %91 : tensor<12xui32>
    %93 = stablehlo.or %90, %92 : tensor<12xui32>
    %94 = stablehlo.xor %88, %93 : tensor<12xui32>
    %95 = stablehlo.add %88, %94 : tensor<12xui32>
    %c_24 = stablehlo.constant dense<6> : tensor<ui32>
    %96 = stablehlo.broadcast_in_dim %c_24, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %97 = stablehlo.shift_left %94, %96 : tensor<12xui32>
    %c_25 = stablehlo.constant dense<26> : tensor<ui32>
    %98 = stablehlo.broadcast_in_dim %c_25, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %99 = stablehlo.shift_right_logical %94, %98 : tensor<12xui32>
    %100 = stablehlo.or %97, %99 : tensor<12xui32>
    %101 = stablehlo.xor %95, %100 : tensor<12xui32>
    %102 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %103 = stablehlo.add %95, %102 : tensor<12xui32>
    %104 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %105 = stablehlo.add %101, %104 : tensor<12xui32>
    %c_26 = stablehlo.constant dense<3> : tensor<ui32>
    %106 = stablehlo.broadcast_in_dim %c_26, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %107 = stablehlo.add %105, %106 : tensor<12xui32>
    %108 = stablehlo.add %103, %107 : tensor<12xui32>
    %c_27 = stablehlo.constant dense<17> : tensor<ui32>
    %109 = stablehlo.broadcast_in_dim %c_27, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %110 = stablehlo.shift_left %107, %109 : tensor<12xui32>
    %c_28 = stablehlo.constant dense<15> : tensor<ui32>
    %111 = stablehlo.broadcast_in_dim %c_28, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %112 = stablehlo.shift_right_logical %107, %111 : tensor<12xui32>
    %113 = stablehlo.or %110, %112 : tensor<12xui32>
    %114 = stablehlo.xor %108, %113 : tensor<12xui32>
    %115 = stablehlo.add %108, %114 : tensor<12xui32>
    %c_29 = stablehlo.constant dense<29> : tensor<ui32>
    %116 = stablehlo.broadcast_in_dim %c_29, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %117 = stablehlo.shift_left %114, %116 : tensor<12xui32>
    %c_30 = stablehlo.constant dense<3> : tensor<ui32>
    %118 = stablehlo.broadcast_in_dim %c_30, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %119 = stablehlo.shift_right_logical %114, %118 : tensor<12xui32>
    %120 = stablehlo.or %117, %119 : tensor<12xui32>
    %121 = stablehlo.xor %115, %120 : tensor<12xui32>
    %122 = stablehlo.add %115, %121 : tensor<12xui32>
    %c_31 = stablehlo.constant dense<16> : tensor<ui32>
    %123 = stablehlo.broadcast_in_dim %c_31, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %124 = stablehlo.shift_left %121, %123 : tensor<12xui32>
    %c_32 = stablehlo.constant dense<16> : tensor<ui32>
    %125 = stablehlo.broadcast_in_dim %c_32, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %126 = stablehlo.shift_right_logical %121, %125 : tensor<12xui32>
    %127 = stablehlo.or %124, %126 : tensor<12xui32>
    %128 = stablehlo.xor %122, %127 : tensor<12xui32>
    %129 = stablehlo.add %122, %128 : tensor<12xui32>
    %c_33 = stablehlo.constant dense<24> : tensor<ui32>
    %130 = stablehlo.broadcast_in_dim %c_33, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %131 = stablehlo.shift_left %128, %130 : tensor<12xui32>
    %c_34 = stablehlo.constant dense<8> : tensor<ui32>
    %132 = stablehlo.broadcast_in_dim %c_34, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %133 = stablehlo.shift_right_logical %128, %132 : tensor<12xui32>
    %134 = stablehlo.or %131, %133 : tensor<12xui32>
    %135 = stablehlo.xor %129, %134 : tensor<12xui32>
    %136 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %137 = stablehlo.add %129, %136 : tensor<12xui32>
    %138 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %139 = stablehlo.add %135, %138 : tensor<12xui32>
    %c_35 = stablehlo.constant dense<4> : tensor<ui32>
    %140 = stablehlo.broadcast_in_dim %c_35, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %141 = stablehlo.add %139, %140 : tensor<12xui32>
    %142 = stablehlo.add %137, %141 : tensor<12xui32>
    %c_36 = stablehlo.constant dense<13> : tensor<ui32>
    %143 = stablehlo.broadcast_in_dim %c_36, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %144 = stablehlo.shift_left %141, %143 : tensor<12xui32>
    %c_37 = stablehlo.constant dense<19> : tensor<ui32>
    %145 = stablehlo.broadcast_in_dim %c_37, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %146 = stablehlo.shift_right_logical %141, %145 : tensor<12xui32>
    %147 = stablehlo.or %144, %146 : tensor<12xui32>
    %148 = stablehlo.xor %142, %147 : tensor<12xui32>
    %149 = stablehlo.add %142, %148 : tensor<12xui32>
    %c_38 = stablehlo.constant dense<15> : tensor<ui32>
    %150 = stablehlo.broadcast_in_dim %c_38, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %151 = stablehlo.shift_left %148, %150 : tensor<12xui32>
    %c_39 = stablehlo.constant dense<17> : tensor<ui32>
    %152 = stablehlo.broadcast_in_dim %c_39, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %153 = stablehlo.shift_right_logical %148, %152 : tensor<12xui32>
    %154 = stablehlo.or %151, %153 : tensor<12xui32>
    %155 = stablehlo.xor %149, %154 : tensor<12xui32>
    %156 = stablehlo.add %149, %155 : tensor<12xui32>
    %c_40 = stablehlo.constant dense<26> : tensor<ui32>
    %157 = stablehlo.broadcast_in_dim %c_40, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %158 = stablehlo.shift_left %155, %157 : tensor<12xui32>
    %c_41 = stablehlo.constant dense<6> : tensor<ui32>
    %159 = stablehlo.broadcast_in_dim %c_41, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %160 = stablehlo.shift_right_logical %155, %159 : tensor<12xui32>
    %161 = stablehlo.or %158, %160 : tensor<12xui32>
    %162 = stablehlo.xor %156, %161 : tensor<12xui32>
    %163 = stablehlo.add %156, %162 : tensor<12xui32>
    %c_42 = stablehlo.constant dense<6> : tensor<ui32>
    %164 = stablehlo.broadcast_in_dim %c_42, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %165 = stablehlo.shift_left %162, %164 : tensor<12xui32>
    %c_43 = stablehlo.constant dense<26> : tensor<ui32>
    %166 = stablehlo.broadcast_in_dim %c_43, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %167 = stablehlo.shift_right_logical %162, %166 : tensor<12xui32>
    %168 = stablehlo.or %165, %167 : tensor<12xui32>
    %169 = stablehlo.xor %163, %168 : tensor<12xui32>
    %170 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %171 = stablehlo.add %163, %170 : tensor<12xui32>
    %172 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %173 = stablehlo.add %169, %172 : tensor<12xui32>
    %c_44 = stablehlo.constant dense<5> : tensor<ui32>
    %174 = stablehlo.broadcast_in_dim %c_44, dims = [] : (tensor<ui32>) -> tensor<12xui32>
    %175 = stablehlo.add %173, %174 : tensor<12xui32>
    return %171, %175 : tensor<12xui32>, tensor<12xui32>
  }
  func.func private @_var(%arg0: tensor<i32>) -> (tensor<f32>, tensor<i1>, tensor<32x1024xbf16>) {
    %0 = stablehlo.convert %arg0 : (tensor<i32>) -> tensor<f32>
    %cst = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %1 = stablehlo.subtract %cst, %0 : tensor<f32>
    %cst_0 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %2 = stablehlo.compare  GT, %1, %cst_0,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1>
    %cst_1 = stablehlo.constant dense<0x7FC00000> : tensor<f32>
    %3 = call @_where_76(%cst_1) : (tensor<f32>) -> tensor<32x1024xbf16>
    return %1, %2, %3 : tensor<f32>, tensor<i1>, tensor<32x1024xbf16>
  }
  func.func private @_where_76(%arg0: tensor<f32>) -> tensor<32x1024xbf16> {
    %0 = stablehlo.convert %arg0 : (tensor<f32>) -> tensor<bf16>
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    return %1 : tensor<32x1024xbf16>
  }
  func.func private @_take_79(%arg0: tensor<i32>) -> tensor<1xi32> {
    %c = stablehlo.constant dense<0> : tensor<i32>
    %0 = stablehlo.compare  LT, %arg0, %c,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %c_0 = stablehlo.constant dense<3> : tensor<i32>
    %1 = stablehlo.add %arg0, %c_0 : tensor<i32>
    %2 = call @_where_82(%0, %1, %arg0) : (tensor<i1>, tensor<i32>, tensor<i32>) -> tensor<i32>
    %3 = stablehlo.broadcast_in_dim %2, dims = [] : (tensor<i32>) -> tensor<1xi32>
    return %3 : tensor<1xi32>
  }
  func.func private @_where_82(%arg0: tensor<i1>, %arg1: tensor<i32>, %arg2: tensor<i32>) -> tensor<i32> {
    %0 = stablehlo.select %arg0, %arg1, %arg2 : tensor<i1>, tensor<i32>
    return %0 : tensor<i32>
  }
  func.func private @_splash_attention(%arg0: tensor<1024xi32>, %arg1: tensor<8x1024xi32>, %arg2: tensor<8x1024xi32>) -> (tensor<8x1024x128xi32>, tensor<8x8x1024xi32>, tensor<1024x128xi32>) {
    %0 = stablehlo.broadcast_in_dim %arg1, dims = [0, 1] : (tensor<8x1024xi32>) -> tensor<8x1024x128xi32>
    %1 = stablehlo.broadcast_in_dim %arg2, dims = [0, 2] : (tensor<8x1024xi32>) -> tensor<8x8x1024xi32>
    %2 = stablehlo.broadcast_in_dim %arg0, dims = [0] : (tensor<1024xi32>) -> tensor<1024x128xi32>
    return %0, %1, %2 : tensor<8x1024x128xi32>, tensor<8x8x1024xi32>, tensor<1024x128xi32>
  }
  func.func private @_bernoulli_88() -> (tensor<1x1x1xf32>, tensor<1x1x1xf32>) {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %0:2 = call @_uniform_89(%cst, %cst_0) : (tensor<f32>, tensor<f32>) -> (tensor<1x1x1xf32>, tensor<1x1x1xf32>)
    return %0#0, %0#1 : tensor<1x1x1xf32>, tensor<1x1x1xf32>
  }
  func.func private @_uniform_89(%arg0: tensor<f32>, %arg1: tensor<f32>) -> (tensor<1x1x1xf32>, tensor<1x1x1xf32>) {
    %0 = stablehlo.convert %arg0 : tensor<f32>
    %1 = stablehlo.convert %arg1 : tensor<f32>
    %2 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<f32>) -> tensor<1x1x1xf32>
    %3 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<f32>) -> tensor<1x1x1xf32>
    %4 = stablehlo.subtract %3, %2 : tensor<1x1x1xf32>
    return %2, %4 : tensor<1x1x1xf32>, tensor<1x1x1xf32>
  }
  func.func private @_where_90(%arg0: tensor<i32>) -> tensor<32x1024x768xbf16> {
    %0 = stablehlo.convert %arg0 : (tensor<i32>) -> tensor<bf16>
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    return %1 : tensor<32x1024x768xbf16>
  }
  func.func private @closed_call(%arg0: tensor<1x1x1xf32>, %arg1: tensor<1x1x1xf32>, %arg2: tensor<32x1024x768xf32>, %arg3: tensor<1x1x1xf32>, %arg4: tensor<1x1x1xf32>, %arg5: tensor<32x1024x768xf32>, %arg6: tensor<1x2x2xi8>, %arg7: tensor<1x2x2xi8>, %arg8: tensor<32x1024x128xi32>, %arg9: tensor<32x8x1024xi32>, %arg10: tensor<4096x128xi32>, %arg11: tensor<f32>, %arg12: tensor<i1>, %arg13: tensor<32x1024xbf16>, %arg14: tensor<1xi32>, %arg15: tensor<1xi32>, %arg16: tensor<1xi32>, %arg17: tensor<32x1024x768xbf16>, %arg18: tensor<f32>, %arg19: tensor<i1>, %arg20: tensor<32x1024xbf16>, %arg21: tensor<32x1024x768xbf16>, %arg22: tensor<32x1024x768xbf16>, %arg23: tensor<768xbf16>, %arg24: tensor<768xbf16>, %arg25: tensor<768x3x12x64xbf16>, %arg26: tensor<3x12x64xbf16>, %arg27: tensor<12x64x768xbf16>, %arg28: tensor<768xbf16>, %arg29: tensor<768xbf16>, %arg30: tensor<768xbf16>, %arg31: tensor<768x3072xbf16>, %arg32: tensor<3072xbf16>, %arg33: tensor<3072x768xbf16>, %arg34: tensor<768xbf16>, %arg35: tensor<2xui32>) -> (tensor<32x1024x768xbf16>, tensor<32x1024x768xbf16>) {
    %0 = call @_threefry_split_115(%arg35) : (tensor<2xui32>) -> tensor<4x2xui32>
    %1 = stablehlo.slice %0 [1:2, 0:2] : (tensor<4x2xui32>) -> tensor<1x2xui32>
    %2 = stablehlo.reshape %1 : (tensor<1x2xui32>) -> tensor<2xui32>
    %3 = stablehlo.slice %0 [3:4, 0:2] : (tensor<4x2xui32>) -> tensor<1x2xui32>
    %4 = stablehlo.reshape %3 : (tensor<1x2xui32>) -> tensor<2xui32>
    %5 = stablehlo.convert %arg22 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %6 = stablehlo.reduce(%5 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %cst_0 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %7 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %8 = stablehlo.divide %6, %7 : tensor<32x1024xf32>
    %9 = stablehlo.convert %8 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %10 = call @_var_134(%arg22, %arg11, %arg12, %arg13) : (tensor<32x1024x768xbf16>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024xbf16>
    %cst_1 = stablehlo.constant dense<1.001360e-05> : tensor<bf16>
    %11 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %12 = stablehlo.add %10, %11 : tensor<32x1024xbf16>
    %13 = stablehlo.rsqrt %12 : tensor<32x1024xbf16>
    %14 = stablehlo.broadcast_in_dim %9, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %15 = stablehlo.transpose %14, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %16 = stablehlo.subtract %arg22, %15 : tensor<32x1024x768xbf16>
    %17 = stablehlo.broadcast_in_dim %13, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %18 = stablehlo.transpose %17, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %19 = stablehlo.multiply %16, %18 : tensor<32x1024x768xbf16>
    %20 = stablehlo.broadcast_in_dim %arg23, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %21 = stablehlo.multiply %20, %19 : tensor<32x1024x768xbf16>
    %22 = stablehlo.broadcast_in_dim %arg24, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %23 = stablehlo.add %21, %22 : tensor<32x1024x768xbf16>
    %cst_2 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %24 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<bf16>) -> tensor<768x3x12x64xbf16>
    %25 = stablehlo.multiply %arg25, %24 : tensor<768x3x12x64xbf16>
    %26 = stablehlo.dot_general %23, %25, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<768x3x12x64xbf16>) -> tensor<32x1024x3x12x64xbf16>
    %27 = sdy.sharding_constraint %26 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %28 = sdy.sharding_constraint %27 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %29 = stablehlo.broadcast_in_dim %arg26, dims = [2, 3, 4] : (tensor<3x12x64xbf16>) -> tensor<32x1024x3x12x64xbf16>
    %30 = stablehlo.add %28, %29 : tensor<32x1024x3x12x64xbf16>
    %31 = sdy.sharding_constraint %30 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %32 = stablehlo.transpose %31, dims = [0, 2, 3, 1, 4] : (tensor<32x1024x3x12x64xbf16>) -> tensor<32x3x12x1024x64xbf16>
    %33 = call @_take_151(%32, %arg14) : (tensor<32x3x12x1024x64xbf16>, tensor<1xi32>) -> tensor<32x12x1024x64xbf16>
    %34 = call @_take_151(%32, %arg15) : (tensor<32x3x12x1024x64xbf16>, tensor<1xi32>) -> tensor<32x12x1024x64xbf16>
    %35 = call @_take_151(%32, %arg16) : (tensor<32x3x12x1024x64xbf16>, tensor<1xi32>) -> tensor<32x12x1024x64xbf16>
    %36 = sdy.sharding_constraint %33 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %37 = sdy.sharding_constraint %34 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %38 = sdy.sharding_constraint %35 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %cst_3 = stablehlo.constant dense<1.250000e-01> : tensor<bf16>
    %39 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<bf16>) -> tensor<32x12x1024x64xbf16>
    %40 = stablehlo.multiply %36, %39 : tensor<32x12x1024x64xbf16>
    %41 = sdy.manual_computation(%arg6, %arg7, %arg8, %arg9, %arg10, %40, %37, %38) in_shardings=[<@mesh, [{}, {}, {}]>, <@mesh, [{}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>] out_shardings=[<@mesh, [{"replica", "data"}, {"model"}, {}, {}]>] manual_axes={"replica", "data", "model"} (%arg36: tensor<1x2x2xi8>, %arg37: tensor<1x2x2xi8>, %arg38: tensor<8x1024x128xi32>, %arg39: tensor<8x8x1024xi32>, %arg40: tensor<1024x128xi32>, %arg41: tensor<8x12x1024x64xbf16>, %arg42: tensor<8x12x1024x64xbf16>, %arg43: tensor<8x12x1024x64xbf16>) {
      %112 = stablehlo.convert %arg41 : (tensor<8x12x1024x64xbf16>) -> tensor<8x12x1024x64xf32>
      %113 = stablehlo.convert %arg42 : (tensor<8x12x1024x64xbf16>) -> tensor<8x12x1024x64xf32>
      %114 = stablehlo.convert %arg43 : (tensor<8x12x1024x64xbf16>) -> tensor<8x12x1024x64xf32>
      %115 = func.call @_splash_attention_166(%112, %113, %114, %arg36, %arg37, %arg38, %arg39, %arg40) : (tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<8x1024x128xi32>, tensor<8x8x1024xi32>, tensor<1024x128xi32>) -> tensor<8x12x1024x64xf32>
      sdy.return %115 : tensor<8x12x1024x64xf32>
    } : (tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<32x1024x128xi32>, tensor<32x8x1024xi32>, tensor<4096x128xi32>, tensor<32x12x1024x64xbf16>, tensor<32x12x1024x64xbf16>, tensor<32x12x1024x64xbf16>) -> tensor<32x12x1024x64xf32>
    %42 = stablehlo.convert %41 : (tensor<32x12x1024x64xf32>) -> tensor<32x12x1024x64xbf16>
    %43 = sdy.sharding_constraint %42 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %cst_4 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %44 = stablehlo.broadcast_in_dim %cst_4, dims = [] : (tensor<bf16>) -> tensor<12x64x768xbf16>
    %45 = stablehlo.multiply %arg27, %44 : tensor<12x64x768xbf16>
    %46 = stablehlo.dot_general %43, %45, contracting_dims = [1, 3] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<32x12x1024x64xbf16>, tensor<12x64x768xbf16>) -> tensor<32x1024x768xbf16>
    %47 = sdy.sharding_constraint %46 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %48 = sdy.sharding_constraint %47 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %49 = stablehlo.broadcast_in_dim %arg28, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %50 = stablehlo.add %48, %49 : tensor<32x1024x768xbf16>
    %51 = sdy.sharding_constraint %50 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %52 = call @_bernoulli_171(%2, %arg3, %arg4, %arg5) : (tensor<2xui32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    %53 = sdy.sharding_constraint %52 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xi1>
    %cst_5 = stablehlo.constant dense<8.007810e-01> : tensor<bf16>
    %54 = stablehlo.broadcast_in_dim %cst_5, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %55 = stablehlo.divide %51, %54 : tensor<32x1024x768xbf16>
    %56 = call @_where_173(%53, %55, %arg17) : (tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>, tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16>
    %57 = stablehlo.add %arg22, %56 : tensor<32x1024x768xbf16>
    %58 = stablehlo.convert %57 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst_6 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %59 = stablehlo.reduce(%58 init: %cst_6) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %cst_7 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %60 = stablehlo.broadcast_in_dim %cst_7, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %61 = stablehlo.divide %59, %60 : tensor<32x1024xf32>
    %62 = stablehlo.convert %61 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %63 = call @_var_134(%57, %arg18, %arg19, %arg20) : (tensor<32x1024x768xbf16>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024xbf16>
    %cst_8 = stablehlo.constant dense<1.001360e-05> : tensor<bf16>
    %64 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %65 = stablehlo.add %63, %64 : tensor<32x1024xbf16>
    %66 = stablehlo.rsqrt %65 : tensor<32x1024xbf16>
    %67 = stablehlo.broadcast_in_dim %62, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %68 = stablehlo.transpose %67, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %69 = stablehlo.subtract %57, %68 : tensor<32x1024x768xbf16>
    %70 = stablehlo.broadcast_in_dim %66, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %71 = stablehlo.transpose %70, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %72 = stablehlo.multiply %69, %71 : tensor<32x1024x768xbf16>
    %73 = stablehlo.broadcast_in_dim %arg29, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %74 = stablehlo.multiply %73, %72 : tensor<32x1024x768xbf16>
    %75 = stablehlo.broadcast_in_dim %arg30, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %76 = stablehlo.add %74, %75 : tensor<32x1024x768xbf16>
    %cst_9 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %77 = stablehlo.broadcast_in_dim %cst_9, dims = [] : (tensor<bf16>) -> tensor<768x3072xbf16>
    %78 = stablehlo.multiply %arg31, %77 : tensor<768x3072xbf16>
    %79 = stablehlo.dot_general %76, %78, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<768x3072xbf16>) -> tensor<32x1024x3072xbf16>
    %80 = sdy.sharding_constraint %79 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %81 = sdy.sharding_constraint %80 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %82 = stablehlo.broadcast_in_dim %arg32, dims = [2] : (tensor<3072xbf16>) -> tensor<32x1024x3072xbf16>
    %83 = stablehlo.add %81, %82 : tensor<32x1024x3072xbf16>
    %84 = sdy.sharding_constraint %83 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %85 = stablehlo.multiply %84, %84 : tensor<32x1024x3072xbf16>
    %86 = stablehlo.multiply %85, %84 : tensor<32x1024x3072xbf16>
    %cst_10 = stablehlo.constant dense<4.467770e-02> : tensor<bf16>
    %87 = stablehlo.broadcast_in_dim %cst_10, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %88 = stablehlo.multiply %87, %86 : tensor<32x1024x3072xbf16>
    %89 = stablehlo.add %84, %88 : tensor<32x1024x3072xbf16>
    %cst_11 = stablehlo.constant dense<7.968750e-01> : tensor<bf16>
    %90 = stablehlo.broadcast_in_dim %cst_11, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %91 = stablehlo.multiply %90, %89 : tensor<32x1024x3072xbf16>
    %92 = stablehlo.tanh %91 : tensor<32x1024x3072xbf16>
    %cst_12 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %93 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %94 = stablehlo.add %93, %92 : tensor<32x1024x3072xbf16>
    %cst_13 = stablehlo.constant dense<5.000000e-01> : tensor<bf16>
    %95 = stablehlo.broadcast_in_dim %cst_13, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %96 = stablehlo.multiply %95, %94 : tensor<32x1024x3072xbf16>
    %97 = stablehlo.multiply %84, %96 : tensor<32x1024x3072xbf16>
    %cst_14 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %98 = stablehlo.broadcast_in_dim %cst_14, dims = [] : (tensor<bf16>) -> tensor<3072x768xbf16>
    %99 = stablehlo.multiply %arg33, %98 : tensor<3072x768xbf16>
    %100 = stablehlo.dot_general %97, %99, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x3072xbf16>, tensor<3072x768xbf16>) -> tensor<32x1024x768xbf16>
    %101 = sdy.sharding_constraint %100 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %102 = sdy.sharding_constraint %101 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %103 = stablehlo.broadcast_in_dim %arg34, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %104 = stablehlo.add %102, %103 : tensor<32x1024x768xbf16>
    %105 = sdy.sharding_constraint %104 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %106 = call @_bernoulli_171(%4, %arg0, %arg1, %arg2) : (tensor<2xui32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    %107 = sdy.sharding_constraint %106 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xi1>
    %cst_15 = stablehlo.constant dense<8.007810e-01> : tensor<bf16>
    %108 = stablehlo.broadcast_in_dim %cst_15, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %109 = stablehlo.divide %105, %108 : tensor<32x1024x768xbf16>
    %110 = call @_where_173(%107, %109, %arg21) : (tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>, tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16>
    %111 = stablehlo.add %57, %110 : tensor<32x1024x768xbf16>
    return %111, %arg22 : tensor<32x1024x768xbf16>, tensor<32x1024x768xbf16>
  }
  func.func private @_threefry_split_115(%arg0: tensor<2xui32>) -> tensor<4x2xui32> {
    %0 = stablehlo.slice %arg0 [0:1] : (tensor<2xui32>) -> tensor<1xui32>
    %1 = stablehlo.reshape %0 : (tensor<1xui32>) -> tensor<ui32>
    %2 = stablehlo.slice %arg0 [1:2] : (tensor<2xui32>) -> tensor<1xui32>
    %3 = stablehlo.reshape %2 : (tensor<1xui32>) -> tensor<ui32>
    %4 = stablehlo.iota dim = 0 : tensor<4xui64>
    %c = stablehlo.constant dense<1> : tensor<ui64>
    %5 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<ui64>) -> tensor<4xui64>
    %6 = stablehlo.multiply %5, %4 : tensor<4xui64>
    %c_0 = stablehlo.constant dense<32> : tensor<ui64>
    %7 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui64>) -> tensor<4xui64>
    %8 = stablehlo.shift_right_logical %6, %7 : tensor<4xui64>
    %9 = stablehlo.convert %6 : (tensor<4xui64>) -> tensor<4xui32>
    %10 = stablehlo.convert %8 : (tensor<4xui64>) -> tensor<4xui32>
    %11:2 = call @threefry2x32_117(%1, %3, %10, %9) : (tensor<ui32>, tensor<ui32>, tensor<4xui32>, tensor<4xui32>) -> (tensor<4xui32>, tensor<4xui32>)
    %12 = stablehlo.broadcast_in_dim %11#0, dims = [0] : (tensor<4xui32>) -> tensor<4x1xui32>
    %13 = stablehlo.broadcast_in_dim %11#1, dims = [0] : (tensor<4xui32>) -> tensor<4x1xui32>
    %14 = stablehlo.concatenate %12, %13, dim = 1 : (tensor<4x1xui32>, tensor<4x1xui32>) -> tensor<4x2xui32>
    return %14 : tensor<4x2xui32>
  }
  func.func private @threefry2x32_117(%arg0: tensor<ui32>, %arg1: tensor<ui32>, %arg2: tensor<4xui32>, %arg3: tensor<4xui32>) -> (tensor<4xui32>, tensor<4xui32>) {
    %0 = stablehlo.xor %arg0, %arg1 : tensor<ui32>
    %c = stablehlo.constant dense<466688986> : tensor<ui32>
    %1 = stablehlo.xor %0, %c : tensor<ui32>
    %2 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %3 = stablehlo.add %arg2, %2 : tensor<4xui32>
    %4 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %5 = stablehlo.add %arg3, %4 : tensor<4xui32>
    %6 = stablehlo.add %3, %5 : tensor<4xui32>
    %c_0 = stablehlo.constant dense<13> : tensor<ui32>
    %7 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %8 = stablehlo.shift_left %5, %7 : tensor<4xui32>
    %c_1 = stablehlo.constant dense<19> : tensor<ui32>
    %9 = stablehlo.broadcast_in_dim %c_1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %10 = stablehlo.shift_right_logical %5, %9 : tensor<4xui32>
    %11 = stablehlo.or %8, %10 : tensor<4xui32>
    %12 = stablehlo.xor %6, %11 : tensor<4xui32>
    %13 = stablehlo.add %6, %12 : tensor<4xui32>
    %c_2 = stablehlo.constant dense<15> : tensor<ui32>
    %14 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %15 = stablehlo.shift_left %12, %14 : tensor<4xui32>
    %c_3 = stablehlo.constant dense<17> : tensor<ui32>
    %16 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %17 = stablehlo.shift_right_logical %12, %16 : tensor<4xui32>
    %18 = stablehlo.or %15, %17 : tensor<4xui32>
    %19 = stablehlo.xor %13, %18 : tensor<4xui32>
    %20 = stablehlo.add %13, %19 : tensor<4xui32>
    %c_4 = stablehlo.constant dense<26> : tensor<ui32>
    %21 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %22 = stablehlo.shift_left %19, %21 : tensor<4xui32>
    %c_5 = stablehlo.constant dense<6> : tensor<ui32>
    %23 = stablehlo.broadcast_in_dim %c_5, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %24 = stablehlo.shift_right_logical %19, %23 : tensor<4xui32>
    %25 = stablehlo.or %22, %24 : tensor<4xui32>
    %26 = stablehlo.xor %20, %25 : tensor<4xui32>
    %27 = stablehlo.add %20, %26 : tensor<4xui32>
    %c_6 = stablehlo.constant dense<6> : tensor<ui32>
    %28 = stablehlo.broadcast_in_dim %c_6, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %29 = stablehlo.shift_left %26, %28 : tensor<4xui32>
    %c_7 = stablehlo.constant dense<26> : tensor<ui32>
    %30 = stablehlo.broadcast_in_dim %c_7, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %31 = stablehlo.shift_right_logical %26, %30 : tensor<4xui32>
    %32 = stablehlo.or %29, %31 : tensor<4xui32>
    %33 = stablehlo.xor %27, %32 : tensor<4xui32>
    %34 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %35 = stablehlo.add %27, %34 : tensor<4xui32>
    %36 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %37 = stablehlo.add %33, %36 : tensor<4xui32>
    %c_8 = stablehlo.constant dense<1> : tensor<ui32>
    %38 = stablehlo.broadcast_in_dim %c_8, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %39 = stablehlo.add %37, %38 : tensor<4xui32>
    %40 = stablehlo.add %35, %39 : tensor<4xui32>
    %c_9 = stablehlo.constant dense<17> : tensor<ui32>
    %41 = stablehlo.broadcast_in_dim %c_9, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %42 = stablehlo.shift_left %39, %41 : tensor<4xui32>
    %c_10 = stablehlo.constant dense<15> : tensor<ui32>
    %43 = stablehlo.broadcast_in_dim %c_10, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %44 = stablehlo.shift_right_logical %39, %43 : tensor<4xui32>
    %45 = stablehlo.or %42, %44 : tensor<4xui32>
    %46 = stablehlo.xor %40, %45 : tensor<4xui32>
    %47 = stablehlo.add %40, %46 : tensor<4xui32>
    %c_11 = stablehlo.constant dense<29> : tensor<ui32>
    %48 = stablehlo.broadcast_in_dim %c_11, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %49 = stablehlo.shift_left %46, %48 : tensor<4xui32>
    %c_12 = stablehlo.constant dense<3> : tensor<ui32>
    %50 = stablehlo.broadcast_in_dim %c_12, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %51 = stablehlo.shift_right_logical %46, %50 : tensor<4xui32>
    %52 = stablehlo.or %49, %51 : tensor<4xui32>
    %53 = stablehlo.xor %47, %52 : tensor<4xui32>
    %54 = stablehlo.add %47, %53 : tensor<4xui32>
    %c_13 = stablehlo.constant dense<16> : tensor<ui32>
    %55 = stablehlo.broadcast_in_dim %c_13, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %56 = stablehlo.shift_left %53, %55 : tensor<4xui32>
    %c_14 = stablehlo.constant dense<16> : tensor<ui32>
    %57 = stablehlo.broadcast_in_dim %c_14, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %58 = stablehlo.shift_right_logical %53, %57 : tensor<4xui32>
    %59 = stablehlo.or %56, %58 : tensor<4xui32>
    %60 = stablehlo.xor %54, %59 : tensor<4xui32>
    %61 = stablehlo.add %54, %60 : tensor<4xui32>
    %c_15 = stablehlo.constant dense<24> : tensor<ui32>
    %62 = stablehlo.broadcast_in_dim %c_15, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %63 = stablehlo.shift_left %60, %62 : tensor<4xui32>
    %c_16 = stablehlo.constant dense<8> : tensor<ui32>
    %64 = stablehlo.broadcast_in_dim %c_16, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %65 = stablehlo.shift_right_logical %60, %64 : tensor<4xui32>
    %66 = stablehlo.or %63, %65 : tensor<4xui32>
    %67 = stablehlo.xor %61, %66 : tensor<4xui32>
    %68 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %69 = stablehlo.add %61, %68 : tensor<4xui32>
    %70 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %71 = stablehlo.add %67, %70 : tensor<4xui32>
    %c_17 = stablehlo.constant dense<2> : tensor<ui32>
    %72 = stablehlo.broadcast_in_dim %c_17, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %73 = stablehlo.add %71, %72 : tensor<4xui32>
    %74 = stablehlo.add %69, %73 : tensor<4xui32>
    %c_18 = stablehlo.constant dense<13> : tensor<ui32>
    %75 = stablehlo.broadcast_in_dim %c_18, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %76 = stablehlo.shift_left %73, %75 : tensor<4xui32>
    %c_19 = stablehlo.constant dense<19> : tensor<ui32>
    %77 = stablehlo.broadcast_in_dim %c_19, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %78 = stablehlo.shift_right_logical %73, %77 : tensor<4xui32>
    %79 = stablehlo.or %76, %78 : tensor<4xui32>
    %80 = stablehlo.xor %74, %79 : tensor<4xui32>
    %81 = stablehlo.add %74, %80 : tensor<4xui32>
    %c_20 = stablehlo.constant dense<15> : tensor<ui32>
    %82 = stablehlo.broadcast_in_dim %c_20, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %83 = stablehlo.shift_left %80, %82 : tensor<4xui32>
    %c_21 = stablehlo.constant dense<17> : tensor<ui32>
    %84 = stablehlo.broadcast_in_dim %c_21, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %85 = stablehlo.shift_right_logical %80, %84 : tensor<4xui32>
    %86 = stablehlo.or %83, %85 : tensor<4xui32>
    %87 = stablehlo.xor %81, %86 : tensor<4xui32>
    %88 = stablehlo.add %81, %87 : tensor<4xui32>
    %c_22 = stablehlo.constant dense<26> : tensor<ui32>
    %89 = stablehlo.broadcast_in_dim %c_22, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %90 = stablehlo.shift_left %87, %89 : tensor<4xui32>
    %c_23 = stablehlo.constant dense<6> : tensor<ui32>
    %91 = stablehlo.broadcast_in_dim %c_23, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %92 = stablehlo.shift_right_logical %87, %91 : tensor<4xui32>
    %93 = stablehlo.or %90, %92 : tensor<4xui32>
    %94 = stablehlo.xor %88, %93 : tensor<4xui32>
    %95 = stablehlo.add %88, %94 : tensor<4xui32>
    %c_24 = stablehlo.constant dense<6> : tensor<ui32>
    %96 = stablehlo.broadcast_in_dim %c_24, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %97 = stablehlo.shift_left %94, %96 : tensor<4xui32>
    %c_25 = stablehlo.constant dense<26> : tensor<ui32>
    %98 = stablehlo.broadcast_in_dim %c_25, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %99 = stablehlo.shift_right_logical %94, %98 : tensor<4xui32>
    %100 = stablehlo.or %97, %99 : tensor<4xui32>
    %101 = stablehlo.xor %95, %100 : tensor<4xui32>
    %102 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %103 = stablehlo.add %95, %102 : tensor<4xui32>
    %104 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %105 = stablehlo.add %101, %104 : tensor<4xui32>
    %c_26 = stablehlo.constant dense<3> : tensor<ui32>
    %106 = stablehlo.broadcast_in_dim %c_26, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %107 = stablehlo.add %105, %106 : tensor<4xui32>
    %108 = stablehlo.add %103, %107 : tensor<4xui32>
    %c_27 = stablehlo.constant dense<17> : tensor<ui32>
    %109 = stablehlo.broadcast_in_dim %c_27, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %110 = stablehlo.shift_left %107, %109 : tensor<4xui32>
    %c_28 = stablehlo.constant dense<15> : tensor<ui32>
    %111 = stablehlo.broadcast_in_dim %c_28, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %112 = stablehlo.shift_right_logical %107, %111 : tensor<4xui32>
    %113 = stablehlo.or %110, %112 : tensor<4xui32>
    %114 = stablehlo.xor %108, %113 : tensor<4xui32>
    %115 = stablehlo.add %108, %114 : tensor<4xui32>
    %c_29 = stablehlo.constant dense<29> : tensor<ui32>
    %116 = stablehlo.broadcast_in_dim %c_29, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %117 = stablehlo.shift_left %114, %116 : tensor<4xui32>
    %c_30 = stablehlo.constant dense<3> : tensor<ui32>
    %118 = stablehlo.broadcast_in_dim %c_30, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %119 = stablehlo.shift_right_logical %114, %118 : tensor<4xui32>
    %120 = stablehlo.or %117, %119 : tensor<4xui32>
    %121 = stablehlo.xor %115, %120 : tensor<4xui32>
    %122 = stablehlo.add %115, %121 : tensor<4xui32>
    %c_31 = stablehlo.constant dense<16> : tensor<ui32>
    %123 = stablehlo.broadcast_in_dim %c_31, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %124 = stablehlo.shift_left %121, %123 : tensor<4xui32>
    %c_32 = stablehlo.constant dense<16> : tensor<ui32>
    %125 = stablehlo.broadcast_in_dim %c_32, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %126 = stablehlo.shift_right_logical %121, %125 : tensor<4xui32>
    %127 = stablehlo.or %124, %126 : tensor<4xui32>
    %128 = stablehlo.xor %122, %127 : tensor<4xui32>
    %129 = stablehlo.add %122, %128 : tensor<4xui32>
    %c_33 = stablehlo.constant dense<24> : tensor<ui32>
    %130 = stablehlo.broadcast_in_dim %c_33, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %131 = stablehlo.shift_left %128, %130 : tensor<4xui32>
    %c_34 = stablehlo.constant dense<8> : tensor<ui32>
    %132 = stablehlo.broadcast_in_dim %c_34, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %133 = stablehlo.shift_right_logical %128, %132 : tensor<4xui32>
    %134 = stablehlo.or %131, %133 : tensor<4xui32>
    %135 = stablehlo.xor %129, %134 : tensor<4xui32>
    %136 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %137 = stablehlo.add %129, %136 : tensor<4xui32>
    %138 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %139 = stablehlo.add %135, %138 : tensor<4xui32>
    %c_35 = stablehlo.constant dense<4> : tensor<ui32>
    %140 = stablehlo.broadcast_in_dim %c_35, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %141 = stablehlo.add %139, %140 : tensor<4xui32>
    %142 = stablehlo.add %137, %141 : tensor<4xui32>
    %c_36 = stablehlo.constant dense<13> : tensor<ui32>
    %143 = stablehlo.broadcast_in_dim %c_36, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %144 = stablehlo.shift_left %141, %143 : tensor<4xui32>
    %c_37 = stablehlo.constant dense<19> : tensor<ui32>
    %145 = stablehlo.broadcast_in_dim %c_37, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %146 = stablehlo.shift_right_logical %141, %145 : tensor<4xui32>
    %147 = stablehlo.or %144, %146 : tensor<4xui32>
    %148 = stablehlo.xor %142, %147 : tensor<4xui32>
    %149 = stablehlo.add %142, %148 : tensor<4xui32>
    %c_38 = stablehlo.constant dense<15> : tensor<ui32>
    %150 = stablehlo.broadcast_in_dim %c_38, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %151 = stablehlo.shift_left %148, %150 : tensor<4xui32>
    %c_39 = stablehlo.constant dense<17> : tensor<ui32>
    %152 = stablehlo.broadcast_in_dim %c_39, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %153 = stablehlo.shift_right_logical %148, %152 : tensor<4xui32>
    %154 = stablehlo.or %151, %153 : tensor<4xui32>
    %155 = stablehlo.xor %149, %154 : tensor<4xui32>
    %156 = stablehlo.add %149, %155 : tensor<4xui32>
    %c_40 = stablehlo.constant dense<26> : tensor<ui32>
    %157 = stablehlo.broadcast_in_dim %c_40, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %158 = stablehlo.shift_left %155, %157 : tensor<4xui32>
    %c_41 = stablehlo.constant dense<6> : tensor<ui32>
    %159 = stablehlo.broadcast_in_dim %c_41, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %160 = stablehlo.shift_right_logical %155, %159 : tensor<4xui32>
    %161 = stablehlo.or %158, %160 : tensor<4xui32>
    %162 = stablehlo.xor %156, %161 : tensor<4xui32>
    %163 = stablehlo.add %156, %162 : tensor<4xui32>
    %c_42 = stablehlo.constant dense<6> : tensor<ui32>
    %164 = stablehlo.broadcast_in_dim %c_42, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %165 = stablehlo.shift_left %162, %164 : tensor<4xui32>
    %c_43 = stablehlo.constant dense<26> : tensor<ui32>
    %166 = stablehlo.broadcast_in_dim %c_43, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %167 = stablehlo.shift_right_logical %162, %166 : tensor<4xui32>
    %168 = stablehlo.or %165, %167 : tensor<4xui32>
    %169 = stablehlo.xor %163, %168 : tensor<4xui32>
    %170 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %171 = stablehlo.add %163, %170 : tensor<4xui32>
    %172 = stablehlo.broadcast_in_dim %arg0, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %173 = stablehlo.add %169, %172 : tensor<4xui32>
    %c_44 = stablehlo.constant dense<5> : tensor<ui32>
    %174 = stablehlo.broadcast_in_dim %c_44, dims = [] : (tensor<ui32>) -> tensor<4xui32>
    %175 = stablehlo.add %173, %174 : tensor<4xui32>
    return %171, %175 : tensor<4xui32>, tensor<4xui32>
  }
  func.func private @_var_134(%arg0: tensor<32x1024x768xbf16>, %arg1: tensor<f32>, %arg2: tensor<i1>, %arg3: tensor<32x1024xbf16>) -> tensor<32x1024xbf16> {
    %0 = stablehlo.convert %arg0 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %1 = stablehlo.reduce(%0 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %2 = stablehlo.broadcast_in_dim %1, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x1xf32>
    %cst_0 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %3 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x1024x1xf32>
    %4 = stablehlo.divide %2, %3 : tensor<32x1024x1xf32>
    %5 = stablehlo.broadcast_in_dim %4, dims = [0, 1, 2] : (tensor<32x1024x1xf32>) -> tensor<32x1024x768xf32>
    %6 = stablehlo.subtract %0, %5 : tensor<32x1024x768xf32>
    %7 = stablehlo.multiply %6, %6 : tensor<32x1024x768xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %8 = stablehlo.reduce(%7 init: %cst_1) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %9 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %10 = stablehlo.divide %8, %9 : tensor<32x1024xf32>
    %11 = stablehlo.convert %10 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %12 = call @_where_139(%11, %arg2, %arg3) : (tensor<32x1024xbf16>, tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024xbf16>
    return %12 : tensor<32x1024xbf16>
  }
  func.func private @_where_139(%arg0: tensor<32x1024xbf16>, %arg1: tensor<i1>, %arg2: tensor<32x1024xbf16>) -> tensor<32x1024xbf16> {
    %0 = stablehlo.select %arg1, %arg0, %arg2 : tensor<i1>, tensor<32x1024xbf16>
    return %0 : tensor<32x1024xbf16>
  }
  func.func private @_take_151(%arg0: tensor<32x3x12x1024x64xbf16>, %arg1: tensor<1xi32>) -> tensor<32x12x1024x64xbf16> {
    %c = stablehlo.constant dense<2> : tensor<1xi32>
    %0 = stablehlo.convert %arg1 : tensor<1xi32>
    %c_0 = stablehlo.constant dense<0> : tensor<i32>
    %1 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<i32>) -> tensor<1xi32>
    %2 = stablehlo.compare  GE, %0, %1,  SIGNED : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %3 = stablehlo.compare  LE, %0, %c,  SIGNED : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %4 = stablehlo.and %2, %3 : tensor<1xi1>
    %c_1 = stablehlo.constant dense<true> : tensor<i1>
    %5 = stablehlo.reduce(%4 init: %c_1) applies stablehlo.and across dimensions = [0] : (tensor<1xi1>, tensor<i1>) -> tensor<i1>
    %6 = "stablehlo.gather"(%arg0, %0) <{dimension_numbers = #stablehlo.gather<offset_dims = [0, 1, 2, 3], collapsed_slice_dims = [1], start_index_map = [1]>, indices_are_sorted = false, slice_sizes = array<i64: 32, 1, 12, 1024, 64>}> : (tensor<32x3x12x1024x64xbf16>, tensor<1xi32>) -> tensor<32x12x1024x64xbf16>
    %7 = stablehlo.broadcast_in_dim %5, dims = [] : (tensor<i1>) -> tensor<32x12x1024x64xi1>
    %cst = stablehlo.constant dense<0x7FC0> : tensor<bf16>
    %8 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x12x1024x64xbf16>
    %9 = stablehlo.select %7, %6, %8 : tensor<32x12x1024x64xi1>, tensor<32x12x1024x64xbf16>
    return %9 : tensor<32x12x1024x64xbf16>
  }
  func.func private @_splash_attention_166(%arg0: tensor<8x12x1024x64xf32>, %arg1: tensor<8x12x1024x64xf32>, %arg2: tensor<8x12x1024x64xf32>, %arg3: tensor<1x2x2xi8>, %arg4: tensor<1x2x2xi8>, %arg5: tensor<8x1024x128xi32>, %arg6: tensor<8x8x1024xi32>, %arg7: tensor<1024x128xi32>) -> tensor<8x12x1024x64xf32> {
    %0:5 = stablehlo.custom_call @tpu_custom_call(%arg3, %arg4, %arg0, %arg1, %arg2, %arg5, %arg6, %arg7) {backend_config = "{\22custom_call_config\22: {\22body\22: \\22, \22serialization_format\22: 1, \22needs_layout_passes\22: true}}", kernel_name = "splash_mha_fwd_segmented_residuals_block_kv_512_block_kv_compute_512_block_kv_dkv_512_block_kv_dkv_compute_512_block_kv_dq_512_block_q_512_block_q_dkv_512_block_q_dq_512_k_layout_1_q_layout_1_use_fused_bwd_kernel_False_v_layout_1", operand_layouts = [dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[1, 0]> : tensor<2xindex>], result_layouts = [dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>]} : (tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x1024x128xi32>, tensor<8x8x1024xi32>, tensor<1024x128xi32>) -> (tensor<8x512x128xf32>, tensor<8x512x128xf32>, tensor<8x512x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x128xf32>)
    return %0#3 : tensor<8x12x1024x64xf32>
  }
  func.func private @_bernoulli_171(%arg0: tensor<2xui32>, %arg1: tensor<1x1x1xf32>, %arg2: tensor<1x1x1xf32>, %arg3: tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1> {
    %0 = call @_uniform_172(%arg0, %arg1, %arg2) : (tensor<2xui32>, tensor<1x1x1xf32>, tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %1 = stablehlo.compare  LT, %0, %arg3,  FLOAT : (tensor<32x1024x768xf32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    return %1 : tensor<32x1024x768xi1>
  }
  func.func private @_uniform_172(%arg0: tensor<2xui32>, %arg1: tensor<1x1x1xf32>, %arg2: tensor<1x1x1xf32>) -> tensor<32x1024x768xf32> {
    %0 = stablehlo.slice %arg0 [0:1] : (tensor<2xui32>) -> tensor<1xui32>
    %1 = stablehlo.reshape %0 : (tensor<1xui32>) -> tensor<ui32>
    %2 = stablehlo.slice %arg0 [1:2] : (tensor<2xui32>) -> tensor<1xui32>
    %3 = stablehlo.reshape %2 : (tensor<1xui32>) -> tensor<ui32>
    %4 = stablehlo.iota dim = 0 : tensor<32x1024x768xui64>
    %5 = stablehlo.iota dim = 1 : tensor<32x1024x768xui64>
    %6 = stablehlo.iota dim = 2 : tensor<32x1024x768xui64>
    %c = stablehlo.constant dense<786432> : tensor<ui64>
    %7 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %8 = stablehlo.multiply %7, %4 : tensor<32x1024x768xui64>
    %c_0 = stablehlo.constant dense<768> : tensor<ui64>
    %9 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %10 = stablehlo.multiply %9, %5 : tensor<32x1024x768xui64>
    %c_1 = stablehlo.constant dense<1> : tensor<ui64>
    %11 = stablehlo.broadcast_in_dim %c_1, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %12 = stablehlo.multiply %11, %6 : tensor<32x1024x768xui64>
    %13 = stablehlo.add %8, %10 : tensor<32x1024x768xui64>
    %14 = stablehlo.add %13, %12 : tensor<32x1024x768xui64>
    %c_2 = stablehlo.constant dense<32> : tensor<ui64>
    %15 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %16 = stablehlo.shift_right_logical %14, %15 : tensor<32x1024x768xui64>
    %17 = stablehlo.convert %14 : (tensor<32x1024x768xui64>) -> tensor<32x1024x768xui32>
    %18 = stablehlo.convert %16 : (tensor<32x1024x768xui64>) -> tensor<32x1024x768xui32>
    %19:2 = call @threefry2x32_40(%1, %3, %18, %17) : (tensor<ui32>, tensor<ui32>, tensor<32x1024x768xui32>, tensor<32x1024x768xui32>) -> (tensor<32x1024x768xui32>, tensor<32x1024x768xui32>)
    %20 = stablehlo.xor %19#0, %19#1 : tensor<32x1024x768xui32>
    %c_3 = stablehlo.constant dense<9> : tensor<ui32>
    %21 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %22 = stablehlo.shift_right_logical %20, %21 : tensor<32x1024x768xui32>
    %c_4 = stablehlo.constant dense<1065353216> : tensor<ui32>
    %23 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %24 = stablehlo.or %22, %23 : tensor<32x1024x768xui32>
    %25 = stablehlo.bitcast_convert %24 : (tensor<32x1024x768xui32>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %26 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %27 = stablehlo.subtract %25, %26 : tensor<32x1024x768xf32>
    %28 = stablehlo.broadcast_in_dim %arg2, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %29 = stablehlo.multiply %27, %28 : tensor<32x1024x768xf32>
    %30 = stablehlo.broadcast_in_dim %arg1, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %31 = stablehlo.add %29, %30 : tensor<32x1024x768xf32>
    %32 = stablehlo.broadcast_in_dim %arg1, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %33 = stablehlo.maximum %32, %31 : tensor<32x1024x768xf32>
    return %33 : tensor<32x1024x768xf32>
  }
  func.func private @_where_173(%arg0: tensor<32x1024x768xi1>, %arg1: tensor<32x1024x768xbf16>, %arg2: tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16> {
    %0 = stablehlo.select %arg0, %arg1, %arg2 : tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>
    return %0 : tensor<32x1024x768xbf16>
  }
  func.func private @_var_185(%arg0: tensor<32x1024x768xbf16>, %arg1: tensor<i32>) -> (tensor<32x1024xbf16>, tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>) {
    %0 = stablehlo.convert %arg0 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %1 = stablehlo.reduce(%0 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %2 = stablehlo.broadcast_in_dim %1, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x1xf32>
    %cst_0 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %3 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x1024x1xf32>
    %4 = stablehlo.divide %2, %3 : tensor<32x1024x1xf32>
    %5 = stablehlo.broadcast_in_dim %4, dims = [0, 1, 2] : (tensor<32x1024x1xf32>) -> tensor<32x1024x768xf32>
    %6 = stablehlo.subtract %0, %5 : tensor<32x1024x768xf32>
    %7 = stablehlo.multiply %6, %6 : tensor<32x1024x768xf32>
    %cst_1 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %8 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %9 = stablehlo.multiply %8, %6 : tensor<32x1024x768xf32>
    %10 = stablehlo.convert %arg1 : (tensor<i32>) -> tensor<f32>
    %cst_2 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %11 = stablehlo.subtract %cst_2, %10 : tensor<f32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %12 = stablehlo.reduce(%7 init: %cst_3) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %13 = stablehlo.broadcast_in_dim %11, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %14 = stablehlo.divide %12, %13 : tensor<32x1024xf32>
    %15 = stablehlo.convert %14 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %16 = stablehlo.compare  GT, %11, %cst_4,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1>
    %cst_5 = stablehlo.constant dense<0x7FC00000> : tensor<f32>
    %17 = call @_where_187(%16, %15, %cst_5) : (tensor<i1>, tensor<32x1024xbf16>, tensor<f32>) -> tensor<32x1024xbf16>
    return %17, %9, %11, %16 : tensor<32x1024xbf16>, tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>
  }
  func.func private @_where_187(%arg0: tensor<i1>, %arg1: tensor<32x1024xbf16>, %arg2: tensor<f32>) -> tensor<32x1024xbf16> {
    %0 = stablehlo.convert %arg2 : (tensor<f32>) -> tensor<bf16>
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %2 = stablehlo.select %arg0, %arg1, %1 : tensor<i1>, tensor<32x1024xbf16>
    return %2 : tensor<32x1024xbf16>
  }
  func.func private @_roll_static(%arg0: tensor<32x1024xi32>) -> tensor<32x1024xi32> {
    %0 = stablehlo.slice %arg0 [0:32, 1:1024] : (tensor<32x1024xi32>) -> tensor<32x1023xi32>
    %1 = stablehlo.slice %arg0 [0:32, 0:1] : (tensor<32x1024xi32>) -> tensor<32x1xi32>
    %2 = stablehlo.concatenate %0, %1, dim = 1 : (tensor<32x1023xi32>, tensor<32x1xi32>) -> tensor<32x1024xi32>
    return %2 : tensor<32x1024xi32>
  }
  func.func private @_one_hot(%arg0: tensor<32x1024xi32>) -> tensor<32x1024x50257xf32> {
    %0 = stablehlo.broadcast_in_dim %arg0, dims = [0, 1] : (tensor<32x1024xi32>) -> tensor<32x1024x1xi32>
    %1 = stablehlo.iota dim = 2 : tensor<1x1x50257xi32>
    %2 = stablehlo.broadcast_in_dim %0, dims = [0, 1, 2] : (tensor<32x1024x1xi32>) -> tensor<32x1024x50257xi32>
    %3 = stablehlo.broadcast_in_dim %1, dims = [0, 1, 2] : (tensor<1x1x50257xi32>) -> tensor<32x1024x50257xi32>
    %4 = stablehlo.compare  EQ, %2, %3,  SIGNED : (tensor<32x1024x50257xi32>, tensor<32x1024x50257xi32>) -> tensor<32x1024x50257xi1>
    %5 = stablehlo.convert %4 : (tensor<32x1024x50257xi1>) -> tensor<32x1024x50257xf32>
    return %5 : tensor<32x1024x50257xf32>
  }
  func.func private @_where_222(%arg0: tensor<32x1024xi1>, %arg1: tensor<32x1024xf32>, %arg2: tensor<f32>) -> tensor<32x1024xf32> {
    %0 = stablehlo.broadcast_in_dim %arg2, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %1 = stablehlo.select %arg0, %arg1, %0 : tensor<32x1024xi1>, tensor<32x1024xf32>
    return %1 : tensor<32x1024xf32>
  }
  func.func private @_where_228(%arg0: tensor<32x1024xi1>, %arg1: tensor<32x1024xf32>) -> tensor<32x1024xf32> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %1 = stablehlo.select %arg0, %arg1, %0 : tensor<32x1024xi1>, tensor<32x1024xf32>
    return %1 : tensor<32x1024xf32>
  }
  func.func private @_var_245(%arg0: tensor<32x1024x768xf32>, %arg1: tensor<f32>, %arg2: tensor<i1>, %arg3: tensor<32x1024xbf16>) -> tensor<32x1024x768xbf16> {
    %0 = call @_where_246(%arg2, %arg3) : (tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024xbf16>
    %1 = stablehlo.convert %0 : (tensor<32x1024xbf16>) -> tensor<32x1024xf32>
    %2 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %3 = stablehlo.divide %1, %2 : tensor<32x1024xf32>
    %4 = stablehlo.broadcast_in_dim %3, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x768xf32>
    %5 = stablehlo.multiply %4, %arg0 : tensor<32x1024x768xf32>
    %6 = stablehlo.negate %5 : tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %7 = stablehlo.reduce(%6 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %8 = stablehlo.reshape %7 : (tensor<32x1024xf32>) -> tensor<32x1024x1xf32>
    %cst_0 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %9 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x1024x1xf32>
    %10 = stablehlo.divide %8, %9 : tensor<32x1024x1xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %11 = stablehlo.reduce(%10 init: %cst_1) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x1xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %12 = stablehlo.broadcast_in_dim %11, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x768xf32>
    %13 = stablehlo.add %5, %12 : tensor<32x1024x768xf32>
    %14 = stablehlo.convert %13 : (tensor<32x1024x768xf32>) -> tensor<32x1024x768xbf16>
    return %14 : tensor<32x1024x768xbf16>
  }
  func.func private @_where_246(%arg0: tensor<i1>, %arg1: tensor<32x1024xbf16>) -> tensor<32x1024xbf16> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %1 = stablehlo.select %arg0, %arg1, %0 : tensor<i1>, tensor<32x1024xbf16>
    return %1 : tensor<32x1024xbf16>
  }
  func.func private @closed_call_277(%arg0: tensor<32x1024xi32>, %arg1: tensor<32x1024xi32>, %arg2: tensor<1x2x2xi8>, %arg3: tensor<1x2x2xi8>, %arg4: tensor<1024xi32>, %arg5: tensor<1x2x2xi8>, %arg6: tensor<1x2x2xi8>, %arg7: tensor<1024xi32>, %arg8: tensor<1x2x2xi8>, %arg9: tensor<1x2x2xi8>, %arg10: tensor<1024xi32>, %arg11: tensor<32x1024x768xbf16>, %arg12: tensor<32x1024x768xbf16>, %arg13: tensor<768xbf16>, %arg14: tensor<768xbf16>, %arg15: tensor<768x3x12x64xbf16>, %arg16: tensor<3x12x64xbf16>, %arg17: tensor<12x64x768xbf16>, %arg18: tensor<768xbf16>, %arg19: tensor<768xbf16>, %arg20: tensor<768xbf16>, %arg21: tensor<768x3072xbf16>, %arg22: tensor<3072xbf16>, %arg23: tensor<3072x768xbf16>, %arg24: tensor<2xui32>) -> (tensor<32x1024x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3x12x64xbf16>, tensor<3x12x64xbf16>, tensor<12x64x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3072xbf16>, tensor<3072xbf16>, tensor<3072x768xbf16>, tensor<768xbf16>) {
    %0 = call @_threefry_split_115(%arg24) : (tensor<2xui32>) -> tensor<4x2xui32>
    %1 = stablehlo.slice %0 [1:2, 0:2] : (tensor<4x2xui32>) -> tensor<1x2xui32>
    %2 = stablehlo.reshape %1 : (tensor<1x2xui32>) -> tensor<2xui32>
    %3 = stablehlo.slice %0 [3:4, 0:2] : (tensor<4x2xui32>) -> tensor<1x2xui32>
    %4 = stablehlo.reshape %3 : (tensor<1x2xui32>) -> tensor<2xui32>
    %5 = stablehlo.convert %arg12 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %6 = stablehlo.reduce(%5 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %cst_0 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %7 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %8 = stablehlo.divide %6, %7 : tensor<32x1024xf32>
    %9 = stablehlo.convert %8 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %c = stablehlo.constant dense<0> : tensor<i32>
    %10:4 = call @_var_278(%arg12, %c) : (tensor<32x1024x768xbf16>, tensor<i32>) -> (tensor<32x1024xbf16>, tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>)
    %cst_1 = stablehlo.constant dense<1.001360e-05> : tensor<bf16>
    %11 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %12 = stablehlo.add %10#0, %11 : tensor<32x1024xbf16>
    %13 = stablehlo.rsqrt %12 : tensor<32x1024xbf16>
    %14 = stablehlo.divide %13, %12 : tensor<32x1024xbf16>
    %cst_2 = stablehlo.constant dense<-5.000000e-01> : tensor<bf16>
    %15 = stablehlo.broadcast_in_dim %cst_2, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %16 = stablehlo.multiply %15, %14 : tensor<32x1024xbf16>
    %17 = stablehlo.broadcast_in_dim %9, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %18 = stablehlo.transpose %17, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %19 = stablehlo.subtract %arg12, %18 : tensor<32x1024x768xbf16>
    %20 = stablehlo.broadcast_in_dim %13, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %21 = stablehlo.transpose %20, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %22 = stablehlo.multiply %19, %21 : tensor<32x1024x768xbf16>
    %23 = stablehlo.broadcast_in_dim %arg13, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %24 = stablehlo.multiply %23, %22 : tensor<32x1024x768xbf16>
    %25 = stablehlo.broadcast_in_dim %arg14, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %26 = stablehlo.add %24, %25 : tensor<32x1024x768xbf16>
    %cst_3 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %27 = stablehlo.broadcast_in_dim %cst_3, dims = [] : (tensor<bf16>) -> tensor<768x3x12x64xbf16>
    %28 = stablehlo.multiply %arg15, %27 : tensor<768x3x12x64xbf16>
    %29 = stablehlo.dot_general %26, %28, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<768x3x12x64xbf16>) -> tensor<32x1024x3x12x64xbf16>
    %30 = sdy.sharding_constraint %29 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %31 = sdy.sharding_constraint %30 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %32 = stablehlo.broadcast_in_dim %arg16, dims = [2, 3, 4] : (tensor<3x12x64xbf16>) -> tensor<32x1024x3x12x64xbf16>
    %33 = stablehlo.add %31, %32 : tensor<32x1024x3x12x64xbf16>
    %34 = sdy.sharding_constraint %33 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %35 = stablehlo.transpose %34, dims = [0, 2, 3, 1, 4] : (tensor<32x1024x3x12x64xbf16>) -> tensor<32x3x12x1024x64xbf16>
    %36:2 = call @_take_280(%35, %c) : (tensor<32x3x12x1024x64xbf16>, tensor<i32>) -> (tensor<32x12x1024x64xbf16>, tensor<1xi32>)
    %c_4 = stablehlo.constant dense<1> : tensor<i32>
    %37:2 = call @_take_280(%35, %c_4) : (tensor<32x3x12x1024x64xbf16>, tensor<i32>) -> (tensor<32x12x1024x64xbf16>, tensor<1xi32>)
    %c_5 = stablehlo.constant dense<2> : tensor<i32>
    %38:2 = call @_take_280(%35, %c_5) : (tensor<32x3x12x1024x64xbf16>, tensor<i32>) -> (tensor<32x12x1024x64xbf16>, tensor<1xi32>)
    %39 = sdy.sharding_constraint %36#0 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %40 = sdy.sharding_constraint %37#0 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %41 = sdy.sharding_constraint %38#0 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %cst_6 = stablehlo.constant dense<1.250000e-01> : tensor<bf16>
    %42 = stablehlo.broadcast_in_dim %cst_6, dims = [] : (tensor<bf16>) -> tensor<32x12x1024x64xbf16>
    %43 = stablehlo.multiply %39, %42 : tensor<32x12x1024x64xbf16>
    %44:5 = sdy.manual_computation(%arg2, %arg3, %arg4, %43, %40, %41, %arg0, %arg1) in_shardings=[<@mesh, [{}, {}, {}]>, <@mesh, [{}, {}, {}]>, <@mesh, [{}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data"}, {}]>, <@mesh, [{"replica", "data"}, {}]>] out_shardings=[<@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}]>] manual_axes={"replica", "data", "model"} (%arg25: tensor<1x2x2xi8>, %arg26: tensor<1x2x2xi8>, %arg27: tensor<1024xi32>, %arg28: tensor<8x12x1024x64xbf16>, %arg29: tensor<8x12x1024x64xbf16>, %arg30: tensor<8x12x1024x64xbf16>, %arg31: tensor<8x1024xi32>, %arg32: tensor<8x1024xi32>) {
      %231 = stablehlo.convert %arg28 : (tensor<8x12x1024x64xbf16>) -> tensor<8x12x1024x64xf32>
      %232 = stablehlo.convert %arg29 : (tensor<8x12x1024x64xbf16>) -> tensor<8x12x1024x64xf32>
      %233 = stablehlo.convert %arg30 : (tensor<8x12x1024x64xbf16>) -> tensor<8x12x1024x64xf32>
      %234:2 = func.call @_splash_attention_283(%arg25, %arg26, %arg27, %231, %232, %233, %arg31, %arg32) : (tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x1024xi32>, tensor<8x1024xi32>) -> (tensor<8x12x1024x64xf32>, tensor<8x12x1024xf32>)
      sdy.return %234#0, %231, %232, %233, %234#1 : tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024xf32>
    } : (tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<32x12x1024x64xbf16>, tensor<32x12x1024x64xbf16>, tensor<32x12x1024x64xbf16>, tensor<32x1024xi32>, tensor<32x1024xi32>) -> (tensor<32x12x1024x64xf32>, tensor<32x12x1024x64xf32>, tensor<32x12x1024x64xf32>, tensor<32x12x1024x64xf32>, tensor<32x12x1024xf32>)
    %45 = stablehlo.convert %44#0 : (tensor<32x12x1024x64xf32>) -> tensor<32x12x1024x64xbf16>
    %46 = sdy.sharding_constraint %45 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %cst_7 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %47 = stablehlo.broadcast_in_dim %cst_7, dims = [] : (tensor<bf16>) -> tensor<12x64x768xbf16>
    %48 = stablehlo.multiply %arg17, %47 : tensor<12x64x768xbf16>
    %49 = stablehlo.dot_general %46, %48, contracting_dims = [1, 3] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<32x12x1024x64xbf16>, tensor<12x64x768xbf16>) -> tensor<32x1024x768xbf16>
    %50 = sdy.sharding_constraint %49 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %51 = sdy.sharding_constraint %50 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %52 = stablehlo.broadcast_in_dim %arg18, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %53 = stablehlo.add %51, %52 : tensor<32x1024x768xbf16>
    %54 = sdy.sharding_constraint %53 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %cst_8 = stablehlo.constant dense<8.000000e-01> : tensor<f32>
    %55 = stablehlo.broadcast_in_dim %cst_8, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %56 = stablehlo.convert %55 : tensor<32x1024x768xf32>
    %57 = call @_bernoulli_286(%2, %56) : (tensor<2xui32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    %58 = sdy.sharding_constraint %57 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xi1>
    %cst_9 = stablehlo.constant dense<8.007810e-01> : tensor<bf16>
    %59 = stablehlo.broadcast_in_dim %cst_9, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %60 = stablehlo.divide %54, %59 : tensor<32x1024x768xbf16>
    %61 = call @_where_288(%58, %60, %c) : (tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>, tensor<i32>) -> tensor<32x1024x768xbf16>
    %62 = stablehlo.add %arg12, %61 : tensor<32x1024x768xbf16>
    %63 = stablehlo.convert %62 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst_10 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %64 = stablehlo.reduce(%63 init: %cst_10) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %cst_11 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %65 = stablehlo.broadcast_in_dim %cst_11, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %66 = stablehlo.divide %64, %65 : tensor<32x1024xf32>
    %67 = stablehlo.convert %66 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %68:4 = call @_var_278(%62, %c) : (tensor<32x1024x768xbf16>, tensor<i32>) -> (tensor<32x1024xbf16>, tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>)
    %cst_12 = stablehlo.constant dense<1.001360e-05> : tensor<bf16>
    %69 = stablehlo.broadcast_in_dim %cst_12, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %70 = stablehlo.add %68#0, %69 : tensor<32x1024xbf16>
    %71 = stablehlo.rsqrt %70 : tensor<32x1024xbf16>
    %72 = stablehlo.divide %71, %70 : tensor<32x1024xbf16>
    %cst_13 = stablehlo.constant dense<-5.000000e-01> : tensor<bf16>
    %73 = stablehlo.broadcast_in_dim %cst_13, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %74 = stablehlo.multiply %73, %72 : tensor<32x1024xbf16>
    %75 = stablehlo.broadcast_in_dim %67, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %76 = stablehlo.transpose %75, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %77 = stablehlo.subtract %62, %76 : tensor<32x1024x768xbf16>
    %78 = stablehlo.broadcast_in_dim %71, dims = [1, 2] : (tensor<32x1024xbf16>) -> tensor<768x32x1024xbf16>
    %79 = stablehlo.transpose %78, dims = [1, 2, 0] : (tensor<768x32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %80 = stablehlo.multiply %77, %79 : tensor<32x1024x768xbf16>
    %81 = stablehlo.broadcast_in_dim %arg19, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %82 = stablehlo.multiply %81, %80 : tensor<32x1024x768xbf16>
    %83 = stablehlo.broadcast_in_dim %arg20, dims = [2] : (tensor<768xbf16>) -> tensor<32x1024x768xbf16>
    %84 = stablehlo.add %82, %83 : tensor<32x1024x768xbf16>
    %cst_14 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %85 = stablehlo.broadcast_in_dim %cst_14, dims = [] : (tensor<bf16>) -> tensor<768x3072xbf16>
    %86 = stablehlo.multiply %arg21, %85 : tensor<768x3072xbf16>
    %87 = stablehlo.dot_general %84, %86, contracting_dims = [2] x [0], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<768x3072xbf16>) -> tensor<32x1024x3072xbf16>
    %88 = sdy.sharding_constraint %87 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %89 = sdy.sharding_constraint %88 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %90 = stablehlo.broadcast_in_dim %arg22, dims = [2] : (tensor<3072xbf16>) -> tensor<32x1024x3072xbf16>
    %91 = stablehlo.add %89, %90 : tensor<32x1024x3072xbf16>
    %92 = sdy.sharding_constraint %91 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %93 = stablehlo.multiply %92, %92 : tensor<32x1024x3072xbf16>
    %94 = stablehlo.multiply %93, %92 : tensor<32x1024x3072xbf16>
    %95 = stablehlo.multiply %92, %92 : tensor<32x1024x3072xbf16>
    %cst_15 = stablehlo.constant dense<3.000000e+00> : tensor<bf16>
    %96 = stablehlo.broadcast_in_dim %cst_15, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %97 = stablehlo.multiply %96, %95 : tensor<32x1024x3072xbf16>
    %cst_16 = stablehlo.constant dense<4.467770e-02> : tensor<bf16>
    %98 = stablehlo.broadcast_in_dim %cst_16, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %99 = stablehlo.multiply %98, %94 : tensor<32x1024x3072xbf16>
    %100 = stablehlo.add %92, %99 : tensor<32x1024x3072xbf16>
    %cst_17 = stablehlo.constant dense<7.968750e-01> : tensor<bf16>
    %101 = stablehlo.broadcast_in_dim %cst_17, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %102 = stablehlo.multiply %101, %100 : tensor<32x1024x3072xbf16>
    %103 = stablehlo.tanh %102 : tensor<32x1024x3072xbf16>
    %cst_18 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %104 = stablehlo.broadcast_in_dim %cst_18, dims = [] : (tensor<bf16>) -> tensor<bf16>
    %105 = stablehlo.broadcast_in_dim %104, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %106 = stablehlo.subtract %105, %103 : tensor<32x1024x3072xbf16>
    %cst_19 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %107 = stablehlo.broadcast_in_dim %cst_19, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %108 = stablehlo.add %107, %103 : tensor<32x1024x3072xbf16>
    %cst_20 = stablehlo.constant dense<5.000000e-01> : tensor<bf16>
    %109 = stablehlo.broadcast_in_dim %cst_20, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %110 = stablehlo.multiply %109, %108 : tensor<32x1024x3072xbf16>
    %111 = stablehlo.multiply %92, %110 : tensor<32x1024x3072xbf16>
    %cst_21 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %112 = stablehlo.broadcast_in_dim %cst_21, dims = [] : (tensor<bf16>) -> tensor<3072x768xbf16>
    %113 = stablehlo.multiply %arg23, %112 : tensor<3072x768xbf16>
    %cst_22 = stablehlo.constant dense<8.000000e-01> : tensor<f32>
    %114 = stablehlo.broadcast_in_dim %cst_22, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %115 = stablehlo.convert %114 : tensor<32x1024x768xf32>
    %116 = call @_bernoulli_286(%4, %115) : (tensor<2xui32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    %117 = sdy.sharding_constraint %116 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xi1>
    %118 = call @_where_292(%117, %arg11) : (tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16>
    %cst_23 = stablehlo.constant dense<8.007810e-01> : tensor<bf16>
    %119 = stablehlo.broadcast_in_dim %cst_23, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %120 = stablehlo.divide %118, %119 : tensor<32x1024x768xbf16>
    %121 = sdy.sharding_constraint %120 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %cst_24 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %122 = stablehlo.reduce(%121 init: %cst_24) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %123 = sdy.sharding_constraint %121 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %124 = sdy.sharding_constraint %123 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %125 = stablehlo.dot_general %124, %111, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<32x1024x3072xbf16>) -> tensor<768x3072xbf16>
    %126 = stablehlo.transpose %125, dims = [1, 0] : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %127 = stablehlo.dot_general %124, %113, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<3072x768xbf16>) -> tensor<32x1024x3072xbf16>
    %cst_25 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %128 = stablehlo.broadcast_in_dim %cst_25, dims = [] : (tensor<bf16>) -> tensor<3072x768xbf16>
    %129 = stablehlo.multiply %126, %128 : tensor<3072x768xbf16>
    %130 = stablehlo.multiply %92, %127 : tensor<32x1024x3072xbf16>
    %131 = stablehlo.multiply %127, %110 : tensor<32x1024x3072xbf16>
    %cst_26 = stablehlo.constant dense<5.000000e-01> : tensor<bf16>
    %132 = stablehlo.broadcast_in_dim %cst_26, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %133 = stablehlo.multiply %132, %130 : tensor<32x1024x3072xbf16>
    %134 = stablehlo.multiply %133, %106 : tensor<32x1024x3072xbf16>
    %135 = stablehlo.multiply %134, %103 : tensor<32x1024x3072xbf16>
    %136 = stablehlo.add %134, %135 : tensor<32x1024x3072xbf16>
    %cst_27 = stablehlo.constant dense<7.968750e-01> : tensor<bf16>
    %137 = stablehlo.broadcast_in_dim %cst_27, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %138 = stablehlo.multiply %137, %136 : tensor<32x1024x3072xbf16>
    %139 = stablehlo.add %131, %138 : tensor<32x1024x3072xbf16>
    %cst_28 = stablehlo.constant dense<4.467770e-02> : tensor<bf16>
    %140 = stablehlo.broadcast_in_dim %cst_28, dims = [] : (tensor<bf16>) -> tensor<32x1024x3072xbf16>
    %141 = stablehlo.multiply %140, %138 : tensor<32x1024x3072xbf16>
    %142 = stablehlo.multiply %141, %97 : tensor<32x1024x3072xbf16>
    %143 = stablehlo.add %139, %142 : tensor<32x1024x3072xbf16>
    %144 = sdy.sharding_constraint %143 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %cst_29 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %145 = stablehlo.reduce(%144 init: %cst_29) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x3072xbf16>, tensor<bf16>) -> tensor<3072xbf16>
    %146 = sdy.sharding_constraint %144 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %147 = sdy.sharding_constraint %146 <@mesh, [{"replica", "data"}, {}, {"model"}]> : tensor<32x1024x3072xbf16>
    %148 = stablehlo.dot_general %147, %84, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x3072xbf16>, tensor<32x1024x768xbf16>) -> tensor<3072x768xbf16>
    %149 = stablehlo.transpose %148, dims = [1, 0] : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %150 = stablehlo.dot_general %147, %86, contracting_dims = [2] x [1], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x3072xbf16>, tensor<768x3072xbf16>) -> tensor<32x1024x768xbf16>
    %cst_30 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %151 = stablehlo.broadcast_in_dim %cst_30, dims = [] : (tensor<bf16>) -> tensor<768x3072xbf16>
    %152 = stablehlo.multiply %149, %151 : tensor<768x3072xbf16>
    %cst_31 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %153 = stablehlo.reduce(%150 init: %cst_31) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %154 = stablehlo.multiply %81, %150 : tensor<32x1024x768xbf16>
    %155 = stablehlo.multiply %150, %80 : tensor<32x1024x768xbf16>
    %cst_32 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %156 = stablehlo.reduce(%155 init: %cst_32) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %157 = stablehlo.multiply %77, %154 : tensor<32x1024x768xbf16>
    %158 = stablehlo.multiply %154, %79 : tensor<32x1024x768xbf16>
    %159 = stablehlo.transpose %157, dims = [2, 0, 1] : (tensor<32x1024x768xbf16>) -> tensor<768x32x1024xbf16>
    %cst_33 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %160 = stablehlo.reduce(%159 init: %cst_33) applies stablehlo.add across dimensions = [0] : (tensor<768x32x1024xbf16>, tensor<bf16>) -> tensor<32x1024xbf16>
    %161 = stablehlo.negate %158 : tensor<32x1024x768xbf16>
    %162 = stablehlo.add %arg11, %158 : tensor<32x1024x768xbf16>
    %163 = stablehlo.transpose %161, dims = [2, 0, 1] : (tensor<32x1024x768xbf16>) -> tensor<768x32x1024xbf16>
    %cst_34 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %164 = stablehlo.reduce(%163 init: %cst_34) applies stablehlo.add across dimensions = [0] : (tensor<768x32x1024xbf16>, tensor<bf16>) -> tensor<32x1024xbf16>
    %165 = stablehlo.multiply %160, %74 : tensor<32x1024xbf16>
    %166 = call @_var_301(%68#1, %68#2, %68#3, %165) : (tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %167 = stablehlo.add %162, %166 : tensor<32x1024x768xbf16>
    %168 = stablehlo.convert %164 : (tensor<32x1024xbf16>) -> tensor<32x1024xf32>
    %cst_35 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %169 = stablehlo.broadcast_in_dim %cst_35, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %170 = stablehlo.divide %168, %169 : tensor<32x1024xf32>
    %171 = stablehlo.broadcast_in_dim %170, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x768xf32>
    %172 = stablehlo.convert %171 : (tensor<32x1024x768xf32>) -> tensor<32x1024x768xbf16>
    %173 = stablehlo.add %167, %172 : tensor<32x1024x768xbf16>
    %174 = call @_where_303(%58, %173) : (tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16>
    %cst_36 = stablehlo.constant dense<8.007810e-01> : tensor<bf16>
    %175 = stablehlo.broadcast_in_dim %cst_36, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %176 = stablehlo.divide %174, %175 : tensor<32x1024x768xbf16>
    %177 = sdy.sharding_constraint %176 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %cst_37 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %178 = stablehlo.reduce(%177 init: %cst_37) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %179 = sdy.sharding_constraint %177 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %180 = sdy.sharding_constraint %179 <@mesh, [{"replica", "data"}, {}, {}]> : tensor<32x1024x768xbf16>
    %181 = stablehlo.dot_general %180, %46, contracting_dims = [0, 1] x [0, 2], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<32x12x1024x64xbf16>) -> tensor<768x12x64xbf16>
    %182 = stablehlo.transpose %181, dims = [1, 2, 0] : (tensor<768x12x64xbf16>) -> tensor<12x64x768xbf16>
    %183 = stablehlo.dot_general %180, %48, contracting_dims = [2] x [2], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x768xbf16>, tensor<12x64x768xbf16>) -> tensor<32x1024x12x64xbf16>
    %184 = stablehlo.transpose %183, dims = [0, 2, 1, 3] : (tensor<32x1024x12x64xbf16>) -> tensor<32x12x1024x64xbf16>
    %cst_38 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %185 = stablehlo.broadcast_in_dim %cst_38, dims = [] : (tensor<bf16>) -> tensor<12x64x768xbf16>
    %186 = stablehlo.multiply %182, %185 : tensor<12x64x768xbf16>
    %187 = sdy.sharding_constraint %184 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %188 = stablehlo.convert %187 : (tensor<32x12x1024x64xbf16>) -> tensor<32x12x1024x64xf32>
    %189:3 = sdy.manual_computation(%188, %44#1, %44#2, %44#3, %arg0, %arg1, %44#0, %44#4, %arg5, %arg6, %arg7, %arg8, %arg9, %arg10) in_shardings=[<@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}, {}]>, <@mesh, [{"replica", "data"}, {}]>, <@mesh, [{"replica", "data"}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data", "model"}, {}, {}]>, <@mesh, [{}, {}, {}]>, <@mesh, [{}, {}, {}]>, <@mesh, [{}]>, <@mesh, [{}, {}, {}]>, <@mesh, [{}, {}, {}]>, <@mesh, [{}]>] out_shardings=[<@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>, <@mesh, [{"replica", "data"}, {"model"}, {}, {}]>] manual_axes={"replica", "data", "model"} (%arg25: tensor<8x12x1024x64xf32>, %arg26: tensor<8x12x1024x64xf32>, %arg27: tensor<8x12x1024x64xf32>, %arg28: tensor<8x12x1024x64xf32>, %arg29: tensor<8x1024xi32>, %arg30: tensor<8x1024xi32>, %arg31: tensor<8x12x1024x64xf32>, %arg32: tensor<8x12x1024xf32>, %arg33: tensor<1x2x2xi8>, %arg34: tensor<1x2x2xi8>, %arg35: tensor<1024xi32>, %arg36: tensor<1x2x2xi8>, %arg37: tensor<1x2x2xi8>, %arg38: tensor<1024xi32>) {
      %231:3 = func.call @_splash_attention_310(%arg26, %arg27, %arg28, %arg29, %arg30, %arg31, %arg32, %arg33, %arg34, %arg35, %arg36, %arg37, %arg38, %arg25) : (tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x1024xi32>, tensor<8x1024xi32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024xf32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<8x12x1024x64xf32>) -> (tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>)
      %232 = stablehlo.convert %231#2 : (tensor<8x12x1024x64xf32>) -> tensor<8x12x1024x64xbf16>
      %233 = stablehlo.convert %231#1 : (tensor<8x12x1024x64xf32>) -> tensor<8x12x1024x64xbf16>
      %234 = stablehlo.convert %231#0 : (tensor<8x12x1024x64xf32>) -> tensor<8x12x1024x64xbf16>
      sdy.return %234, %233, %232 : tensor<8x12x1024x64xbf16>, tensor<8x12x1024x64xbf16>, tensor<8x12x1024x64xbf16>
    } : (tensor<32x12x1024x64xf32>, tensor<32x12x1024x64xf32>, tensor<32x12x1024x64xf32>, tensor<32x12x1024x64xf32>, tensor<32x1024xi32>, tensor<32x1024xi32>, tensor<32x12x1024x64xf32>, tensor<32x12x1024xf32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>, tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<1024xi32>) -> (tensor<32x12x1024x64xbf16>, tensor<32x12x1024x64xbf16>, tensor<32x12x1024x64xbf16>)
    %cst_39 = stablehlo.constant dense<1.250000e-01> : tensor<bf16>
    %190 = stablehlo.broadcast_in_dim %cst_39, dims = [] : (tensor<bf16>) -> tensor<32x12x1024x64xbf16>
    %191 = stablehlo.multiply %189#0, %190 : tensor<32x12x1024x64xbf16>
    %192 = sdy.sharding_constraint %189#2 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %193 = sdy.sharding_constraint %189#1 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %194 = sdy.sharding_constraint %191 <@mesh, [{"replica", "data"}, {"model"}, {}, {}]> : tensor<32x12x1024x64xbf16>
    %195 = call @_take_319(%38#1, %192) : (tensor<1xi32>, tensor<32x12x1024x64xbf16>) -> tensor<32x3x12x1024x64xbf16>
    %196 = call @_take_319(%37#1, %193) : (tensor<1xi32>, tensor<32x12x1024x64xbf16>) -> tensor<32x3x12x1024x64xbf16>
    %197 = stablehlo.add %195, %196 : tensor<32x3x12x1024x64xbf16>
    %198 = call @_take_319(%36#1, %194) : (tensor<1xi32>, tensor<32x12x1024x64xbf16>) -> tensor<32x3x12x1024x64xbf16>
    %199 = stablehlo.add %197, %198 : tensor<32x3x12x1024x64xbf16>
    %200 = stablehlo.transpose %199, dims = [0, 3, 1, 2, 4] : (tensor<32x3x12x1024x64xbf16>) -> tensor<32x1024x3x12x64xbf16>
    %201 = sdy.sharding_constraint %200 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %cst_40 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %202 = stablehlo.reduce(%201 init: %cst_40) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x3x12x64xbf16>, tensor<bf16>) -> tensor<3x12x64xbf16>
    %203 = sdy.sharding_constraint %201 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %204 = sdy.sharding_constraint %203 <@mesh, [{"replica", "data"}, {}, {}, {"model"}, {}]> : tensor<32x1024x3x12x64xbf16>
    %205 = stablehlo.dot_general %204, %26, contracting_dims = [0, 1] x [0, 1], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x3x12x64xbf16>, tensor<32x1024x768xbf16>) -> tensor<3x12x64x768xbf16>
    %206 = stablehlo.transpose %205, dims = [3, 0, 1, 2] : (tensor<3x12x64x768xbf16>) -> tensor<768x3x12x64xbf16>
    %207 = stablehlo.dot_general %204, %28, contracting_dims = [2, 3, 4] x [1, 2, 3], precision = [DEFAULT, DEFAULT] : (tensor<32x1024x3x12x64xbf16>, tensor<768x3x12x64xbf16>) -> tensor<32x1024x768xbf16>
    %cst_41 = stablehlo.constant dense<1.000000e+00> : tensor<bf16>
    %208 = stablehlo.broadcast_in_dim %cst_41, dims = [] : (tensor<bf16>) -> tensor<768x3x12x64xbf16>
    %209 = stablehlo.multiply %206, %208 : tensor<768x3x12x64xbf16>
    %cst_42 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %210 = stablehlo.reduce(%207 init: %cst_42) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %211 = stablehlo.multiply %23, %207 : tensor<32x1024x768xbf16>
    %212 = stablehlo.multiply %207, %22 : tensor<32x1024x768xbf16>
    %cst_43 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %213 = stablehlo.reduce(%212 init: %cst_43) applies stablehlo.add across dimensions = [0, 1] : (tensor<32x1024x768xbf16>, tensor<bf16>) -> tensor<768xbf16>
    %214 = stablehlo.multiply %19, %211 : tensor<32x1024x768xbf16>
    %215 = stablehlo.multiply %211, %21 : tensor<32x1024x768xbf16>
    %216 = stablehlo.transpose %214, dims = [2, 0, 1] : (tensor<32x1024x768xbf16>) -> tensor<768x32x1024xbf16>
    %cst_44 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %217 = stablehlo.reduce(%216 init: %cst_44) applies stablehlo.add across dimensions = [0] : (tensor<768x32x1024xbf16>, tensor<bf16>) -> tensor<32x1024xbf16>
    %218 = stablehlo.negate %215 : tensor<32x1024x768xbf16>
    %219 = stablehlo.add %173, %215 : tensor<32x1024x768xbf16>
    %220 = stablehlo.transpose %218, dims = [2, 0, 1] : (tensor<32x1024x768xbf16>) -> tensor<768x32x1024xbf16>
    %cst_45 = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %221 = stablehlo.reduce(%220 init: %cst_45) applies stablehlo.add across dimensions = [0] : (tensor<768x32x1024xbf16>, tensor<bf16>) -> tensor<32x1024xbf16>
    %222 = stablehlo.multiply %217, %16 : tensor<32x1024xbf16>
    %223 = call @_var_301(%10#1, %10#2, %10#3, %222) : (tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024x768xbf16>
    %224 = stablehlo.add %219, %223 : tensor<32x1024x768xbf16>
    %225 = stablehlo.convert %221 : (tensor<32x1024xbf16>) -> tensor<32x1024xf32>
    %cst_46 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %226 = stablehlo.broadcast_in_dim %cst_46, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %227 = stablehlo.divide %225, %226 : tensor<32x1024xf32>
    %228 = stablehlo.broadcast_in_dim %227, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x768xf32>
    %229 = stablehlo.convert %228 : (tensor<32x1024x768xf32>) -> tensor<32x1024x768xbf16>
    %230 = stablehlo.add %224, %229 : tensor<32x1024x768xbf16>
    return %230, %213, %210, %209, %202, %186, %178, %156, %153, %152, %145, %129, %122 : tensor<32x1024x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3x12x64xbf16>, tensor<3x12x64xbf16>, tensor<12x64x768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768xbf16>, tensor<768x3072xbf16>, tensor<3072xbf16>, tensor<3072x768xbf16>, tensor<768xbf16>
  }
  func.func private @_var_278(%arg0: tensor<32x1024x768xbf16>, %arg1: tensor<i32>) -> (tensor<32x1024xbf16>, tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>) {
    %0 = stablehlo.convert %arg0 : (tensor<32x1024x768xbf16>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %1 = stablehlo.reduce(%0 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %2 = stablehlo.broadcast_in_dim %1, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x1xf32>
    %cst_0 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %3 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x1024x1xf32>
    %4 = stablehlo.divide %2, %3 : tensor<32x1024x1xf32>
    %5 = stablehlo.broadcast_in_dim %4, dims = [0, 1, 2] : (tensor<32x1024x1xf32>) -> tensor<32x1024x768xf32>
    %6 = stablehlo.subtract %0, %5 : tensor<32x1024x768xf32>
    %7 = stablehlo.multiply %6, %6 : tensor<32x1024x768xf32>
    %cst_1 = stablehlo.constant dense<2.000000e+00> : tensor<f32>
    %8 = stablehlo.broadcast_in_dim %cst_1, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %9 = stablehlo.multiply %8, %6 : tensor<32x1024x768xf32>
    %10 = stablehlo.convert %arg1 : (tensor<i32>) -> tensor<f32>
    %cst_2 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %11 = stablehlo.subtract %cst_2, %10 : tensor<f32>
    %cst_3 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %12 = stablehlo.reduce(%7 init: %cst_3) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %13 = stablehlo.broadcast_in_dim %11, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %14 = stablehlo.divide %12, %13 : tensor<32x1024xf32>
    %15 = stablehlo.convert %14 : (tensor<32x1024xf32>) -> tensor<32x1024xbf16>
    %cst_4 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %16 = stablehlo.compare  GT, %11, %cst_4,  FLOAT : (tensor<f32>, tensor<f32>) -> tensor<i1>
    %cst_5 = stablehlo.constant dense<0x7FC00000> : tensor<f32>
    %17 = call @_where_279(%16, %15, %cst_5) : (tensor<i1>, tensor<32x1024xbf16>, tensor<f32>) -> tensor<32x1024xbf16>
    return %17, %9, %11, %16 : tensor<32x1024xbf16>, tensor<32x1024x768xf32>, tensor<f32>, tensor<i1>
  }
  func.func private @_where_279(%arg0: tensor<i1>, %arg1: tensor<32x1024xbf16>, %arg2: tensor<f32>) -> tensor<32x1024xbf16> {
    %0 = stablehlo.convert %arg2 : (tensor<f32>) -> tensor<bf16>
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %2 = stablehlo.select %arg0, %arg1, %1 : tensor<i1>, tensor<32x1024xbf16>
    return %2 : tensor<32x1024xbf16>
  }
  func.func private @_take_280(%arg0: tensor<32x3x12x1024x64xbf16>, %arg1: tensor<i32>) -> (tensor<32x12x1024x64xbf16>, tensor<1xi32>) {
    %c = stablehlo.constant dense<0> : tensor<i32>
    %0 = stablehlo.compare  LT, %arg1, %c,  SIGNED : (tensor<i32>, tensor<i32>) -> tensor<i1>
    %c_0 = stablehlo.constant dense<3> : tensor<i32>
    %1 = stablehlo.add %arg1, %c_0 : tensor<i32>
    %2 = call @_where_281(%0, %1, %arg1) : (tensor<i1>, tensor<i32>, tensor<i32>) -> tensor<i32>
    %3 = stablehlo.broadcast_in_dim %2, dims = [] : (tensor<i32>) -> tensor<1xi32>
    %c_1 = stablehlo.constant dense<2> : tensor<1xi32>
    %4 = stablehlo.convert %3 : tensor<1xi32>
    %c_2 = stablehlo.constant dense<0> : tensor<i32>
    %5 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<i32>) -> tensor<1xi32>
    %6 = stablehlo.compare  GE, %4, %5,  SIGNED : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %7 = stablehlo.compare  LE, %4, %c_1,  SIGNED : (tensor<1xi32>, tensor<1xi32>) -> tensor<1xi1>
    %8 = stablehlo.and %6, %7 : tensor<1xi1>
    %c_3 = stablehlo.constant dense<true> : tensor<i1>
    %9 = stablehlo.reduce(%8 init: %c_3) applies stablehlo.and across dimensions = [0] : (tensor<1xi1>, tensor<i1>) -> tensor<i1>
    %10 = "stablehlo.gather"(%arg0, %4) <{dimension_numbers = #stablehlo.gather<offset_dims = [0, 1, 2, 3], collapsed_slice_dims = [1], start_index_map = [1]>, indices_are_sorted = false, slice_sizes = array<i64: 32, 1, 12, 1024, 64>}> : (tensor<32x3x12x1024x64xbf16>, tensor<1xi32>) -> tensor<32x12x1024x64xbf16>
    %11 = stablehlo.broadcast_in_dim %9, dims = [] : (tensor<i1>) -> tensor<32x12x1024x64xi1>
    %cst = stablehlo.constant dense<0x7FC0> : tensor<bf16>
    %12 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x12x1024x64xbf16>
    %13 = stablehlo.select %11, %10, %12 : tensor<32x12x1024x64xi1>, tensor<32x12x1024x64xbf16>
    return %13, %3 : tensor<32x12x1024x64xbf16>, tensor<1xi32>
  }
  func.func private @_where_281(%arg0: tensor<i1>, %arg1: tensor<i32>, %arg2: tensor<i32>) -> tensor<i32> {
    %0 = stablehlo.select %arg0, %arg1, %arg2 : tensor<i1>, tensor<i32>
    return %0 : tensor<i32>
  }
  func.func private @_splash_attention_283(%arg0: tensor<1x2x2xi8>, %arg1: tensor<1x2x2xi8>, %arg2: tensor<1024xi32>, %arg3: tensor<8x12x1024x64xf32>, %arg4: tensor<8x12x1024x64xf32>, %arg5: tensor<8x12x1024x64xf32>, %arg6: tensor<8x1024xi32>, %arg7: tensor<8x1024xi32>) -> (tensor<8x12x1024x64xf32>, tensor<8x12x1024xf32>) {
    %0 = stablehlo.broadcast_in_dim %arg6, dims = [0, 1] : (tensor<8x1024xi32>) -> tensor<8x1024x128xi32>
    %1 = stablehlo.broadcast_in_dim %arg7, dims = [0, 2] : (tensor<8x1024xi32>) -> tensor<8x8x1024xi32>
    %2 = stablehlo.broadcast_in_dim %arg2, dims = [0] : (tensor<1024xi32>) -> tensor<1024x128xi32>
    %3:5 = stablehlo.custom_call @tpu_custom_call(%arg0, %arg1, %arg3, %arg4, %arg5, %0, %1, %2) {backend_config = "{\22custom_call_config\22: {\22body\22: \\22, \22serialization_format\22: 1, \22needs_layout_passes\22: true}}", kernel_name = "splash_mha_fwd_segmented_residuals_block_kv_512_block_kv_compute_512_block_kv_dkv_512_block_kv_dkv_compute_512_block_kv_dq_512_block_q_512_block_q_dkv_512_block_q_dq_512_k_layout_1_q_layout_1_use_fused_bwd_kernel_False_v_layout_1", operand_layouts = [dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[1, 0]> : tensor<2xindex>], result_layouts = [dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>]} : (tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x1024x128xi32>, tensor<8x8x1024xi32>, tensor<1024x128xi32>) -> (tensor<8x512x128xf32>, tensor<8x512x128xf32>, tensor<8x512x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x128xf32>)
    %4 = stablehlo.slice %3#4 [0:8, 0:12, 0:1024, 0:1] : (tensor<8x12x1024x128xf32>) -> tensor<8x12x1024x1xf32>
    %5 = stablehlo.reshape %4 : (tensor<8x12x1024x1xf32>) -> tensor<8x12x1024xf32>
    return %3#3, %5 : tensor<8x12x1024x64xf32>, tensor<8x12x1024xf32>
  }
  func.func private @_bernoulli_286(%arg0: tensor<2xui32>, %arg1: tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %cst_0 = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %0 = call @_uniform_287(%arg0, %cst, %cst_0) : (tensor<2xui32>, tensor<f32>, tensor<f32>) -> tensor<32x1024x768xf32>
    %1 = stablehlo.compare  LT, %0, %arg1,  FLOAT : (tensor<32x1024x768xf32>, tensor<32x1024x768xf32>) -> tensor<32x1024x768xi1>
    return %1 : tensor<32x1024x768xi1>
  }
  func.func private @_uniform_287(%arg0: tensor<2xui32>, %arg1: tensor<f32>, %arg2: tensor<f32>) -> tensor<32x1024x768xf32> {
    %0 = stablehlo.convert %arg1 : tensor<f32>
    %1 = stablehlo.convert %arg2 : tensor<f32>
    %2 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<f32>) -> tensor<1x1x1xf32>
    %3 = stablehlo.broadcast_in_dim %1, dims = [] : (tensor<f32>) -> tensor<1x1x1xf32>
    %4 = stablehlo.slice %arg0 [0:1] : (tensor<2xui32>) -> tensor<1xui32>
    %5 = stablehlo.reshape %4 : (tensor<1xui32>) -> tensor<ui32>
    %6 = stablehlo.slice %arg0 [1:2] : (tensor<2xui32>) -> tensor<1xui32>
    %7 = stablehlo.reshape %6 : (tensor<1xui32>) -> tensor<ui32>
    %8 = stablehlo.iota dim = 0 : tensor<32x1024x768xui64>
    %9 = stablehlo.iota dim = 1 : tensor<32x1024x768xui64>
    %10 = stablehlo.iota dim = 2 : tensor<32x1024x768xui64>
    %c = stablehlo.constant dense<786432> : tensor<ui64>
    %11 = stablehlo.broadcast_in_dim %c, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %12 = stablehlo.multiply %11, %8 : tensor<32x1024x768xui64>
    %c_0 = stablehlo.constant dense<768> : tensor<ui64>
    %13 = stablehlo.broadcast_in_dim %c_0, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %14 = stablehlo.multiply %13, %9 : tensor<32x1024x768xui64>
    %c_1 = stablehlo.constant dense<1> : tensor<ui64>
    %15 = stablehlo.broadcast_in_dim %c_1, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %16 = stablehlo.multiply %15, %10 : tensor<32x1024x768xui64>
    %17 = stablehlo.add %12, %14 : tensor<32x1024x768xui64>
    %18 = stablehlo.add %17, %16 : tensor<32x1024x768xui64>
    %c_2 = stablehlo.constant dense<32> : tensor<ui64>
    %19 = stablehlo.broadcast_in_dim %c_2, dims = [] : (tensor<ui64>) -> tensor<32x1024x768xui64>
    %20 = stablehlo.shift_right_logical %18, %19 : tensor<32x1024x768xui64>
    %21 = stablehlo.convert %18 : (tensor<32x1024x768xui64>) -> tensor<32x1024x768xui32>
    %22 = stablehlo.convert %20 : (tensor<32x1024x768xui64>) -> tensor<32x1024x768xui32>
    %23:2 = call @threefry2x32_40(%5, %7, %22, %21) : (tensor<ui32>, tensor<ui32>, tensor<32x1024x768xui32>, tensor<32x1024x768xui32>) -> (tensor<32x1024x768xui32>, tensor<32x1024x768xui32>)
    %24 = stablehlo.xor %23#0, %23#1 : tensor<32x1024x768xui32>
    %c_3 = stablehlo.constant dense<9> : tensor<ui32>
    %25 = stablehlo.broadcast_in_dim %c_3, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %26 = stablehlo.shift_right_logical %24, %25 : tensor<32x1024x768xui32>
    %c_4 = stablehlo.constant dense<1065353216> : tensor<ui32>
    %27 = stablehlo.broadcast_in_dim %c_4, dims = [] : (tensor<ui32>) -> tensor<32x1024x768xui32>
    %28 = stablehlo.or %26, %27 : tensor<32x1024x768xui32>
    %29 = stablehlo.bitcast_convert %28 : (tensor<32x1024x768xui32>) -> tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<1.000000e+00> : tensor<f32>
    %30 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<f32>) -> tensor<32x1024x768xf32>
    %31 = stablehlo.subtract %29, %30 : tensor<32x1024x768xf32>
    %32 = stablehlo.subtract %3, %2 : tensor<1x1x1xf32>
    %33 = stablehlo.broadcast_in_dim %32, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %34 = stablehlo.multiply %31, %33 : tensor<32x1024x768xf32>
    %35 = stablehlo.broadcast_in_dim %2, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %36 = stablehlo.add %34, %35 : tensor<32x1024x768xf32>
    %37 = stablehlo.broadcast_in_dim %2, dims = [0, 1, 2] : (tensor<1x1x1xf32>) -> tensor<32x1024x768xf32>
    %38 = stablehlo.maximum %37, %36 : tensor<32x1024x768xf32>
    return %38 : tensor<32x1024x768xf32>
  }
  func.func private @_where_288(%arg0: tensor<32x1024x768xi1>, %arg1: tensor<32x1024x768xbf16>, %arg2: tensor<i32>) -> tensor<32x1024x768xbf16> {
    %0 = stablehlo.convert %arg2 : (tensor<i32>) -> tensor<bf16>
    %1 = stablehlo.broadcast_in_dim %0, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %2 = stablehlo.select %arg0, %arg1, %1 : tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>
    return %2 : tensor<32x1024x768xbf16>
  }
  func.func private @_where_292(%arg0: tensor<32x1024x768xi1>, %arg1: tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %1 = stablehlo.select %arg0, %arg1, %0 : tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>
    return %1 : tensor<32x1024x768xbf16>
  }
  func.func private @_var_301(%arg0: tensor<32x1024x768xf32>, %arg1: tensor<f32>, %arg2: tensor<i1>, %arg3: tensor<32x1024xbf16>) -> tensor<32x1024x768xbf16> {
    %0 = call @_where_302(%arg2, %arg3) : (tensor<i1>, tensor<32x1024xbf16>) -> tensor<32x1024xbf16>
    %1 = stablehlo.convert %0 : (tensor<32x1024xbf16>) -> tensor<32x1024xf32>
    %2 = stablehlo.broadcast_in_dim %arg1, dims = [] : (tensor<f32>) -> tensor<32x1024xf32>
    %3 = stablehlo.divide %1, %2 : tensor<32x1024xf32>
    %4 = stablehlo.broadcast_in_dim %3, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x768xf32>
    %5 = stablehlo.multiply %4, %arg0 : tensor<32x1024x768xf32>
    %6 = stablehlo.negate %5 : tensor<32x1024x768xf32>
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %7 = stablehlo.reduce(%6 init: %cst) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x768xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %8 = stablehlo.reshape %7 : (tensor<32x1024xf32>) -> tensor<32x1024x1xf32>
    %cst_0 = stablehlo.constant dense<7.680000e+02> : tensor<f32>
    %9 = stablehlo.broadcast_in_dim %cst_0, dims = [] : (tensor<f32>) -> tensor<32x1024x1xf32>
    %10 = stablehlo.divide %8, %9 : tensor<32x1024x1xf32>
    %cst_1 = stablehlo.constant dense<0.000000e+00> : tensor<f32>
    %11 = stablehlo.reduce(%10 init: %cst_1) applies stablehlo.add across dimensions = [2] : (tensor<32x1024x1xf32>, tensor<f32>) -> tensor<32x1024xf32>
    %12 = stablehlo.broadcast_in_dim %11, dims = [0, 1] : (tensor<32x1024xf32>) -> tensor<32x1024x768xf32>
    %13 = stablehlo.add %5, %12 : tensor<32x1024x768xf32>
    %14 = stablehlo.convert %13 : (tensor<32x1024x768xf32>) -> tensor<32x1024x768xbf16>
    return %14 : tensor<32x1024x768xbf16>
  }
  func.func private @_where_302(%arg0: tensor<i1>, %arg1: tensor<32x1024xbf16>) -> tensor<32x1024xbf16> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x1024xbf16>
    %1 = stablehlo.select %arg0, %arg1, %0 : tensor<i1>, tensor<32x1024xbf16>
    return %1 : tensor<32x1024xbf16>
  }
  func.func private @_where_303(%arg0: tensor<32x1024x768xi1>, %arg1: tensor<32x1024x768xbf16>) -> tensor<32x1024x768xbf16> {
    %cst = stablehlo.constant dense<0.000000e+00> : tensor<bf16>
    %0 = stablehlo.broadcast_in_dim %cst, dims = [] : (tensor<bf16>) -> tensor<32x1024x768xbf16>
    %1 = stablehlo.select %arg0, %arg1, %0 : tensor<32x1024x768xi1>, tensor<32x1024x768xbf16>
    return %1 : tensor<32x1024x768xbf16>
  }
  func.func private @_splash_attention_310(%arg0: tensor<8x12x1024x64xf32>, %arg1: tensor<8x12x1024x64xf32>, %arg2: tensor<8x12x1024x64xf32>, %arg3: tensor<8x1024xi32>, %arg4: tensor<8x1024xi32>, %arg5: tensor<8x12x1024x64xf32>, %arg6: tensor<8x12x1024xf32>, %arg7: tensor<1x2x2xi8>, %arg8: tensor<1x2x2xi8>, %arg9: tensor<1024xi32>, %arg10: tensor<1x2x2xi8>, %arg11: tensor<1x2x2xi8>, %arg12: tensor<1024xi32>, %arg13: tensor<8x12x1024x64xf32>) -> (tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>) {
    %0 = stablehlo.dot_general %arg5, %arg13, batching_dims = [0, 1, 2] x [0, 1, 2], contracting_dims = [3] x [3], precision = [DEFAULT, DEFAULT] : (tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>) -> tensor<8x12x1024xf32>
    %1 = stablehlo.broadcast_in_dim %arg3, dims = [0, 2] : (tensor<8x1024xi32>) -> tensor<8x8x1024xi32>
    %2 = stablehlo.broadcast_in_dim %arg4, dims = [0, 1] : (tensor<8x1024xi32>) -> tensor<8x1024x128xi32>
    %3 = stablehlo.broadcast_in_dim %arg6, dims = [0, 1, 3] : (tensor<8x12x1024xf32>) -> tensor<8x12x1x1024xf32>
    %4 = stablehlo.broadcast_in_dim %3, dims = [0, 1, 2, 3] : (tensor<8x12x1x1024xf32>) -> tensor<8x12x8x1024xf32>
    %5 = stablehlo.broadcast_in_dim %0, dims = [0, 1, 3] : (tensor<8x12x1024xf32>) -> tensor<8x12x1x1024xf32>
    %6 = stablehlo.broadcast_in_dim %5, dims = [0, 1, 2, 3] : (tensor<8x12x1x1024xf32>) -> tensor<8x12x8x1024xf32>
    %7 = stablehlo.broadcast_in_dim %arg12, dims = [1] : (tensor<1024xi32>) -> tensor<8x1024xi32>
    %8:4 = stablehlo.custom_call @tpu_custom_call(%arg10, %arg11, %arg0, %arg1, %arg2, %1, %2, %4, %arg13, %6, %7) {backend_config = "{\22custom_call_config\22: {\22body\22: \\22, \22serialization_format\22: 1, \22needs_layout_passes\22: true}}", kernel_name = "splash_mha_dkv_segmented_block_kv_dkv_512_block_kv_dkv_compute_512_block_q_dkv_512_k_layout_1_q_layout_1_v_layout_1", operand_layouts = [dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[1, 0]> : tensor<2xindex>], result_layouts = [dense<[2, 1, 0]> : tensor<3xindex>, dense<[2, 1, 0]> : tensor<3xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>, dense<[3, 2, 1, 0]> : tensor<4xindex>]} : (tensor<1x2x2xi8>, tensor<1x2x2xi8>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x8x1024xi32>, tensor<8x1024x128xi32>, tensor<8x12x8x1024xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x8x1024xf32>, tensor<8x1024xi32>) -> (tensor<8x512x64xf32>, tensor<8x512x64xf32>, tensor<8x12x1024x64xf32>, tensor<8x12x1024x64xf32>)
    %9 = stablehlo.broadcast_in_dim %arg3, dims = [0, 1] : (tensor<8x1024xi32>) -> tensor<8x1024x128xi32>
    %10 = stablehlo.broadcast_in_dim %arg4, dims = [0, 2] : (tensor<8x1024xi32>) -> tensor<8x8x1024xi32>
    %11 = stablehlo.broadcast_in_dim %arg6, dims = [0, 1, 3] : (tensor<8x12x1024xf32>) -> tensor<8x12x1x1024xf32>
    %12 = stablehlo.broadcast_in_dim %0, dims = [0, 1, 3] : (tensor<8x12x1024xf32>) -> tensor<8x12x1x1024xf32>
    %13 = stablehlo.broadcast_in_dim %arg9, dims = [0] : (tensor<1024xi32>) -> tensor<1024x128xi32>
    %14:2 = stablehlo.custom_call @tpu_custom_call(%arg7, %arg8, %arg0, %arg1, %arg2, %9, %10, %11, %arg13, %12, %13) {backend_config = "{\22custom_call_config\22: {\22body\22: \22TUzvUgFNTElSMjIuMC4wZ2l0AAFHCQEDBQcBAwkDMwsNDxETFRcZGx0fISMlJykrLS8xMzU3OTsDFgVeBD0B+QcXFxcXExcLCwsLFwsLFwsXDxMXkwsbpRcLFwsTFwsnFxfFDwsLCwsLC5MLCwsLCxcXFxcLDwsLExcLCxcnCwsLGycXFxsLDwtDCxsLhQuTCw8LCws3GwsbCxsLGwtzGwtzGwsbCxsLGwtTGwtzGwsbGxsbGxsbGxsLGxsFDWGRjWEqAioCAU4CDw8LEwsLJxMLJxMLHxMLJxcXCx8XFwsnFxcLJxcXCycXFwsfFwsjCwsTCwsTCw8LEwsLEwsPEwsTCydTDw9THwsTCxcTCxMLCxsLIxcLEwsLDwsLDwsTCxcPFwsTCxcLEwsXHxcLEwsTDxcLHxcXCx8XFwsfFxcLHxcXCycXFwsnExMPFwsTCwsTCwsXCxMLFx8nBwVZWQE9DwcjHwcPHwsvCyMnHysfHysnJysjFxtTNzMvHxsjAlIeHx0SAhYCAwMZDgIDAxkKAh3mAuoCFWEmAh3SAtYCBT0FPwVBBUMdqgKuAgVFBUcdtgK6Ag0xHcYCygIRDwAddf4CHQoDDgMjCwlBAQAAAAAAAAABAAAAAAAAAAACAAAAAAAAQAAAAAAAAAAFSQMDNgRaBGFmZmluZV9tYXA8KGQwLCBkMSwgZDIpIC0+IChkMCwgZDEsIGQyKT4AAwMzwgIFSx0qBC4EDTMDAzNHAwMz3gIFTQMHPSNtAgNvcR0eAyIDHUoDTgNhZmZpbmVfbWFwPChkMCwgZDEsIGQyLCBkMykgLT4gKGQwLCBkMSwgZDIsIGQzKT4AEQsBBU8FUQVTBVUFVwVZIwsJQQEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAACAAAAAAAABVsFXQVfBWEFYx0eAiICHSoCLgIdNgI6Ah1CAkYCBWURAQUFZwVpIwEBAQMDGfoCBWsFbQMDGQYDAwd9AgJ/I4EjBW8FcQVzAwMqA1YEAwVSA2tWA1oDHV4DYgMVsgO+AwMFjY8PkQV1EQshBXcDD5WXEZmdn6GjpUcPp6mrBXkBCf37+/sNL2FmZmluZV9tYXA8KGQwLCBkMSkgLT4gKGQwLCBkMSk+AAV7IwsJQQgAAAAAAAAADAAAAAAAAAACAAAAAAAAAAIAAAAAAAAABX0RCwkFfwWBBYMBF62xtbm/xcnN0dfdAwUTrxUpCUkDBROzFSkJSwMFE7cVKQlNAwUTuxW9CU8jCwcxAQAAAAAAAAAAAgAAAAAAAIAAAAAAAAAAAwUTwRXDCVEjCwcxAQAAAAAAAAAIAAAAAAAAAAACAAAAAAAAAwUTxxVVCVMDBRPLFSkJVwMFE88VVQlZAwUT0xXVCVsjCwUhAAIAAAAAAACAAAAAAAAAAAMFE9kV2wldIwsHMQEAAAAAAAAAAAIAAAAAAABAAAAAAAAAAAMFE98VKQlfAwURHw9JAwURHw9LAwURHw9NAwURNw9PAwURNw9RAwURHw9TAwURHw9XAwURHw9ZAwUR8w9bDTUDBRE3D10DBREfD18jdHB1Lm1lbW9yeV9zcGFjZTx2bWVtPgAjdHB1LmRpbWVuc2lvbl9zZW1hbnRpY3M8YXJiaXRyYXJ5PgAjdHB1LmRpbWVuc2lvbl9zZW1hbnRpY3M8cGFyYWxsZWw+ACN0cHUubWVtb3J5X3NwYWNlPHNtZW0+ACN0cHUuZG90X2RpbWVuc2lvbl9udW1iZXJzPFsxXSwgWzFdLCBbMF0sIFswXSwgWzAsIDAsIDEsIDBdLCBbXSwgW10+ACN0cHUuZG90X2RpbWVuc2lvbl9udW1iZXJzPFsxXSwgWzBdLCBbMF0sIFsxXSwgWzAsIDAsIDEsIDFdLCBbXSwgW10+ABEBAREDAQWFHRoCCwWHBYktGwl2JRO6JQcVYzICBYstGwkGJhciJgsVZT4CBY0tKweaFUGNFWdKAgWPLSsJlhUfohU/FU4CWgIdUgJWAgWRLSsHqhUlfxVeAmoCHWICZgIFky0rCe4RHzISExVuAnoCHXICdgIFlS0rCdoCQSIDIxV+AooCHYIChgIFly1pCQ4DLUYDExWOApoCHZIClgIFmS1pB8IDLasdngKiAgWbLaYCBwoIKWMFnQWfHbICCwWhBaMdvgILBaURCxEFpx3OAgsFqQWrHdoCCwWtEQsFAwMZawWvHe4CCwWxAwc9I232Am9xIwEJIQEAAAABAAAABAAAAAAAAAATCQEddwsjAQkhAQAAAAEAAAADAAAAAAAAACUNCQAAAAAFsx0SAwsFtQMDGRoDEQECEAW3HSYDCwW5BbsDAzIDNgMFvSMBAwkBAAAAHT4DQgMFvx1GAwsFwQXDHT0LBcUFxxEBEQXJHWYDCwXLAwMzbgMRCxUddgN6AwXNHX4DCwXPHYYDigMF0R2OAwsF0wMDGZYDEwmQzMzMPx2eA6IDBdUdpgMLBdcdda4DHXeJHbYDugMF2S0bB+IKE1EVwgPOAx3GA8oDBdstGwd2DBNFFdID3gMd1gPaAwXdLRsHGg0JcRXiA+4DHeYD6gMF3y0bBwINBy0V8gP+Ax32A/oDBeEtGwnOER1qEgsVAgQOBB0GBAoEBeMtGwlWExOSEwcVYRIEFWMWBBVlZx0eBCIEBeUdJgSJBecF6R0yBAsF6wXtHT4EQgQF7x1GBAsF8QMDGU4EJQcJAAAAAAMHfQYCfyOBIyNhcml0aC5vdmVyZmxvdzxub25lPgAjYXJpdGguZmFzdG1hdGg8bm9uZT4AAQICAxf/BwUJCRMvJwUCEAICCQsBAgQnBQIQAhAJAQkX+QkFBQIQAgIJRQFBJwcFAhACAgknCQUFAhACAgknBQIQAhABF/kJBQUFAhAJRScFAhACBAEnBQIQAhAPF/kHBQIQAgQBLxf5BwUhAhABLxf5BQIQAgQBmxf5BwUCEAICCS8nCQUFBQIQCScDAhAJJwUCEAUJBSMBAQEBBQUREREhIxsRGyUnEQEFDQEBAQEFBQkBAQEBBQ0BAQEBBQUHAQEBBQ0BAQEBBQUFAQEnBwUFAhABJwUFAhABJwcFAhACBAEEDh4FAREBiwcDATELEQGTBwNVdyMBAQEBAQEBAQUBBQERAREBEQEhASMBGwERARsBJQEnAREBAwMhBwMBDwchOQMPBQcjGwYXAwEDJQMDDQcDAQ8HDTsDDwUnKR0UDQMrCQMRKQMDJXMDCRUGJQMHA1UDAwkFAwMDAwkFAwMDAwkFAwMJBgkDFQkfWVtdBQYJAwcDXwUGCQMVA1cZBQk/C2MfWVtdFwANAwEFFwANAwMDBQMDBwYDAwMDBQcGAwMDAwcRBgMDEwkLLS8xEwYXAwEDMwMDHQcDAQ8HHTEDDwU1NwMDAwUDAwcGAwMDAwUHBgMDAwMHEQYDAxMJCTs9PxMGFwMBA0EbBhcDAQM5AwMNBwMBDwcNOwMPBUVHHRQNA0kJA7XiAgMDAwUDAwMDAwUDAwMDAwUDAwMDAwUDAwkGAwMXCw1VV1lbBQYDAwcDXQMDAwUDAwMDAwUDAwMDAwUDAwMDAwUDAwkGAwMXCw9hY2VnBQYDAwcDaQMDAwUDAwMDAwUDAwMDAwUDAwMDAwUDAwkGAwMXCxFtb3FzBQYDAwcDdQMDAwUDAwMDAwUDAwMDAwUDAwMDAwUDAwkGAwMpCxd5e31/BQYDAysDgQUGJQMtA4MDAwMFAwMDAwMFAwMDAwMFAwMDAwMFAwMJBgMDFwsZh4mLjQUGAwMHA48DAwMFAwMDAwMFAwMDAwMFAwMDAwMFAwMJBgMDKQsbk5WXmQUGAwMrA5sFBiUDLQOdAwMneQMNHwcnewMNB19roQMDQRYDAwElB0GDAwEFQ6UnAzoDLgMDGRUGQwMZA6cpB0ODAxkFq6kDAwMFAwMDAwMFAwMJBgMDHQcdr7EFBgMDHQOzIQeHhQMZA7UPB3IDagMDHwW3rQMDAwUDAwMDAwUDAwMDAwUDAwkGAwM3CRW7vb8FBgMDOQPBAwMDBQMDAwMDBQMDAwMDBQMDCQYDAzsJE8XHyQUGAwMdA8shB4eFAxkDzRUGIQMZA8MPByE5Ax8Fz9ErBoIDAx8FudMDA5oDkgMDCRUGqgMDDQPXLQYaBAMNB9Wj2RUGNQMNA4UjBzUtAw0F290vBzoELQMNA98DAyd5Aw0fByd7Aw0HkXfjFQY1Aw0DnyMHNS0DDQXl5zEHQS0DDQXp4QMDAwUDAwMDAwUDAwMDAwUDAwkGAwMVCR/t7/EFBgMDBwPzAwMnSgQDBx8HJ1IEAwcH62v3MwdDLQMHBfX5AwMJBQMDAwMJBQMDAwMJBQMDCQYJAxUJH/3/AgIFBgkDBwMGAgUGCQMVA/sZBQk/Cw4CH/3/AgIXAA0DAQUXAA0DAyHiAgMBDwchOQMPBQdLGwYXAwEDTQMDDQcDAQ8HDTsDDwVPUR0UDQNTCQMpXQMDAwUDAwMDAwUDAwMDAwUDAwkGAwMVCR9VV1kFBgMDBwNbAwMJBQMDAwMJBQMDAwMJBQMDAwMJBQMDCQYJAxcLIV9hY2UFBgkDBwNnBQYJAxcDXRkFCfICDWshX2FjZQMDJXMDCRUGJQMHA20DAwkFAwMDAwkFAwMDAwkFAwMJBgkDFQkfcXN1BQYJAwcDdwUGCQMVA28ZBQk/C3sfcXN1FwANAwEFFwANDQABCxEB4QcDEQ8NAQEBAQEBAQEFAQUBAwMBBwMBAwMBBwMBDQQBCQEDBQ0LEQHjBwMpPw0BAQEBAQEBAQUBBQEDAwMFAwMHBgMDAwMFBwYDAwMDBxEGAwMTCQsNDxETBhcDAQMTAwMdBwMBDwcdMQMPBRUXAwMDBQMDBwYDAwMDBQcGAwMDAwcRBgMDEwkJGx0fEwYXAwEDIQMDAQcDAQMDAQcDAQ0EAQkBAyMlCxEB5QcDKT8NAQEBAQEBAQEFAQUBAwMDBQMDBwYDAwMDBQcGAwMDAwcRBgMDEwkLDQ8REwYXAwEDEwMDHQcDAQ8HHTEDDwUVFwMDAwUDAwcGAwMDAwUHBgMDAwMHEQYDAxMJCRsdHxMGFwMBAyEDAwEHAwEDAwEHAwENBAEJAQMjJQsRAecHAxEPDQEBAQEBAQEBBQEFAQMDAQcDAQMDAQcDAQ0EAQcBBQ0LEQHpBwMpPw0BAQEBAQEBAQUBBQEDAwMFAwMHBgMDAwMFBwYDAwMDBxEGAwMTCQsNDxETBhcDAQMTAwMdBwMBDwcdMQMPBRUXAwMDBQMDBwYDAwMDBQcGAwMDAwcRBgMDEwkJGx0fEwYXAwEDIQMDAQcDAQMDAQcDAQ0EAQcBJSMLEQHrBwMRDw0BAQEBAQEBAQUBBQEDAwEHAwEDAwEHAwENBAEJAQMNBQsRAe0HAxEPDQEBAQEBAQEBBQEFAQMDAQcDAQMDAQcDAQ0EAQkBAwUNCxEB7wcDEQ8NAQEBAQEBAQEFAQUBAwMBBwMBAwMBBwMBDQQBCQEDDQULEQHxBwMRDw0BAQEBAQEBAQUBBQEDAwEHAwEDAwEHAwENBAEFBQ0LEQH1BwMTEw0BAQEBAQEBAQUBBQEDAwEHAwEDAwEHAwEDAwEHAwENBAEHAQ0PCxEB9wcDEQ8NAQEBAQEBAQEFAQUBAwMBBwMBAwMBBwMBDQQBCQEDBQ0GAwEFAQDeH/MJCxMJCxMVMzUvSUszCQsJCwcJDxENFQsLDRcdCQsZGwsNCw0HCQcJKy2VPycvLTUtaY0/JQkLHQsjISMpsS0dHSUjJREpYxsZGRkZGRkZGRkZCRVtEgINHSUdExcXExsXFxMXFxcXDxkjFSMZGRcZFRkjJR8PDQkdEWJ1aWx0aW4Ac3RhYmxlX21vc2FpYwB0cHUAYXJpdGgAbW9kdWxlAGFyaXRoLmNvbnN0YW50AHZlY3Rvci5zaGFwZV9jYXN0AGFyaXRoLmluZGV4X2Nhc3QAdmVjdG9yLmxvYWQAZnVuYy5mdW5jAGZ1bmMucmV0dXJuAGFyaXRoLmNtcGkAbWVtcmVmLmxvYWQAYXJpdGguZXh0c2kAdmVjdG9yLmJyb2FkY2FzdABzY2YueWllbGQAdHB1LnZlY3Rvcl9zdG9yZQBhcml0aC5leHR1aQBzY2YuaWYAdHB1Lm1hdG11bAB0cHUucmVwZWF0AGFyaXRoLnN1YmYAYXJpdGgubXVsaQB0cHUuaW90YQBhcml0aC5hZGRpAGFyaXRoLmFuZGkAYXJpdGguc2VsZWN0AG1hdGguZXhwAGFyaXRoLm11bGYAYXJpdGguYWRkZgBzeW1fbmFtZQBmdW5jdGlvbl90eXBlAHRyYW5zZm9ybV9pbmRpY2VzAHdpbmRvd19ib3VuZHMAdmFsdWUAL21udC9jYXJsZXMvbGV2YW50ZXIvLnZlbnYvbGliL3B5dGhvbjMuMTEvc2l0ZS1wYWNrYWdlcy9qYXgvZXhwZXJpbWVudGFsL3BhbGxhcy9vcHMvdHB1L3NwbGFzaF9hdHRlbnRpb24vc3BsYXNoX2F0dGVudGlvbl9rZXJuZWwucHkAL21udC9jYXJsZXMvbGV2YW50ZXIvc3JjL2xldmFudGVyL2xheWVycy9hdHRlbnRpb24ucHkAcHJlZGljYXRlAGFkZAB0cmFuc2Zvcm1fMAB0cmFuc2Zvcm1fMQB0cmFuc2Zvcm1fMgB0cmFuc2Zvcm1fMwB0cmFuc2Zvcm1fNAB0cmFuc2Zvcm1fNQB0cmFuc2Zvcm1fNgB0cmFuc2Zvcm1fNwB0cmFuc2Zvcm1fOAB0cmFuc2Zvcm1fOQB0cmFuc2Zvcm1fMTAAL21udC9jYXJsZXMvbGV2YW50ZXIvc3JjL2xldmFudGVyL21v
