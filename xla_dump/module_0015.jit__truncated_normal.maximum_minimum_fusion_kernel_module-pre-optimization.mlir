module @maximum_minimum_fusion_kernel_module attributes {dlti.dl_spec = #dlti.dl_spec<index = 64 : i32>, xla.cpu_memory_region_name = "xla_cpu_emitter__loop_fusion_kernel_emitter__hlo_opcode__fusion"} {
  func.func @maximum_minimum_fusion(%arg0: tensor<f32> {llvm.align = 64 : index, llvm.dereferenceable = 4 : index, xla.invariant, xla.slice_index = 0 : index}, %arg1: tensor<f32> {llvm.align = 64 : index, llvm.dereferenceable = 4 : index, xla.invariant, xla.slice_index = 1 : index}, %arg2: tensor<16x8xi32> {llvm.align = 64 : index, llvm.dereferenceable = 512 : index, xla.invariant, xla.slice_index = 2 : index}, %arg3: tensor<16x8xi32> {llvm.align = 64 : index, llvm.dereferenceable = 512 : index, xla.invariant, xla.slice_index = 3 : index}, %arg4: tensor<i32> {llvm.align = 64 : index, llvm.dereferenceable = 4 : index, xla.invariant, xla.slice_index = 4 : index}, %arg5: tensor<i32> {llvm.align = 64 : index, llvm.dereferenceable = 4 : index, xla.invariant, xla.slice_index = 5 : index}, %arg6: tensor<16x8xf32> {llvm.align = 64 : index, llvm.dereferenceable = 512 : index, xla.slice_index = 6 : index}) -> tensor<16x8xf32> attributes {xla.backend_kind = #xla.backend_kind<cpu>, xla.entry} {
    %0 = xla.workgroup_id  x {xla.range = [0 : index, 0 : index]}
    %1 = xla.workgroup_id  y {xla.range = [0 : index, 0 : index]}
    %2 = xla.workgroup_id  z {xla.range = [0 : index, 0 : index]}
    %3 = scf.forall (%arg7, %arg8, %arg9) in (1, 1, 1) shared_outs(%arg10 = %arg6) -> (tensor<16x8xf32>) {
      %xla_loop = xla.loop (%arg7, %arg8, %arg9, %0, %1, %2)[%i, %j] -> (%ra, %rb) in #xla.indexing_map<"(th_x, th_y, th_z, bl_x, bl_y, bl_z)[s0, s1] -> (s0, s1), domain: th_x in [0, 0], th_y in [0, 0], th_z in [0, 0], bl_x in [0, 0], bl_y in [0, 0], bl_z in [0, 0], s0 in [0, 15], s1 in [0, 7]"> iter_args(%iter = %arg10) -> (tensor<16x8xf32>) {
        %pure_call = xla.pure_call @fused_computation_2_min_2(%arg0, %arg1, %arg2, %arg3, %arg4, %arg5, %ra, %rb) : (tensor<f32>, tensor<f32>, tensor<16x8xi32>, tensor<16x8xi32>, tensor<i32>, tensor<i32>, index, index) -> f32
        %inserted = tensor.insert %pure_call into %iter[%ra, %rb] : tensor<16x8xf32>
        xla.yield %inserted : tensor<16x8xf32>
      }
      scf.forall.in_parallel {
        tensor.parallel_insert_slice %xla_loop into %arg10[0, 0] [16, 8] [1, 1] : tensor<16x8xf32> into tensor<16x8xf32>
      }
    }
    return %3 : tensor<16x8xf32>
  }
  func.func private @fused_computation_2_min_2(%arg0: tensor<f32>, %arg1: tensor<f32>, %arg2: tensor<16x8xi32>, %arg3: tensor<16x8xi32>, %arg4: tensor<i32>, %arg5: tensor<i32>, %arg6: index {xla.range = [0 : index, 15 : index]}, %arg7: index {xla.range = [0 : index, 7 : index]}) -> f32 attributes {llvm.linkage = #llvm.linkage<internal>} {
    %cst = arith.constant 2.81022636E-8 : f32
    %cst_0 = arith.constant -2.00214257E-4 : f32
    %cst_1 = arith.constant 3.43273939E-7 : f32
    %cst_2 = arith.constant 1.00950558E-4 : f32
    %extracted = tensor.extract %arg2[%arg6, %arg7] : tensor<16x8xi32>
    %extracted_3 = tensor.extract %arg3[%arg6, %arg7] : tensor<16x8xi32>
    %0 = arith.xori %extracted, %extracted_3 : i32
    %c9_i32 = arith.constant 9 : i32
    %c0_i32 = arith.constant 0 : i32
    %1 = arith.shrui %0, %c9_i32 : i32
    %c32_i32 = arith.constant 32 : i32
    %2 = arith.cmpi ugt, %c32_i32, %c9_i32 : i32
    %3 = arith.select %2, %1, %c0_i32 : i32
    %c1065353216_i32 = arith.constant 1065353216 : i32
    %4 = arith.ori %3, %c1065353216_i32 : i32
    %5 = arith.bitcast %4 : i32 to f32
    %cst_4 = arith.constant -1.000000e+00 : f32
    %6 = arith.addf %5, %cst_4 : f32
    %extracted_5 = tensor.extract %arg0[] : tensor<f32>
    %extracted_6 = tensor.extract %arg1[] : tensor<f32>
    %7 = arith.subf %extracted_5, %extracted_6 : f32
    %8 = arith.mulf %6, %7 : f32
    %9 = arith.addf %8, %extracted_6 : f32
    %10 = arith.maximumf %extracted_6, %9 : f32
    %11 = arith.negf %10 : f32
    %12 = arith.mulf %10, %11 : f32
    %13 = math.log1p %12 : f32
    %14 = arith.negf %13 : f32
    %cst_7 = arith.constant 5.000000e+00 : f32
    %15 = arith.cmpf olt, %14, %cst_7 : f32
    %16 = arith.extui %15 : i1 to i8
    %17 = arith.select %15, %cst, %cst_0 : f32
    %18 = arith.select %15, %cst_1, %cst_2 : f32
    %cst_8 = arith.constant -2.500000e+00 : f32
    %19 = math.sqrt %14 : f32
    %cst_9 = arith.constant -3.000000e+00 : f32
    %20 = arith.addf %14, %cst_8 : f32
    %21 = arith.addf %19, %cst_9 : f32
    %22 = arith.select %15, %20, %21 : f32
    %23 = arith.mulf %17, %22 : f32
    %cst_10 = arith.constant -3.5233877E-6 : f32
    %cst_11 = arith.constant 0.00134934322 : f32
    %24 = arith.addf %18, %23 : f32
    %25 = arith.select %15, %cst_10, %cst_11 : f32
    %26 = arith.mulf %24, %22 : f32
    %cst_12 = arith.constant -4.39150654E-6 : f32
    %cst_13 = arith.constant -0.00367342844 : f32
    %27 = arith.addf %25, %26 : f32
    %28 = arith.select %15, %cst_12, %cst_13 : f32
    %29 = arith.mulf %27, %22 : f32
    %cst_14 = arith.constant 2.1858087E-4 : f32
    %cst_15 = arith.constant 0.00573950773 : f32
    %30 = arith.addf %28, %29 : f32
    %31 = arith.select %15, %cst_14, %cst_15 : f32
    %32 = arith.mulf %30, %22 : f32
    %cst_16 = arith.constant -0.00125372503 : f32
    %cst_17 = arith.constant -0.0076224613 : f32
    %33 = arith.addf %31, %32 : f32
    %extracted_18 = tensor.extract %arg2[%arg6, %arg7] : tensor<16x8xi32>
    %extracted_19 = tensor.extract %arg3[%arg6, %arg7] : tensor<16x8xi32>
    %34 = arith.select %15, %cst_16, %cst_17 : f32
    %35 = arith.mulf %33, %22 : f32
    %36 = arith.xori %extracted_18, %extracted_19 : i32
    %37 = arith.negf %10 : f32
    %cst_20 = arith.constant -0.00417768164 : f32
    %cst_21 = arith.constant 0.00943887047 : f32
    %38 = arith.addf %34, %35 : f32
    %c0_i32_22 = arith.constant 0 : i32
    %39 = arith.shrui %36, %c9_i32 : i32
    %c32_i32_23 = arith.constant 32 : i32
    %40 = arith.cmpi ugt, %c32_i32_23, %c9_i32 : i32
    %41 = arith.select %40, %39, %c0_i32_22 : i32
    %42 = arith.mulf %10, %37 : f32
    %43 = arith.select %15, %cst_20, %cst_21 : f32
    %44 = arith.mulf %38, %22 : f32
    %45 = arith.ori %41, %c1065353216_i32 : i32
    %46 = math.log1p %42 : f32
    %cst_24 = arith.constant 0.246640727 : f32
    %cst_25 = arith.constant 1.00167406 : f32
    %47 = arith.addf %43, %44 : f32
    %48 = math.sqrt %14 : f32
    %49 = arith.bitcast %45 : i32 to f32
    %50 = arith.negf %46 : f32
    %51 = arith.select %15, %cst_24, %cst_25 : f32
    %52 = arith.mulf %47, %22 : f32
    %53 = arith.addf %50, %cst_8 : f32
    %54 = arith.addf %48, %cst_9 : f32
    %55 = arith.addf %49, %cst_4 : f32
    %56 = arith.cmpf olt, %50, %cst_7 : f32
    %57 = arith.extui %56 : i1 to i8
    %cst_26 = arith.constant 1.50140941 : f32
    %cst_27 = arith.constant 2.83297682 : f32
    %58 = arith.addf %51, %52 : f32
    %59 = arith.select %56, %53, %54 : f32
    %60 = arith.mulf %55, %7 : f32
    %61 = arith.select %56, %cst_26, %cst_27 : f32
    %62 = arith.mulf %58, %59 : f32
    %63 = arith.addf %60, %extracted_6 : f32
    %64 = math.absf %10 : f32
    %cst_28 = arith.constant 1.000000e+00 : f32
    %cst_29 = arith.constant 0x7F800000 : f32
    %65 = arith.addf %61, %62 : f32
    %66 = arith.maximumf %extracted_6, %63 : f32
    %67 = arith.cmpf oeq, %64, %cst_28 : f32
    %68 = arith.extui %67 : i1 to i8
    %69 = arith.mulf %66, %cst_29 : f32
    %70 = arith.mulf %65, %66 : f32
    %71 = arith.select %67, %69, %70 : f32
    %cst_30 = arith.constant 1.41421354 : f32
    %c-2147483648_i32 = arith.constant -2147483648 : i32
    %extracted_31 = tensor.extract %arg4[] : tensor<i32>
    %72 = arith.sitofp %extracted_31 : i32 to f32
    %73 = arith.bitcast %72 : f32 to i32
    %74 = arith.andi %73, %c-2147483648_i32 : i32
    %c2147483647_i32 = arith.constant 2147483647 : i32
    %75 = arith.andi %73, %c2147483647_i32 : i32
    %c2139095040_i32 = arith.constant 2139095040 : i32
    %76 = arith.cmpi sgt, %75, %c2139095040_i32 : i32
    %77 = arith.extui %76 : i1 to i8
    %c0_i32_32 = arith.constant 0 : i32
    %78 = arith.cmpi ne, %74, %c0_i32_32 : i32
    %79 = arith.extui %78 : i1 to i8
    %c2147483647_i32_33 = arith.constant 2147483647 : i32
    %80 = arith.ori %77, %79 : i8
    %c-1_i32 = arith.constant -1 : i32
    %81 = arith.andi %73, %c2147483647_i32_33 : i32
    %c0_i32_34 = arith.constant 0 : i32
    %82 = arith.bitcast %72 : f32 to i32
    %c1_i32 = arith.constant 1 : i32
    %83 = arith.trunci %80 : i8 to i1
    %84 = arith.select %83, %c-1_i32, %c1_i32 : i32
    %extracted_35 = tensor.extract %arg4[] : tensor<i32>
    %85 = arith.cmpi eq, %81, %c0_i32_34 : i32
    %86 = arith.extui %85 : i1 to i8
    %c1_i32_36 = arith.constant 1 : i32
    %87 = arith.addi %82, %84 : i32
    %88 = arith.sitofp %extracted_35 : i32 to f32
    %89 = arith.cmpf oeq, %88, %cst_29 : f32
    %90 = arith.extui %89 : i1 to i8
    %c2139095040_i32_37 = arith.constant 2139095040 : i32
    %91 = arith.select %85, %c1_i32_36, %87 : i32
    %92 = arith.cmpf une, %88, %88 : f32
    %93 = arith.extui %92 : i1 to i8
    %c2143289344_i32 = arith.constant 2143289344 : i32
    %94 = arith.select %89, %c2139095040_i32_37, %91 : i32
    %95 = arith.select %92, %c2143289344_i32, %94 : i32
    %96 = arith.bitcast %95 : i32 to f32
    %97 = arith.mulf %71, %cst_30 : f32
    %extracted_38 = tensor.extract %arg5[] : tensor<i32>
    %98 = arith.sitofp %extracted_38 : i32 to f32
    %99 = arith.bitcast %98 : f32 to i32
    %100 = arith.andi %99, %c-2147483648_i32 : i32
    %101 = arith.andi %99, %c2147483647_i32_33 : i32
    %102 = arith.cmpi sgt, %101, %c2139095040_i32_37 : i32
    %103 = arith.extui %102 : i1 to i8
    %104 = arith.cmpi ne, %100, %c-2147483648_i32 : i32
    %105 = arith.extui %104 : i1 to i8
    %106 = arith.ori %103, %105 : i8
    %107 = arith.andi %99, %c2147483647_i32_33 : i32
    %108 = arith.bitcast %98 : f32 to i32
    %109 = arith.trunci %106 : i8 to i1
    %110 = arith.select %109, %c-1_i32, %c1_i32_36 : i32
    %extracted_39 = tensor.extract %arg5[] : tensor<i32>
    %cst_40 = arith.constant 0xFF800000 : f32
    %111 = arith.cmpi eq, %107, %c0_i32_34 : i32
    %112 = arith.extui %111 : i1 to i8
    %c-2147483647_i32 = arith.constant -2147483647 : i32
    %113 = arith.addi %108, %110 : i32
    %114 = arith.sitofp %extracted_39 : i32 to f32
    %115 = arith.cmpf oeq, %114, %cst_40 : f32
    %116 = arith.extui %115 : i1 to i8
    %c-8388608_i32 = arith.constant -8388608 : i32
    %117 = arith.select %111, %c-2147483647_i32, %113 : i32
    %118 = arith.cmpf une, %114, %114 : f32
    %119 = arith.extui %118 : i1 to i8
    %120 = arith.select %115, %c-8388608_i32, %117 : i32
    %121 = arith.select %118, %c2143289344_i32, %120 : i32
    %122 = arith.bitcast %121 : i32 to f32
    %123 = arith.maximumf %96, %97 : f32
    %124 = arith.minimumf %122, %123 : f32
    return %124 : f32
  }
}